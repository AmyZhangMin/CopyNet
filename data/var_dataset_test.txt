var anchor = this . anchor ; var lead:==:this . lead ;
var view = view <CAM> controllers [ i ] ; var nav:==:view . _ nav ;
var url = require ( ' url ' ) . parse ( request . url , true , true ) ; var query:==:url . query ;
var data = data <CAM> original . filter ( function ( d , i ) var visible:==:d . visible ;
var gl = this . gl ; var shader <CAM> program:==:PIXI . shader <CAM> program ;
var settings = this . settings ; var info <CAM> dialog:==:this . info <CAM> dialog    editor . children ( ' . ' + this . class <CAM> prefix + ' dialog - info ' ) ;
var lottery <CAM> search = $ ( ' # lottery <CAM> search ' ) ; var lottery <CAM> table:==:$ ( ' # lottery <CAM> table ' ) ;
var type = uniform . info . type ; var arg:==:args . uniforms [ name ] ;
var is <CAM> defined = leaflet <CAM> helpers . is <CAM> defined ; var create <CAM> leaflet <CAM> bounds:==:leaflet <CAM> bounds <CAM> helpers . create <CAM> leaflet <CAM> bounds ;
var Emitter = require ( ' events ' ) . event <CAM> emitter ; var util:==:require ( ' util ' ) ;
var deep <CAM> orange600 = exports . deep <CAM> orange600 = ' # f4511e ' ; var deep <CAM> orange700:==:exports . deep <CAM> orange700    ' # e64a19 ' ;
var create <CAM> finally = parse <CAM> tree <CAM> factory . create <CAM> finally ; var create <CAM> for <CAM> in <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> for <CAM> in <CAM> statement ;
var deep <CAM> differ = require ( ' deep <CAM> differ ' ) ; var flatten <CAM> style:==:require ( ' flatten <CAM> style ' ) ;
var dom <CAM> property = require ( ' dom <CAM> property ' ) ; var react <CAM> debug <CAM> current <CAM> fiber:==:require ( ' react <CAM> debug <CAM> current <CAM> fiber ' ) ;
var processed <CAM> length = evt . processed <CAM> length ; var file <CAM> length:==:evt . file <CAM> length ;
var query = _ props2 . query ; var hash:==:_ props2 . hash ;
var scroll <CAM> view = options . scroll <CAM> view ; var transclude:==:options . transclude ;
var status = response [ ' @status ' ] ; var reason:==:response [ ' @reason ' ] ;
var color <CAM> mask = default <CAM> value ( rs . color <CAM> mask , ) ; var blending:==:default <CAM> value ( rs . blending , ) ;
var key <CAM> handler = this . _ key <CAM> handler . bind ( this ) ; var keypad:==:this . _ el . query <CAM> selector ( ' . pin - keypad ' ) ;
var net = require ( ' net ' ) var fs:==:require ( ' fs ' )
var models = _ _ alloy <CAM> id64 . models ; var len:==:models . length ;
var first <CAM> row = config . first <CAM> row , last <CAM> row = config . last <CAM> row + 1 ; var children:==:this . element . children ;
var group = _ ref2 . group ; var force:==:_ ref2 . force ;
var create <CAM> this <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> this <CAM> expression ; var create <CAM> throw <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> throw <CAM> statement ;
var parse <CAM> tree <CAM> type = traceur . syntax . trees . parse <CAM> tree <CAM> type ; var token <CAM> type:==:traceur . syntax . token <CAM> type ;
var chart = tooltip . _ chart ; var chart <CAM> area:==:tooltip . _ chart <CAM> instance . chart <CAM> area ;
var device <CAM> class = Windows . Devices . Enumeration . device <CAM> class ; var Display:==:Windows . Graphics . Display ;
var check <CAM> open = this . _ check <CAM> open ; var check <CAM> close:==:this . _ check <CAM> close ;
var service = service <CAM> list [ i ] ; var service <CAM> type:==:service . query <CAM> selector ( ' service <CAM> type ' ) . innerHTML ;
var start = request <CAM> parameters & & request <CAM> parameters . start <CAM> date ; var end:==:request <CAM> parameters & & request <CAM> parameters . end <CAM> date ;
var option = _ props . option ; var instance <CAM> prefix:==:_ props . instance <CAM> prefix ;
var density = this . density ( ) ; var str:==:' Sparse Matrix [ ' + string . format ( rows , options ) + ' x ' + string . format ( columns , options ) + ' ] density : ' + string . format ( density , options ) + ' \n ' ;
var prompt = require ( ' gulp - prompt ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var deactivated = ref . deactivated ; var activated:==:ref . activated ;
var View = require ( ' View ' ) ; var touchable <CAM> without <CAM> feedback:==:require ( ' touchable <CAM> without <CAM> feedback ' ) ;
var now = require ( ' date - now ' ) var slice:==:Array . prototype . slice
var eval <CAM> spy = jasmine . create <CAM> spy ( ' eval <CAM> spy ' ) ; var computed:==:ko . computed ( function ( )
var empty <CAM> function = require ( ' empty <CAM> function ' ) ; var native <CAM> request <CAM> animation <CAM> frame:==:require ( ' native <CAM> request <CAM> animation <CAM> frame ' ) ;
var ndarray = require ( ' ndarray ' ) ; var homography:==:require ( ' ndarray - homography ' ) ;
var nearest <CAM> size = sizes . reduce ( function ( nearest <CAM> size , size <CAM> string , idx ) var size:==:width <CAM> from <CAM> size <CAM> string ( size <CAM> string ) ;
var pos = data . pos ; var session:==:doc . get <CAM> session ( ) . session ;
var content = options . content ; var delay:==:options . delay ;
var extruded <CAM> height = options . extruded <CAM> height ; var extrude:==:defined ( extruded <CAM> height ) ;
var expect = require ( ' chai ' ) . expect ; var assert:==:require ( ' assert ' ) ;
var touch = _ props . touch ; var icon <CAM> style:==:_ props . icon <CAM> style ;
var project <CAM> id = self . configuration _ [ ' project <CAM> id ' ] ; var version:==:self . configuration _ [ ' version ' ] ;
var hasZ = context [ ' hasZ ' ] ; var srs <CAM> name:==:context [ ' srs <CAM> name ' ] ;
var data = request . source . data ; var blob:==:request . source . data . blob ;
var left = pos . left ; var top:==:pos . top ;
var data <CAM> label <CAM> utils = powerbi . visuals . data <CAM> label <CAM> utils ; var visual <CAM> data <CAM> role <CAM> kind:==:powerbi . visual <CAM> data <CAM> role <CAM> kind ;
var namespaces = taffy ( members . namespaces ) ; var mixins:==:taffy ( members . mixins ) ;
var latlng = list [ id <CAM> folders ] [ ' bkmrk ' ] [ id <CAM> bkmrks ] . latlng . split ( ' , ' ) ; var guid:==:list [ id <CAM> folders ] [ ' bkmrk ' ] [ id <CAM> bkmrks ] . guid ;
var slices = this . slices = options . slices ; var highlight <CAM> slices:==:this . highlight <CAM> slices    options . highlight <CAM> slices ;
var strip <CAM> unbuffered = options . strip <CAM> unbuffered ! = = false ; var strip <CAM> buffered:==:options . strip <CAM> buffered      true ;
var _ swagger <CAM> ui = _ _ webpack <UND> require _ _ ( 3 ) ; var _ swagger <CAM> ui2 = _ interop <CAM> require <CAM> default ( _ swagger <CAM> ui ) ; var _ layout:==:_ _ webpack <UND> require _ _ ( 1082 ) ; var _ layout2    _ interop <CAM> require <CAM> default ( _ layout ) ;
var hours <CAM> format = $ date <CAM> formatter . hours <CAM> format ( format ) ; var time <CAM> separator:==:$ date <CAM> formatter . time <CAM> separator ( format ) ;
var font <CAM> family = opts . font <CAM> family  |  |  constants . HOVERFONT ; var font <CAM> size:==:opts . font <CAM> size  |  |  constants . HOVERFONTSIZE ;
var promise = this . _ promise <CAM> at ( i ) ; var receiver:==:this . _ receiver <CAM> at ( i ) ;
var svg = this . SVG ( ) ; this . sv <CAM> ghandle <CAM> space ( svg ) ; var encoding:==:this . Get ( ' encoding ' ) ;
var path = require ( ' path ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var sequence = require ( ' gulp - sequence ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var is <CAM> mouse <CAM> down = this . instance . view . is <CAM> mouse <CAM> down ( ) ; var is <CAM> meta:==:event ? ( 0 , _ unicode . is <CAM> meta <CAM> key ) ( event . key <CAM> code ) : false ;
var _ oo = 238 ; values [ _ oo ] = _ oo ; var _ op:==:239 ; values [ _ op ]    _ op ;
var labelled <CAM> statement = traceur . syntax . trees . labelled <CAM> statement ; var member <CAM> expression:==:traceur . syntax . trees . member <CAM> expression ;
var iter = goog . iter . consume ( ' ABCDEFG ' . split ( '' ) , 10 ) ; var ex:==:assert <CAM> throws ( function ( ) iter . next ( ) ) ;
var docs = dojo . docs ; var get <CAM> cache:==:docs . _ get <CAM> cache ;
var o = new operator <CAM> node ( ' + ' , ' add ' , [ a , x ] ) ; var n:==:new function <CAM> assignment <CAM> node ( ' f ' , [ ' x ' ] , o ) ;
var cache = require ( ' gulp - cached ' ) ; var progeny:==:require ( ' gulp - progeny ' ) ;
var magnification <CAM> filter = default <CAM> value ( options . magnification <CAM> filter , texture <CAM> magnification <CAM> filter . LINEAR ) ; var maximum <CAM> anisotropy:==:( defined ( options . maximum <CAM> anisotropy ) ) ? options . maximum <CAM> anisotropy : 1 . 0 ;
var btn1 = document . get <CAM> element <CAM> by <CAM> id ( ' btn1 ' ) ; var btn2:==:document . get <CAM> element <CAM> by <CAM> id ( ' btn2 ' ) ;
var arg = _ arg ; var cmd:==:_ cmd ;
var string <CAM> to <CAM> bytes = shared <CAM> util . string <CAM> to <CAM> bytes ; var string32:==:shared <CAM> util . string32 ;
var cipher <CAM> transform <CAM> factory = core <CAM> crypto . cipher <CAM> transform <CAM> factory ; var Lexer:==:core <CAM> parser . Lexer ;
var Number = platform . Number ; var String:==:platform . String ;
var x = node . _ x ; var y:==:node . _ y ;
var available <CAM> width = nv . utils . available <CAM> width ( width , container , margin ) ; var available <CAM> height:==:nv . utils . available <CAM> height ( height , container , margin ) ;
var _ im <UND> enable <UND> ym <UND> as <UND> szm = Module [ ' _ im <UND> enable <UND> ym <UND> as <UND> szm ' ] = asm [ ' _ im <UND> enable <UND> ym <UND> as <UND> szm ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var action <CAM> sheetios = require ( ' action <CAM> sheetios ' ) ; var list <CAM> container:==:require ( ' list <CAM> container ' ) ;
var url = Npm . require ( ' url ' ) . parse ( request . url ) ; var pathname:==:url . pathname ;
var gl = render <CAM> session . gl ; var projection:==:render <CAM> session . projection ,
var from = doc <CAM> set . get <CAM> by <CAM> longname ( ' < anonymous>~headers . from ' ) ; var cache:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' < anonymous>~headers . cache ' ) ;
var l = $ ( target ) . offset ( ) . left + 10 ; var t:==:$ ( target ) . offset ( ) . top + $ ( target ) . offset ( ) . height -10 ;
var log = require ( dirs . core + ' log ' ) ; var moment:==:require ( ' moment ' ) ;
var min <CAM> dist <CAM> intersect = intersectConvex <UND> minDistIntersect ; var localAABB:==:intersectTrimesh <UND> localAABB ;
var normal = attributes [ ' normal ' ] ; var uv:==:attributes [ ' uv ' ] ;
var crypto = require ( ' crypto ' ) ; var zlib:==:require ( ' zlib ' ) ;
var pageX = event . pageX ; var pageY:==:event . pageY ;
var name = doc <CAM> set . get <CAM> by <CAM> longname ( ' Person#name ' ) ; var age:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' Person#age ' ) ;
var scroll <CAM> left = _ ref2 . scroll <CAM> left ; var scroll <CAM> top:==:_ ref2 . scroll <CAM> top ;
var cache = this . cache ; var queue:==:_ queue [ url ] ;
var Server = require ( ' karma ' ) . Server ; var path:==:require ( ' path ' ) ;
var content = document . query <CAM> selector ( ' # content ' ) ; var p:==:document . query <CAM> selector ( ' # page ' ) ;
var res = result . rows . item ( i ) ; var metadata:==:JSON . parse ( res . metadata ) ;
var semver = require ( ' semver ' ) ; var should:==:require ( ' should ' ) ;
var commands = imports . commands ; var settings:==:imports . settings ;
var ace = editor . ace ; var sel:==:ace . selection ;
var dom <CAM> utils = baidu . editor . dom . dom <CAM> utils ; var img:==:document . create <CAM> element ( ' img ' ) ;
var EXPORT <UND> DECLARATION = parse <CAM> tree <CAM> type . EXPORT <UND> DECLARATION ; var EXPORT <UND> MAPPING <UND> LIST:==:parse <CAM> tree <CAM> type . EXPORT <UND> MAPPING <UND> LIST ;
var cached <CAM> sprite = this . _ cached <CAM> sprite ; var texture:==:cached <CAM> sprite . texture ;
var now = eat . now ( ) ; var indent:==:self . indent ( now . line ) ;
var mocha = require ( ' mocha ' ) var assert:==:require ( ' assert ' )
var Span = firepad . Span ; var utils:==:firepad . utils ;
var start = new Range ( 0 , 0 , range . start . row , range . start . column ) ; var end:==:new Range ( range . end . row , range . end . column , Number . MAX <UND> VALUE , Number . MAX <UND> VALUE ) ;
var width = canvas . width - opts . paddingvar height:==:canvas . height
var settings    = this . settings ; var code <CAM> mirror:==:this . code <CAM> mirror ;
var express = require ( ' express ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var    MATCH = 25 ; var    LIT:==:26 ;
var timestamp = parse <CAM> int ( get <CAM> data ( btn , ' data - timestamp ' ) , 10 ) ; var post <CAM> delete <CAM> duration:==:parse <CAM> int ( ajaxify . data . post <CAM> delete <CAM> duration , 10 ) ;
var data = vnode . data ; var children:==:vnode . children ;
var _ update <CAM> wifi = this . _ update <CAM> wifi . bind ( this ) ; var _ update <CAM> network <CAM> status:==:this . _ update <CAM> network <CAM> status . bind ( this ) ;
var layout = imports . layout ; var ui:==:imports . ui ;
var a = new symbol <CAM> node ( ' a ' ) ; var foo:==:new accessor <CAM> node ( a , new index <CAM> node ( [ new constant <CAM> node ( ' foo ' ) ] ) ) ;
var test <CAM> set = transform <CAM> utils . test <CAM> set ( ) ; var state:==:test <CAM> set . state ;
var types = config <CAM> defs . typesvar nopt:==:require ( ' nopt ' )
var listeners = this . _ listeners ; var scopes:==:this . _ scopes ;
var argument <CAM> index = parsed <CAM> pattern . argument <CAM> index ; var argument <CAM> offset:==:parsed <CAM> pattern . argument <CAM> offset ;
var z = model . get ( ' z ' ) ; var zlevel:==:model . get ( ' zlevel ' ) ;
var Dummy3 = mongoose . model ( ' Dummy3 ' , dummy3 <CAM> schema ) ; var Dummy4:==:mongoose . model ( ' Dummy4 ' , dummy4 <CAM> schema ) ;
var latitude = cartographic . latitude ; var longitude:==:cartographic . longitude ;
var decorations = job . decorations ; var number <CAM> lines:==:job . number <CAM> lines ;
var b2 = $ ( ' b2 ' ) ; var p1:==:$ ( ' p1 ' ) ;
var m = has <CAM> weak <CAM> map ? weak : sym ; var is <CAM> private <CAM> symbol:==:m . is <CAM> private <CAM> symbol ;
var close = ' close ' ; var inner:==:' inner ' ;
var buffer <CAM> size = this . buffer <CAM> size ; var start <CAM> buffer <CAM> every:==:this . start <CAM> buffer <CAM> every     null ? buffer <CAM> size : this . start <CAM> buffer <CAM> every ;
var safe <CAM> add <CAM> layer = leaflet <CAM> layer <CAM> helpers . safe <CAM> add <CAM> layer ; var safe <CAM> remove <CAM> layer:==:leaflet <CAM> layer <CAM> helpers . safe <CAM> remove <CAM> layer ;
var event <CAM> plugin <CAM> utils = require ( ' event <CAM> plugin <CAM> utils ' ) ; var rct <CAM> event <CAM> emitter:==:require ( ' rct <CAM> event <CAM> emitter ' ) ;
var old <CAM> value = event . detail . old <CAM> value ; var new <CAM> value:==:event . detail . new <CAM> value ;
var builtin = parser <CAM> config . builtin  |  |  ; var atoms:==:parser <CAM> config . atoms  |  |  ;
var os = require ( ' os ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var callstack = imports . callstack ; var debug:==:imports . debugger ;
var access <CAM> type = context . access <CAM> type ; var model <CAM> name:==:context . model <CAM> name ;
var fill <CAM> style = params . fill <CAM> style  |  |  ' black ' ; var stroke <CAM> style:==:params . stroke <CAM> style  |  |  ' yellow ' ;
var scheduler = state . scheduler ; var destination:==:state . destination ;
var create <CAM> assignment <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> expression ; var create <CAM> assignment <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> statement ;
var rimraf = require ( ' rimraf ' ) var npmrc:==:path . join ( _ _ dirname , ' npmrc ' )
var layer = layui . layer ; var device:==:layui . device ( ) ;
var create <CAM> expression <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> expression <CAM> statement ; var create <CAM> finally:==:parse <CAM> tree <CAM> factory . create <CAM> finally ;
var rollup = require ( ' rollup ' ) . rollup ; var path:==:require ( ' path ' ) ;
var overflowX = this . overflowX ; var overflowY:==:this . overflowY ;
var map = this . map _ ; var version:==:this . version _ ;
var width = this . bounds . width ( ) ; var height:==:this . bounds . height ( ) ;
var stringify = require ( ' stringify ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var tab <CAM> id = details . tab <CAM> id ; var url:==:details . url ;
var f = format . substr ( p , 1 ) ; var c:==:fcase . substr ( p , 1 ) ;
var column <CAM> count = props . column <CAM> count ; var height:==:props . height ;
var input = msg . data . input ; var providers:==:this . providers ;
var request = require ( ' request ' ) ; var winston:==:require ( ' winston ' ) ;
var values = dict . values [ key ] ; var types:==:dict . types [ key ] ;
var options = grunt . option ( ' grunt - chrome - build - options ' ) ; var build <CAM> dir:==:options . build <CAM> dir ;
var tabs <CAM> view = _ js <CAM> view <CAM> tabs <CAM> view [ ' default ' ] ; var offline <CAM> view:==:_ js <CAM> view <CAM> offline <CAM> view [ ' default ' ] ;
var cy = pcy + dot * diry ; var cz:==:pcz + dot * dirz ;
var template <CAM> file = required ( options , ' template <CAM> file ' ) ; var output <CAM> dir:==:required ( options , ' output <CAM> dir ' ) ;
var util = imports . util ; var Panel:==:imports . Panel ;
var a = get <CAM> array ( ) ; var push:==:value <CAM> of : function ( ) a . push ( 10 ) ; return 0 ; ;
var timestamp = data . timestamp  |  |  Date . now ( ) ; var is <CAM> main:==:data . is <CAM> main  |  |  false ;
var bdi = document . create <CAM> element ( ' bdi ' ) ; var given <CAM> name:==:( contact . given <CAM> name & & contact . given <CAM> name [ 0 ] )  |  |  '' ;
var left = start <CAM> point . left + dx * progress ; var top:==:start <CAM> point . top + dy * progress ;
var classes = classes <CAM> method ? classes <CAM> method . call ( this , seg ) : [ ] ; var css:==:css <CAM> to <CAM> str ( css <CAM> method ? css <CAM> method . call ( this , seg ) : ) ;
var member <CAM> name = this . props . member <CAM> name ; var def:==:this . props . def ;
var width = default <CAM> value ( options . width , 0 ) ; var height:==:default <CAM> value ( options . height , 0 ) ;
var yellowA400 = exports . yellowA400 = ' # ffea00 ' ; var yellowA700:==:exports . yellowA700    ' # ffd600 ' ;
var cursor = profile . cursor ( ) ; var is <CAM> unary:==:abbr <CAM> utils . is <CAM> unary ( item ) ;
var param = _ param ; var $ staropt$star:==:_ $ staropt$star ;
var dom <CAM> children <CAM> operations = require ( ' dom <CAM> children <CAM> operations ' ) ; var dom <CAM> lazy <CAM> tree:==:require ( ' dom <CAM> lazy <CAM> tree ' ) ;
var buffered = _ videotag . buffered ; var duration:==:_ videotag . duration ;
var ramp <CAM> time = ramp <CAM> time  |  |  0 ; var t <CAM> from <CAM> now:==:t <CAM> from <CAM> now  |  |  0 ;
var gfm = options . gfm ; var commonmark:==:options . commonmark ;
var Cipher = des . Cipher ; var DES:==:des . DES ;
var test1 = jasmine . create <CAM> spy ( ' test1 ' ) ; var test2:==:jasmine . create <CAM> spy ( ' test2 ' ) ;
var chunk <CAM> length = this . chunk <CAM> length ( wrapper ) ; var child <CAM> nodes:==:wrapper . child <CAM> nodes ;
var m = SIMD . Uint16x8 . from <CAM> int32x4 <CAM> bits ( SIMD . Int32x4 ( 0x3F800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:SIMD . Int32x4 . from <CAM> uint16x8 <CAM> bits ( m ) ;
var io = board . io ; var address:==:opts . address  |  |  this . ADDRESSES [ 0 ] ;
var range = math . range ; var log:==:math . log ;
var widget = this . widget ; var abspos:==:widget . _ abspos ;
var get <CAM> support <CAM> code <CAM> fns = exports . get <CAM> support <CAM> code <CAM> fns = _ support <UND> code <UND> fns2 . default . get ; var clear <CAM> support <CAM> code <CAM> fns:==:exports . clear <CAM> support <CAM> code <CAM> fns    _ support <UND> code <UND> fns2 . default . reset ;
var Binary = mongoose <CAM> buffer . Binary ; var cast <CAM> error:==:schema <CAM> type . cast <CAM> error ;
var Keywords = traceur . syntax . Keywords ; var literal <CAM> expression:==:traceur . syntax . trees . literal <CAM> expression ;
var times = options . times ; var first <CAM> tangent:==:options . first <CAM> tangent ;
var frame = args . frame ; var file <CAM> name:==:context . file <CAM> name . replace ( ' . jpg ' , ' _ Reference . jpg ' ) ;
var ACL = loopback . ACL ; var Change:==:loopback . Change ;
var before <CAM> input <CAM> event <CAM> plugin = require ( ' before <CAM> input <CAM> event <CAM> plugin ' ) ; var dom <CAM> property:==:require ( ' dom <CAM> property ' ) ;
var Selection = dom . Selection = function ( doc ) var me:==:this , iframe ;
var main <CAM> view = _ js <CAM> view <CAM> main <CAM> view [ ' default ' ] ; var list <CAM> controller:==:_ js <CAM> controller <CAM> list <CAM> controller [ ' default ' ] ;
var hash = opts . hash ; var write <CAM> to <CAM> disk:==:opts . write <CAM> to <CAM> disk ;
var realloc = Module . _ realloc ; var write <CAM> string <CAM> to <CAM> memory:==:Module . write <CAM> string <CAM> to <CAM> memory ;
var exec = ref . execvar spawn:==:ref . spawn
var sinon = require ( ' sinon ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var _ hd = 115 ; values [ _ hd ] = _ hd ; var _ he:==:116 ; values [ _ he ]    _ he ;
var scale = target . scale  |  |  [ 1 , 1 ] ; var rotation:==:target . rotation  |  |  0 ;
var value <CAM> formatter = powerbi . visuals . value <CAM> formatter ; var tooltip <CAM> builder:==:powerbi . visuals . tooltip <CAM> builder ;
var cfg = cfg |  |  ; var mass:==:cfg . mass  |  |  1 ;
var promises = this . promises ; var block:==:this . block ;
var setting2 = this . settings . setting2 ; var setting3:==:this . settings . setting3 ;
var element = this . element ; var value:==:this . value ( ) ;
var field = field <CAM> information [ 0 ] ; var len:==:field . length ;
var registration <CAM> type = meta . config . registration <CAM> type  |  |  ' normal ' ; var allow <CAM> login <CAM> with:==:( meta . config . allow <CAM> login <CAM> with  |  |  ' username - email ' ) ;
var key <CAM> escape <CAM> utils = require ( ' key <CAM> escape <CAM> utils ' ) ; var react <CAM> feature <CAM> flags:==:require ( ' react <CAM> feature <CAM> flags ' ) ;
var str <CAM> ptr = Alias ( ' str <CAM> ptr ' , Ptr ( U8 ) ) ; var user <CAM> data:==:Alias ( ' user <CAM> data ' , void <CAM> ptr ) ;
var identifier <CAM> token = traceur . syntax . identifier <CAM> token ; var identifier <CAM> expression:==:traceur . syntax . trees . identifier <CAM> expression ;
var b = Test . another <CAM> way . _ g <UND> record <UND> border [ i ] ; var p:==:positions [ i ] ;
var height = node . get <CAM> attribute ( ' height ' ) ; var width:==:node . get <CAM> attribute ( ' width ' ) ;
var babel   = require ( ' gulp - babel ' ) ; var bump:==:require ( ' gulp - bump ' ) ;
var height = props . height ; var row <CAM> count:==:props . row <CAM> count ;
var cell <CAM> range <CAM> renderer = props . cell <CAM> range <CAM> renderer ; var cell <CAM> style:==:props . cell <CAM> style ;
var text <CAM> input = require ( ' text <CAM> input ' ) ; var View:==:require ( ' View ' ) ;
var host = keystone . get ( ' host ' ) ; var port:==:keystone . get ( ' port ' ) ;
var Given = exports . Given = define <CAM> step ; var When:==:exports . When    define <CAM> step ;
var _ an = 13 ; values [ _ an ] = _ an ; var _ ao:==:14 ; values [ _ ao ]    _ ao ;
var create <CAM> member <CAM> expression = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> member <CAM> expression ; var create <CAM> number <CAM> literal:==:traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> number <CAM> literal ;
var M = Math . max ( r , g , b ) ; var m:==:Math . min ( r , g , b ) ;
var handle <CAM> button = function handle <CAM> button ( event , params , modal ) var e:==:event  |  |  window . event ;
var y0 = this . y0 ; var x0:==:this . x0 ;
var method = req . methodvar url:==:req . url
var photo = vcard . c ( ' photo ' ) ; var avatar:==:core . avatars . get ( user . i d ) ;
var predefined <CAM> name = traceur . syntax . predefined <CAM> name ; var parse <CAM> tree <CAM> factory:==:traceur . codegeneration . parse <CAM> tree <CAM> factory ;
var Map   = require ( ' immutable ' ) . Map ; var List:==:require ( ' immutable ' ) . List ;
var jshint = require ( ' gulp - jshint ' ) ; var nodeunit:==:require ( ' gulp - nodeunit ' ) ;
var type = operation . type ; var key:==:operation . key ;
var osenv = require ( ' osenv ' ) var rimraf:==:require ( ' rimraf ' )
var native <CAM> methods <CAM> mixin = require ( ' native <CAM> methods <CAM> mixin ' ) ; var React:==:require ( ' React ' ) ;
var mcc = current <CAM> data <CAM> icc . icc <CAM> info . mcc ; var mnc:==:current <CAM> data <CAM> icc . icc <CAM> info . mnc ;
var to = moment . utc ( daterange . to ) ; var from:==:moment . utc ( daterange . from ) ;
var pixel <CAM> converter = js <CAM> common . pixel <CAM> converter ; var selection <CAM> id:==:powerbi . visuals . selection <CAM> id ;
var bcrypt = require ( ' bcryptjs ' ) ; var moment:==:require ( ' moment ' ) ;
var create <CAM> assignment <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> expression ; var create <CAM> binary <CAM> operator:==:parse <CAM> tree <CAM> factory . create <CAM> binary <CAM> operator ;
var ITEMS = exports . ITEMS = [ _ row <CAM> above . KEY , _ row <CAM> below . KEY , _ column <CAM> left . KEY , _ column <CAM> right . KEY , _ clear <CAM> column . KEY , _ remove <CAM> row . KEY , _ remove <CAM> column . KEY , _ undo . KEY , _ redo . KEY , _ read <CAM> only . KEY , _ alignment . KEY , _ separator . KEY ] ; var _ predefined <CAM> items:==:( _ predefined <CAM> items2    , _ define <CAM> property ( _ predefined <CAM> items2 , _ separator . KEY , _ separator2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ row <CAM> above . KEY , _ row <CAM> above2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ row <CAM> below . KEY , _ row <CAM> below2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ column <CAM> left . KEY , _ column <CAM> left2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ column <CAM> right . KEY , _ column <CAM> right2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ clear <CAM> column . KEY , _ clear <CAM> column2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ remove <CAM> row . KEY , _ remove <CAM> row2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ remove <CAM> column . KEY , _ remove <CAM> column2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ undo . KEY , _ undo2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ redo . KEY , _ redo2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ read <CAM> only . KEY , _ read <CAM> only2 . default ) , _ define <CAM> property ( _ predefined <CAM> items2 , _ alignment . KEY , _ alignment2 . default ) , _ predefined <CAM> items2 ) ;
var animation <CAM> model = symbol <CAM> meta . animation <CAM> model ; var data <CAM> index:==:symbol <CAM> meta . data <CAM> index ;
var async = require ( ' async ' ) ; var multiline:==:require ( ' multiline ' ) ;
var force = _ ref10$force = = = undefined ? false : _ ref10$force ; var value:==:_ ref10 . value ;
var data <CAM> service <CAM> version = context . data <CAM> service <CAM> version  |  |  ' 1 . 0 ' ; var use <CAM> json <CAM> light:==:defined ( context . use <CAM> json <CAM> light , handler . use <CAM> json <CAM> light ) ;
var margin <CAM> left = options . margin <CAM> left ; var margin <CAM> right:==:options . margin <CAM> right ;
var c = reject <CAM> built <CAM> in <CAM> soon ( ' rejected - c ' , 10 ) ; var d:==:create <CAM> throwing <CAM> thenable ( ' rejected - d ' ) ;
var null <CAM> tree = traceur . syntax . trees . null <CAM> tree ; var parse <CAM> tree:==:traceur . syntax . trees . parse <CAM> tree ;
var extent = ol . extent . bounding <CAM> extent ( coordinates ) ; var geometry:==:opt <UND> geometry  |  |  new ol . geom . Polygon ( null ) ;
var pool = require ( ' typedarray - pool ' ) var ops:==:require ( ' ndarray - ops ' )
var gl = this . _ gl ; var program:==:this . _ program ;
var container <CAM> size = _ ref6 . container <CAM> size ; var offset:==:_ ref6 . offset ;
var i d = material . i d ; var shader:==:shaders [ i d ] ;
var CHECK = 27 ; var LENGTH:==:28 ;
var compression = require ( ' compression ' ) ; var connect:==:require ( ' connect ' ) ;
var keywords = parser <CAM> config . keywords  |  |  ; var builtin:==:parser <CAM> config . builtin  |  |  ;
var message = error . message ; var count:==:( counts [ message ]  |  |  0 ) + 1 ;
var axis <CAM> model = this . axis <CAM> model ; var name:==:retrieve ( opt . axis <CAM> name , axis <CAM> model . get ( ' name ' ) ) ;
var readonly = options . readonly ; var wrapper:==:that . wrapper ;
var viewport = options . viewport ; var model:==:this . model    this . converter ( options . data <CAM> views [ 0 ] , viewport ) ;
var Plugin = imports . Plugin ; var editors:==:imports . editors ;
var dispatch <CAM> custom <CAM> event = function dispatch <CAM> custom <CAM> event ( event <CAM> name ) var event:==:new custom <CAM> event ( event <CAM> name ) ;
var x = particle . x ; var y:==:particle . y ;
var radius = ( data . radius ! = = undefined ) ? data . radius : 0 . 5 ; var height:==:( data . height !    undefined ) ? data . height : 1 ;
var cm    = this . cm ; var settings:==:_ this . settings ;
var start = this . new <CAM> block ( ' list gen start ' ) ; var skip:==:this . new <CAM> block ( ' list gen skip ' ) ;
var x = ( geo . relative ) ? geo . offset . x : geo . x ; var y:==:( geo . relative ) ? geo . offset . y : geo . y ;
var webpack = require ( ' webpack ' ) ; var cwd:==:process . cwd ( ) ;
var i d = f . i d  |  |  f . hashvar tx <CAM> hex:==:f . hex  |  |  f . tx <CAM> hex
var known <CAM> library <CAM> id = Windows . Storage . known <CAM> library <CAM> id ; var Media:==:Windows . Media ;
var email = $ ( ' # email ' ) ; var username:==:$ ( ' # username ' ) ;
var expression = this . transform <CAM> any ( tree . expression ) ; var statements:==:this . transform <CAM> list ( tree . statements ) ;
var i = nodes . length , node , class <CAM> list , ci , class <CAM> name , class <CAM> value ; var valid <CAM> classes:==:schema . get <CAM> valid <CAM> classes ( ) , valid <CAM> classes <CAM> map , valid ;
var Page = Facade . Page ; var Track:==:Facade . Track ;
var r = ( command . debug <CAM> overlapping <CAM> frustums & ( 1 < < 0 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ; var g:==:( command . debug <CAM> overlapping <CAM> frustums & ( 1 < < 1 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ;
var path = scope . path ; var root <CAM> document:==:scope . root <CAM> document ;
var axis = joint . axis ; var transforms:==:joint <CAM> data . transforms ;
var html <CAM> element = scope . wrappers . html <CAM> element ; var get <CAM> innerhtml:==:scope . get <CAM> innerhtml ;
var assert = require ( ' chai ' ) . assert ; var mkdirp:==:require ( ' mkdirp ' ) ;
var node = unwrap ( node <CAM> wrapper ) ; var parent <CAM> node:==:node . parent <CAM> node ;
var indent <CAM> unit = config . indent <CAM> unit ; var multiline <CAM> tag <CAM> indent <CAM> factor:==:parser <CAM> config . multiline <CAM> tag <CAM> indent <CAM> factor  |  |  1 ;
var api = scope . api . instance . events ; var DELEGATES:==:api . DELEGATES ;
var name = this . namespace ; var use <CAM> colors:==:this . use <CAM> colors ;
var path = require ( ' path ' ) var zlib:==:require ( ' zlib ' )
var describe = test . describe ; var it:==:test . it ;
var orderby = options . orderby  |  |  ' name ' ; var order:==:options . order  |  |  1 ;
var Nil = mod . Nil ; var sb <CAM> tree:==:mod . sb <CAM> tree ;
var x = this . x , y = this . y ; var sq:==:pos . squared <CAM> norm ( ) ;
var width = svg <CAM> info . width ; var height:==:svg <CAM> info . height ;
var app = this . app ; var speed:==:this . speed ;
var is <CAM> line <CAM> terminator = json5 ? Uni . is <CAM> line <CAM> terminator : Uni . is <CAM> line <CAM> terminatorjso <CAM> nvar is <CAM> white <CAM> space:==:json5 ? Uni . is <CAM> white <CAM> space   : Uni . is <CAM> white <CAM> spacejson
var leave <CAM> class = data . leave <CAM> class ; var leave <CAM> active <CAM> class:==:data . leave <CAM> active <CAM> class ;
var func = this . func ( ) ; var receiver:==:this . receiver ( ) ;
var x <CAM> axis <CAM> title = line <CAM> dot <CAM> chart . default <CAM> settings . x <CAM> axis <CAM> title ; var y <CAM> axis <CAM> title:==:line <CAM> dot <CAM> chart . default <CAM> settings . y <CAM> axis <CAM> title ;
var se = w2utils . settings ; var re:==:new reg <CAM> exp ( ' ^'+ ( se . currency <CAM> prefix ? ' \\ ' + se . currency <CAM> prefix + ' ? ' : '' ) +
var edit = evt . get <CAM> property ( ' edit ' ) ; var changes:==:edit . changes ;
var ui <CAM> manager = require ( ' ui <CAM> manager ' ) ; var deep <CAM> freeze <CAM> and <CAM> throw <CAM> on <CAM> mutation <CAM> in <CAM> dev:==:require ( ' deep <CAM> freeze <CAM> and <CAM> throw <CAM> on <CAM> mutation <CAM> in <CAM> dev ' ) ;
var filename = suspension . filename ; var lineno:==:suspension . lineno ;
var y <CAM> axis <CAM> position = powerbi . visuals . y <CAM> axis <CAM> position ; var append <CAM> clear <CAM> catcher:==:powerbi . visuals . append <CAM> clear <CAM> catcher ;
var aspect <CAM> ratio = canvas . aspect <CAM> ratio ; var crop <CAM> box:==:self . crop <CAM> box ;
var width = block . width ; var height:==:block . height ;
var heading = query <CAM> numeric <CAM> value ( node , ' heading ' , namespaces . kml ) ; var color:==:query <CAM> color <CAM> value ( node , ' color ' , namespaces . kml ) ;
var inherits = utils . inherits ; var debug:==:require ( ' debug ' ) ( ' mocha : runner ' ) ;
var datastore <CAM> class = dojo . get <CAM> object ( datastore <CAM> class <CAM> name ) ; var test <CAM> templates:==:tests . data . read <CAM> only <CAM> item <CAM> file <CAM> test <CAM> templates . test <CAM> templates ;
var component = components . get ( utils . get <CAM> parent <CAM> component ( ) ) ; var used <CAM> prop <CAM> types:==:( component & & component . used <CAM> prop <CAM> types  |  |  [ ] ) . slice ( ) ;
var COVER <UND> INITIALIZED <UND> NAME = ' COVER <UND> INITIALIZED <UND> NAME ' ; var DEBUGGER <UND> STATEMENT:==:' DEBUGGER <UND> STATEMENT ' ;
var height = props . height ; var width:==:props . width ;
var y = vertex <CAM> node . get <CAM> attribute ( ' y ' ) ; var z:==:vertex <CAM> node . get <CAM> attribute ( ' z ' ) ;
var Dimensions = require ( ' Dimensions ' ) ; var frame <CAM> rate <CAM> logger:==:require ( ' frame <CAM> rate <CAM> logger ' ) ;
var header = this . header = new <CAM> records . header ; var body:==:this . body    new <CAM> records . body ;
var ctx = this . _ chart . ctx ; var point <CAM> style:==:vm . point <CAM> style ;
var parameter <CAM> map = kendo . data . transports [ ' odata ' ] . parameter <CAM> map ; var data <CAM> source:==:kendo . data . data <CAM> source ;
var text <CAM> divs = this . _ text <CAM> divs ; var viewport:==:this . _ viewport ;
var _ ik = 138 ; values [ _ ik ] = _ ik ; var _ il:==:139 ; values [ _ il ]    _ il ;
var source <CAM> link = source <CAM> links . last <CAM> element <CAM> child ; var href:==:source <CAM> link . get <CAM> attribute ( ' href ' ) ;
var surface = effect . profile . surfaces [ sampler . source ] ; var texture:==:texture <CAM> loader . load ( get <CAM> image ( surface . init <UND> from ) ) ;
var prev = entry . prev ; var next:==:entry . next ;
var m = adapter [ ' transform : get ' ] ( node , true ) . set ( 1,0,0,1,0,0 ) ; var filter:==:node . filters [ ident ] ;
var o = rows [ i ] ; var l:==:o . length ;
var timeout = ref . timeout ; var prop <CAM> count:==:ref . prop <CAM> count ;
var ops = require ( ' ndarray - ops ' ) var pack:==:require ( ' ndarray - pack ' )
var feature = features [ f ] ; var geometry:==:feature . geometry ;
var V = parse <CAM> int ( Dt . formats . V ( d ) , 10 ) ; var W:==:parse <CAM> int ( Dt . formats . W ( d ) , 10 ) ;
var date = moment ( data . date  |  |  Date . now ( ) ) ; var keys:==:Object . keys ( data ) ;
var models = _ _ alloy <CAM> id26 . models ; var len:==:models . length ;
var events = require ( ' events ' ) ; var event:==:new events . event <CAM> emitter ( ) ;
var granularity = ellipse <CAM> geometry . _ granularity ; var ellipsoid:==:ellipse <CAM> geometry . _ ellipsoid ;
var payload <CAM> too <CAM> large <CAM> error = errors . payload <CAM> too <CAM> large <CAM> error ; var unsupported <CAM> media <CAM> type <CAM> error:==:errors . unsupported <CAM> media <CAM> type <CAM> error ;
var settings = this . settings = this . data . slicer <CAM> settings ; var dom <CAM> helper:==:this . dom <CAM> helper ;
var data <CAM> box = plot . data <CAM> boxvar screen <CAM> box:==:plot . screen <CAM> box
var basename = require ( ' path ' ) . basename ; var Stream:==:require ( ' stream ' ) . Stream ;
var map = mapXML . document <CAM> element ; var version:==:map . get <CAM> attribute ( ' version ' ) ;
var TRANSLUCENCY <UND> BY <UND> DISTANCE <UND> INDEX = Billboard . TRANSLUCENCY <UND> BY <UND> DISTANCE <UND> INDEX = 12 ; var PIXEL <UND> OFFSET <UND> SCALE <UND> BY <UND> DISTANCE <UND> INDEX:==:Billboard . PIXEL <UND> OFFSET <UND> SCALE <UND> BY <UND> DISTANCE <UND> INDEX    13 ;
var vertex <CAM> position <CAM> buffer = this . _ vertex <CAM> position <CAM> buffer ; var uv <CAM> position <CAM> buffer:==:this . _ uv <CAM> position <CAM> buffer ;
var count <CAM> by = create <CAM> iterator ( base <CAM> iterator <CAM> options , count <CAM> by <CAM> iterator <CAM> options ) ; var every:==:create <CAM> iterator ( base <CAM> iterator <CAM> options , every <CAM> iterator <CAM> options ) ;
var texture = cc . texture <CAM> cache . add <CAM> image ( file <CAM> name ) ; var rect:==:cc . rect ( 0 , 0 , 0 , 0 ) ;
var posts = json . posts ; var pages:==:json . pages ;
var unit <CAM> name = config . unit <CAM> name ; var unit <CAM> to <CAM> satoshi:==:config . unit <CAM> to <CAM> satoshi ;
var silhouette <CAM> programs = model . _ renderer <CAM> resources . silhouette <CAM> programs ; var scene3d <CAM> only:==:frame <CAM> state . scene3d <CAM> only ;
var reply <UND> id = req . params . reply <UND> id ; var content:==:req . body . t <UND> content ;
var first <CAM> edge <CAM> indexes = this . _ first <CAM> edge <CAM> indexes ; var containment <CAM> edges:==:this . containment <CAM> edges ;
var q = $ q . defer ( ) ; var prompt:==:app <CAM> rate . prompt <CAM> for <CAM> rating ( immediate ) ;
var g = convertRGB ( this . g ) ; var b:==:convertRGB ( this . b ) ;
var path = file . params . path ; var extname:==:path <CAM> fn . extname ( path ) ;
var minimum <CAM> heights = wall <CAM> geometry . _ minimum <CAM> heights ; var maximum <CAM> heights:==:wall <CAM> geometry . _ maximum <CAM> heights ;
var inherit = _ dereq _ ( ' component - inherit ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' engine . io - client : polling - xhr ' ) ;
var style = this . style ; var vml <CAM> el:==:this . _ vml <CAM> el ;
var width = options . viewport . width - ( margin . left + margin . right ) ; var height:==:options . viewport . height ;
var ui = kendo . ui ; var Widget:==:ui . Widget ;
var s = ( c . page * c . size ) ; var e:==:( s + c . size ) ;
var parse <CAM> tree <CAM> type = traceur . syntax . trees . parse <CAM> tree <CAM> type ; var predefined <CAM> name:==:traceur . syntax . predefined <CAM> name ;
var index = this . last <CAM> marker . index ; var line:==:this . scanner . line <CAM> number ;
var missingpdf <CAM> exception = shared <CAM> util . missingpdf <CAM> exception ; var unexpected <CAM> response <CAM> exception:==:shared <CAM> util . unexpected <CAM> response <CAM> exception ;
var data = this . data <CAM> source . flat <CAM> view ( ) ; var options <CAM> map:==:this . _ options <CAM> map ;
var msg = error . err  |  |  error . errmsg  |  |  error . err <CAM> message  |  |  error ; var e:==:mongo <CAM> error . create ( message : msg , driver : true ) ;
var group <CAM> id = group <CAM> ids [ i ] ; var group:==:this . groups [ group <CAM> id ] ;
var type = $ ( this ) . data ( ' type ' ) var func:==:$ ( this ) . data ( ' function ' )
var negative = intersect <CAM> cache . negative ; var positive:==:intersect <CAM> cache . positive ;
var replace = require ( ' gulp - replace ' ) ; var octophant:==:require ( ' octophant ' ) ;
var source <CAM> el = this . source <CAM> el ; var target <CAM> el:==:this . target <CAM> el ;
var store = new datastore ( tests . data . read <CAM> only <CAM> item <CAM> file <CAM> test <CAM> templates . get <CAM> test <CAM> data ( ' countries <UND> withBoolean ' ) ) ; var d:==:new doh . Deferred ( ) ;
var c = function ( node , st , override ) var type:==:override  |  |  node . type ;
var altitude = e . coords . altitude ; var heading:==:e . coords . heading ;
var _ qp = 271 ; values [ _ qp ] = _ qp ; var _ ra:==:272 ; values [ _ ra ]    _ ra ;
var event = track . event ( ) ; var properties:==:track . properties ( ) ;
var options = context . options [ 0 ] ; var allow <CAM> loop:==:Boolean ( options & & options . allow <CAM> loop ) ;
var multi <CAM> polygon <CAM> intersects <CAM> multi <CAM> polygon = intersection . multi <CAM> polygon <CAM> intersects <CAM> multi <CAM> polygon ; var multi <CAM> polygon <CAM> intersects <CAM> buffered <CAM> multi <CAM> line:==:intersection . multi <CAM> polygon <CAM> intersects <CAM> buffered <CAM> multi <CAM> line ;
var ical <CAM> component = event <CAM> details . ical <CAM> component ; var event:==:event <CAM> details . event ;
var moment = require ( ' moment ' ) ; var url:==:require ( ' url ' ) ;
var hashish = require ( ' hashish ' ) ; var assert:==:require ( ' assert ' ) ;
var y = data <CAM> point [ this . _ y <CAM> field ] ; var radi:==:this . _ radi ;
var token <CAM> type = traceur . syntax . token <CAM> type ; var argument <CAM> list:==:traceur . syntax . trees . argument <CAM> list ;
var y = ( data . y!=undefined ) ? data . y : nullvar fixed:==:( data . fixed ) ? 1 : 0
var CONST = $ . fn . utilities . CONST ; var COMMA <UND> KEYCODE:==:CONST . COMMA <UND> KEYCODE ;
var impulse = this . impulse ; var J:==:this . J ;
var is <CAM> loading = this . state . is <CAM> loading ; var input <CAM> value:==:this . input <CAM> value ( ) ;
var Surface = react <CAM> canvas . Surface ; var Group:==:react <CAM> canvas . Group ;
var ownerID = _ tree <CAM> snapshot$instanc2 . ownerID ; var owner:==:tree <CAM> snapshot [ ownerID ] ;
var n = readmp <CAM> int ( der , ' modulus ' ) ; var e:==:readmp <CAM> int ( der , ' exponent ' ) ;
var operation <CAM> id = details . aux <CAM> data [ ' operation <CAM> id ' ] ; var operation:==:this . sidebar <CAM> panes . async <CAM> operation <CAM> breakpoints . operation <CAM> by <CAM> id ( details . target ( ) , operation <CAM> id ) ;
var . . . x = z ; var . . . a:==:a : 1 ;
var path = require ( ' path ' ) ; var child <UND> process:==:require ( ' child <UND> process ' ) ;
var icc <CAM> id = event . target . get <CAM> attribute ( ' stk - menu - item - icc <CAM> id ' ) ; var identifier:==:event . target . get <CAM> attribute ( ' stk - menu - item - identifier ' ) ;
var casper = require ( ' casper ' ) . create ( ) ; var baz:==:require ( ' baz ' ) ;
var b = new block <CAM> node ( [ node : new symbol <CAM> node ( ' x ' ) , node : new constant <CAM> node ( 2 ) ] ) ; var c:==:new block <CAM> node ( [ node : new symbol <CAM> node ( ' x ' ) , node : new constant <CAM> node ( 4 ) ] ) ;
var export <CAM> specifier = traceur . syntax . trees . export <CAM> specifier ; var export <CAM> specifier <CAM> set:==:traceur . syntax . trees . export <CAM> specifier <CAM> set ;
var promise = $ modal . $ promise = $ bs <CAM> compiler . compile ( options ) ; var scope:==:$ modal . $ scope    options . scope & & options . scope . $ new ( )  |  |  $ root <CAM> scope . $ new ( ) ;
var o = observer ( ) ; var uses <CAM> oplog:==:o . handle . _ multiplexer . _ observe <CAM> driver . _ uses <CAM> oplog ;
var debug = require ( ' debug ' ) ( ' socket . io - client : socket ' ) ; var parseqs:==:require ( ' parseqs ' ) ;
var mime = require ( ' mime - types ' ) ; var asynckit:==:require ( ' asynckit ' ) ;
var WRONG <UND> DOCUMENT <UND> ERR    = exception <CAM> code . WRONG <UND> DOCUMENT <UND> ERR    = ( ( exception <CAM> message [ 4 ] = ' Wrong document ' ) , 4 ) ; var INVALID <UND> CHARACTER <UND> ERR:==:exception <CAM> code . INVALID <UND> CHARACTER <UND> ERR     ( ( exception <CAM> message [ 5 ]   ' Invalid character ' ) , 5 ) ;
var FALSE1 = C . FALSE1 = 0x31 ; var FALSE2:==:C . FALSE2    0x32 ;
var Buffer = require ( ' buffer ' ) . Buffer ; var timers:==:require ( ' timers ' ) ;
var alt = ! ! mods . alt ; var shift:==:! ! mods . shift ;
var view <CAM> style = [ styles . view , this . state . view <CAM> style ] ; var text <CAM> layout:==:this . state . text <CAM> layout  |  |  width : ' ? ' , height : ' ? ' ;
var bgnodes = DOM . get <CAM> node <CAM> array ( options . bgnodes ) ; var stylenodes:==:DOM . get <CAM> node <CAM> array ( options . stylenodes ) ;
var antialias = options . antialias ; var preserve <CAM> buffer:==:options . preserve <CAM> buffer ;
var fs = imports . fs ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var mangled <CAM> global <CAM> names = init . mangled <CAM> global <CAM> names ; var has <CAM> own <CAM> property:==:Object . prototype . has <CAM> own <CAM> property ;
var width = $ ( ' . fc - view - container ' ) . width ( ) ; var height:==:$ ( ' . fc - view - container ' ) . height ( ) ;
var alert = imports [ ' dialog . alert ' ] . show ; var upgrade:==:imports . upgrade ;
var url = networkui <CAM> source <CAM> code . url ; var path:==:ui <CAM> source <CAM> code . path ( ) ;
var symbol <CAM> node = math . expression . node . symbol <CAM> node ; var accessor <CAM> node:==:math . expression . node . accessor <CAM> node ;
var notify   = require ( ' gulp - notify ' ) ; var livereload:==:require ( ' gulp - livereload ' ) ;
var log4js = require ( ' log4js ' ) ; var async:==:require ( ' async ' ) ;
var operation = req . service . api . operations [ req . operation ] ; var http <CAM> request:==:req . http <CAM> request ;
var o <CAM> classes = o <CAM> settings . o <CAM> classes ; var an:==:o <CAM> settings . aan <CAM> features . p ;
var fmode = typeof opts . fmode = = = ' number ' ? opts . fmode : 0var strict:==:opts . strict !    false
var index = this . index ; var attributes:==:this . attributes ;
var subarg = require ( ' subarg ' ) ; var glob:==:require ( ' glob ' ) ;
var normalized = this . normalized <CAM> coords ; var gvar:==:this . font . gvar ;
var Types = keystone . Field . Types ; var Code:==:new keystone . List ( ' Code ' ,
var label = _ ref . label ; var sort <CAM> by:==:_ ref . sort <CAM> by ;
var ui = imports . ui ; var vfs:==:imports . vfs ;
var bodies = this . bodies ; var constraints:==:this . constraints ;
var async = require ( ' async ' ) ; var request:==:require ( ' request ' ) ;
var TIME = 3 ; var OS:==:4 ;
var template = document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' template ' ) [ 0 ] . innerHTML ; var section:==:document . create <CAM> element ( ' section ' ) ;
var n = znear ; var f:==:zfar ;
var Animated = require ( ' Animated ' ) ; var resolve <CAM> asset <CAM> source:==:require ( ' resolve <CAM> asset <CAM> source ' ) ;
var scroll <CAM> to <CAM> cell = _ props . scroll <CAM> to <CAM> cell ; var scroll <CAM> top:==:_ props . scroll <CAM> top ;
var style = flatten <CAM> style ( this . props . style )  |  |  ; var margin:==:resolve <CAM> box <CAM> style ( ' margin ' , style ) ;
var options = this . options ; var app:==:this . app ;
var uuid = require ( ' hap - nodejs ' ) . uuid ; var Accessory:==:require ( ' hap - nodejs ' ) . Accessory ;
var ecurve = require ( ' ecurve ' ) var curve:==:ecurve . get <CAM> curve <CAM> by <CAM> name ( ' secp256k1 ' )
var gl    = plot . glvar view <CAM> box:==:plot . view <CAM> box
var width = graphics <CAM> device . width ; var height:==:graphics <CAM> device . height ;
var root = _ ref . root ; var on <CAM> change:==:_ ref . on <CAM> change ;
var win <CAM> ansi <CAM> encoding = core <CAM> encodings . win <CAM> ansi <CAM> encoding ; var standard <CAM> encoding:==:core <CAM> encodings . standard <CAM> encoding ;
var minY = this . minY ; var maxX:==:this . maxX ;
var packet <CAM> writer = common . packet <CAM> writer ; var Parser:==:common . Parser ;
var c = ; c . v = c ; var d:==:; d . v    d ;
var slugize = util . slugize ; var escape <CAM> reg <CAM> exp:==:util . escape <CAM> reg <CAM> exp ;
var n4 = new red <CAM> node ( i d : ' n4',type : ' abc ' ) ; var n5:==:new red <CAM> node ( i d : ' n5',type : ' abc ' ) ;
var pixel <CAM> size = point <CAM> primitive . pixel <CAM> size ; var outline <CAM> width:==:point <CAM> primitive . outline <CAM> width ;
var beta = is <CAM> beta <CAM> valid ? parse <CAM> float ( beta <CAM> string ) : -1 ; var gamma:==:is <CAM> gamma <CAM> valid ? parse <CAM> float ( gamma <CAM> string ) : -1 ;
var constantinople = require ( ' constantinople ' ) ; var stringify:==:require ( ' js - stringify ' ) ;
var client = helper . client ( ) ; var query:==:client . query (
var height = image . height ; var x:==:Math . round ( uv . x * width ) % width ;
var code <CAM> length = lzw <CAM> state . code <CAM> length ; var prev <CAM> code:==:lzw <CAM> state . prev <CAM> code ;
var apf = imports . apf ; var Menu:==:imports . Menu ;
var beta = grunt . option ( ' beta ' )  |  |  false ; var alpha:==:grunt . option ( ' alpha ' )  |  |  false ;
var scrollX = this . _ mc . scrollX ; var scrollY:==:this . _ mc . scrollY ;
var text = element . text <CAM> content ; var ranges:==:ranges <CAM> for <CAM> match ( text , query ) ;
var view <CAM> matrix = camera . view <CAM> matrix ; var position:==:camera . position ;
var subtitle <CAM> style = _ props . subtitle <CAM> style ; var title:==:_ props . title ;
var _ fg = 86 ; values [ _ fg ] = _ fg ; var _ fh:==:87 ; values [ _ fh ]    _ fh ;
var path = require ( ' path ' ) ; var vm:==:require ( ' vm ' ) ;
var intro = this . get <CAM> html <CAM> renderer ( ' intro ' , row <CAM> type ) ( row  |  |  0 ) ; var outro:==:this . get <CAM> html <CAM> renderer ( ' outro ' , row <CAM> type ) ( row  |  |  0 ) ;
var parse <CAM> tree <CAM> factory = traceur . codegeneration . parse <CAM> tree <CAM> factory ; var binary <CAM> operator:==:traceur . syntax . trees . binary <CAM> operator ;
var condition = this . transform <CAM> any ( tree . condition ) ; var body:==:this . transform <CAM> to <CAM> block <CAM> or <CAM> statement ( tree . body ) ;
var positions = corridor <CAM> outline <CAM> geometry . _ positions ; var height:==:corridor <CAM> outline <CAM> geometry . _ height ;
var canvas = document . create <CAM> element ( ' canvas ' ) ; var width:==:parse <CAM> float ( node . get <CAM> attribute ( ' width ' ) ) ,
var finally <CAM> state = traceur . codegeneration . generator . finally <CAM> state ; var for <CAM> in <CAM> transform <CAM> pass:==:traceur . codegeneration . generator . for <CAM> in <CAM> transform <CAM> pass ;
var output = operation . output ; var payload:==:output . payload ;
var IMPORT <UND> TYPE <UND> CLAUSE = ' IMPORT <UND> TYPE <UND> CLAUSE ' ; var IMPORTED <UND> BINDING:==:' IMPORTED <UND> BINDING ' ;
var dl = this . _ dl  |  0var el:==:this . _ el  |  0
var cyan700 = exports . cyan700 = ' # 0097a7 ' ; var cyan800:==:exports . cyan800    ' # 00838f ' ;
var no <CAM> sleep = obj . no <CAM> sleep  |  |  false ; var p:==:obj . pos  |  |  [ 0 , 0 , 0 ] ;
var faces = this . faces ; var length:==:faces . length ;
var resize = config <CAM> node . get <CAM> attribute ( ' resize ' ) ; var border:==:Number ( config <CAM> node . get <CAM> attribute ( ' border ' )  |  |  0 ) ;
var update <UND> active = options . update <UND> active  |  |  typeof options . update <UND> active = = = ' undefined ' ; var close <UND> active:==:options . close <UND> active  |  |  typeof options . close <UND> active      ' undefined ' ;
var _ il = 139 ; values [ _ il ] = _ il ; var _ i m:==:140 ; values [ _ i m ]    _ i m ;
var text <CAM> measurement <CAM> service = powerbi . text <CAM> measurement <CAM> service ; var tooltip <CAM> manager:==:powerbi . visuals . tooltip <CAM> manager ;
var util = imports . util ; var ui:==:imports . ui ;
var compile = _ _ dependency4 _ _ . compile ; var precompile:==:_ _ dependency4 _ _ . precompile ;
var platform = opts . platform = = null ? ' fallback ' : opts . platformvar has <CAM> unicode:==:! ! opts . has <CAM> unicode
var commands = imports . commands ; var watcher:==:imports . watcher ;
var clone = require ( ' clone ' ) ; var fs:==:require ( ' co - fs - extra ' ) ;
var Person = db . model ( ' gh4928 ' , person <CAM> schema ) ; var Collection:==:db . model ( ' gh4928 <UND> 0 ' , collection <CAM> schema ) ;
var iterator = this . iterator ; var start:==:this . start ;
var longitude = lat <CAM> lon . longitude ; var latitude:==:lat <CAM> lon . latitude ;
var View = require ( ' View ' ) ; var Text:==:require ( ' Text ' ) ;
var session = doc . get <CAM> session ( ) . session ; var line:==:session . doc . $ lines [ range . end . row ] ;
var start = $ . full <CAM> calendar . format <CAM> date ( event . start , ' yyyy - MM - dd HH : mm : ss ' ) ; var end:==:$ . full <CAM> calendar . format <CAM> date ( event . end , ' yyyy - MM - dd HH : mm : ss ' ) ;
var f8 <CAM> colors = require ( ' f8 <CAM> colors ' ) ; var React:==:require ( ' React ' ) ;
var has <CAM> changed = function has <CAM> changed ( k ) return ! ( 0 , _ eq2 . default ) ( next <CAM> props [ k ] , _ this2 . props [ k ] ) ; ; var was <CAM> empty <CAM> before:==:function was <CAM> empty <CAM> before ( k ) return next <CAM> props [ k ] & & ( ! _ this2 . props [ k ]  |  |  ( 0 , _ is <CAM> empty2 . default ) ( _ this2 . props [ k ] ) ) ; ;
var rotation = rectangle <CAM> geometry . _ rotation ; var st <CAM> rotation:==:rectangle <CAM> geometry . _ st <CAM> rotation ;
var graph = ui . editor . graph ; var view:==:graph . view ;
var doc = ( document . document <CAM> element |  |  ) ; var H:==:window . inner <CAM> height  |  |  doc . client <CAM> height  |  |  doc . scroll <CAM> height  |  |  0 ;
var check <CAM> symlinks = options . check <CAM> symlinks ; var sandbox:==:options . sandbox ;
var cloud0 = cloud <CAM> layer . create ( 200 , 120 , ' cloud0 ' ) ; var cloud1:==:cloud <CAM> layer . create ( -60 , 120 , ' cloud1 ' ) ;
var http = require ( ' http ' ) var assert:==:require ( ' assert ' )
var source = trim ( dec <CAM> endpoint . source ) ; var target:==:trim ( dec <CAM> endpoint . target ) ;
var black <CAM> point = params . black <CAM> point ; var fill:==:params . fill ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var find <CAM> session <CAM> byuri:==:require ( ' find <CAM> session <CAM> byuri ' ) ;
var source <CAM> index = node . source <CAM> index ; var sub <CAM> index:==:node . sub <CAM> index ;
var begin = task <CAM> data . begin ; var end:==:task <CAM> data . end ;
var test <CAM> model = models . test <CAM> model ; var local <CAM> test <CAM> model:==:test <CAM> model . extend ( ' local <CAM> test <CAM> model ' , ,
var proxy = listener . proxy ; var capture:==:listener . capture ;
var element <CAM> array = group . element <CAM> array ; var layout <CAM> vertex <CAM> array:==:group . layout <CAM> vertex <CAM> array ;
var buffer = this . view . buffer ; var default <CAM> color:==:this . view . default <CAM> color ;
var out = command <CAM> line . out ; var dir:==:command <CAM> line . dir ;
var has = require ( ' has ' ) ; var once:==:require ( ' once ' ) ;
var Track = require ( ' facade ' ) . Track ; var defaults:==:require ( ' defaults ' ) ;
var width = polyline . width ; var follow <CAM> surface:==:polyline . follow <CAM> surface ;
var Tag = ctx . model ( ' Tag ' ) ; var i d:==:this . _ i d ;
var p = new path . Path ( ) ; var commands:==:this . path . commands ;
var expert <CAM> subset <CAM> charset = core <CAM> charsets . expert <CAM> subset <CAM> charset ; var font <CAM> renderer <CAM> factory:==:core <CAM> font <CAM> renderer . font <CAM> renderer <CAM> factory ;
var fs = require ( ' fs - extra ' ) ; var sass:==:require ( ' node - sass ' ) ;
var test <CAM> suite = goog . require ( ' goog . testing . test <CAM> suite ' ) ; var verification:==:goog . require ( ' goog . labs . mock . verification ' ) ;
var instances = this . instances ; var len:==:instances . length ;
var w = shape . get <CAM> attribute ( ' w ' ) ; var h:==:shape . get <CAM> attribute ( ' h ' ) ;
var round = data . round ; var i d:==:data . i d ;
var exec <CAM> sync = require ( ' child <UND> process ' ) . exec <CAM> sync ; var path:==:require ( ' path ' ) ;
var append <CAM> clear <CAM> catcher = powerbi . visuals . append <CAM> clear <CAM> catcher ; var create <CAM> interactivity <CAM> service:==:powerbi . visuals . create <CAM> interactivity <CAM> service ;
var browserify = require ( ' browserify ' ) ; var buffer:==:require ( ' vinyl - buffer ' ) ;
var view = view <CAM> container . views [ index ] ; var element <CAM> injector:==:context <CAM> view . element <CAM> injectors [ context <CAM> bound <CAM> element <CAM> index ] ;
var debug = utils . debug ; var is <CAM> valid <CAM> default <CAM> value:==:property <CAM> types . is <CAM> valid <CAM> default <CAM> value ;
var SAGA <UND> ACTION = sym ( ' SAGA <UND> ACTION ' ) ; var SELF <UND> CANCELLATION:==:sym ( ' SELF <UND> CANCELLATION ' ) ;
var math = ' math ' ; var text:==:' text ' ;
var delimiter = typeof options . delimiter = = = ' undefined ' ? defaults . delimiter : options . delimiter ; var strict <CAM> null <CAM> handling:==:typeof options . strict <CAM> null <CAM> handling      ' boolean ' ? options . strict <CAM> null <CAM> handling : defaults . strict <CAM> null <CAM> handling ;
var get <CAM> root <CAM> container = dom . get <CAM> root <CAM> container ; var crashy <CAM> text <CAM> nodes:==:api . features . crashy <CAM> text <CAM> nodes ;
var pooled <CAM> class = require ( ' pooled <CAM> class ' ) ; var two <CAM> argument <CAM> pooler:==:pooled <CAM> class . two <CAM> argument <CAM> pooler ;
var cx = circle . node . get <CAM> attribute ( ' cx ' ) ; var cy:==:circle . node . get <CAM> attribute ( ' cy ' ) ;
var fork <CAM> task = require ( ' relieve ' ) . tasks . fork <CAM> taskvar fork:==:require ( ' child <UND> process ' ) . fork
var dispatcher = scope . dispatcher ; var n:==:window . navigator ;
var editor = tab . editor . ace ; var session:==:( tab . document . get <CAM> session ( )  |  |  0 ) . session ;
var highlights <CAM> hue = params . highlights <CAM> hue ; var highlights <CAM> saturation:==:params . highlights <CAM> saturation ;
var hostname = argv . hostname  |  |  ' cdn . ampproject . org ' ; var hostname3p:==:argv . hostname3p  |  |  ' 3p . ampproject . net ' ;
var log = logger . create <CAM> logger ( ' log - db ' ) var sub:==:zmqutil . socket ( ' sub ' )
var label = this . o . labels [ pointer . uid ] ; var prc:==:pointer . value . prc ;
var React = require ( ' React ' ) ; var f8 <CAM> button:==:require ( ' f8 <CAM> button ' ) ;
var x = box . right + node . get <CAM> style ( ' space - left ' ) ; var y:==:box . cy ;
var Scope = scope <CAM> analyzer . Scope ; var Variable:==:scope <CAM> analyzer . Variable ;
var log = Math . log ; var LN10:==:Math . LN10 ;
var fs = require ( ' fs ' ) ; var pg:==:require ( ' pg ' ) ;
var parse = parse <CAM> functions [ column . type ] ; var name:==:column . name ;
var force <CAM> layout = series <CAM> model . force <CAM> layout ; var layout <CAM> animation:==:series <CAM> model . get ( ' force . layout <CAM> animation ' ) ;
var MIDLETTER = ci . MIDLETTER ; var MIDNUM:==:ci . MIDNUM ;
var watchify = require ( ' watchify ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var   LENLENS = 18 ; var   CODELENS:==:19 ;
var framebuffery <CAM> offset = default <CAM> value ( options . framebuffery <CAM> offset , 0 ) ; var width:==:default <CAM> value ( options . width , gl . drawing <CAM> buffer <CAM> width ) ;
var property = context . property ; var access <CAM> type:==:context . access <CAM> type ;
var q = quad <CAM> key ; var t:==:tile <CAM> info [ q ] ;
var ux = this . _ ux ; var uy:==:this . _ uy ;
var methods = everyauth . _ req . _ methodsvar getters:==:everyauth . _ req . _ getters ;
var view <CAM> prop <CAM> types = require ( ' view <CAM> prop <CAM> types ' ) ; var view <CAM> style <CAM> prop <CAM> types:==:require ( ' view <CAM> style <CAM> prop <CAM> types ' ) ;
var colspan = widget . colspan ; var rowspan:==:widget . rowspan ;
var node = this . _ node ; var children:==:node . _ children , loc <CAM> bake <CAM> sprite    this . _ bake <CAM> sprite ;
var original <CAM> event = event . original <CAM> event ; var action:==:this . action ;
var height = shape . height ; var radius:==:shape . radius ;
var react <CAM> fiber <CAM> reconciler = require ( ' react <CAM> fiber <CAM> reconciler ' ) ; var react <CAM> instance <CAM> map:==:require ( ' react <CAM> instance <CAM> map ' ) ;
var begin = match . begin ; var end:==:match . end ;
var bind = utils . bind ; var get <CAM> component <CAM> property:==:utils . entity . get <CAM> component <CAM> property ;
var height = text <CAM> rect . height + paddings [ 0 ] + paddings [ 2 ] ; var align:==:label <CAM> pos . align ;
var _ dk = 58 ; values [ _ dk ] = _ dk ; var _ dl:==:59 ; values [ _ dl ]    _ dl ;
var fs = require ( ' hexo - fs ' ) ; var util:==:require ( ' hexo - util ' ) ;
var blob <CAM> builder = window . blob <CAM> builder ; var URL:==:window . URL ;
var r = results [ i ] ; var ex:==:expected [ i ] ;
var react <CAM> empty <CAM> component = require ( ' react <CAM> empty <CAM> component ' ) ; var react <CAM> host <CAM> component:==:require ( ' react <CAM> host <CAM> component ' ) ;
var session = this . session ; var pos:==:this . $ pos ;
var ONEMIN = constants . ONEMIN ; var ONESEC:==:constants . ONESEC ;
var Transform = require ( ' stream ' ) . Transform  |  |  require ( ' readable - stream ' ) . Transformvar crypto:==:require ( ' crypto ' )
var url = require ( ' url ' ) ; var cson:==:require ( ' cson ' ) ;
var gltf = model . gltf ; var buffer <CAM> views:==:gltf . buffer <CAM> views ;
var materials = gltf . materials ; var meshes:==:gltf <CAM> node . meshes ;
var months   = w2utils . settings . fullmonths ; var days:==:w2utils . settings . fulldays ;
var el = this . $ element ; var body:==:el . query <CAM> selector ( ' gui - icon - view - body ' ) ;
var edges = option . edges  |  |  option . links ; var nodes:==:option . data  |  |  option . nodes ;
var get <CAM> event <CAM> key = require ( ' get <CAM> event <CAM> key ' ) ; var get <CAM> event <CAM> modifier <CAM> state:==:require ( ' get <CAM> event <CAM> modifier <CAM> state ' ) ;
var express = require ( ' express ' ) var path:==:require ( ' path ' )
var l = hints . length - 1 ; var n:==:Math . round ( Math . random ( ) * l ) ;
var Inject = make <CAM> param <CAM> decorator ( ' Inject ' , [ [ ' token ' , undefined ] ] ) ; var Optional:==:make <CAM> param <CAM> decorator ( ' Optional ' , [ ] ) ;
var target = tween . _ target ; var tweens:==:Tween . _ tweens ;
var edges = data . edges ; var edge:==:edges [ Math . floor ( Math . random ( ) * edges . length ) ] ;
var p = this . progress ( ) ; var from:==:new rgb <CAM> color ( p . from . value ) ;
var buffer <CAM> view = buffer <CAM> views [ accessor . buffer <CAM> view ] ; var buffer:==:buffers [ buffer <CAM> view . buffer ] ;
var video = instance . _ video ; var source <CAM> mp4:==:instance . _ source <CAM> mp4 ;
var message = event . data . message ; var pos:==:event . data . pos ;
var LABEL0 = ' LABEL0 ' ; var VALUE0:==:' VALUE0 ' ;
var perm = $ ( this ) . attr ( ' perm ' ) ; var note <CAM> or <CAM> notebook <CAM> id:==:$ ( this ) . attr ( ' note <CAM> or <CAM> notebook <CAM> id ' ) ;
var first = parse <CAM> int ( kernings [ i ] . get <CAM> attribute ( ' first ' ) , 10 ) ; var second:==:parse <CAM> int ( kernings [ i ] . get <CAM> attribute ( ' second ' ) , 10 ) ;
var audio = element . find ( ' audio ' ) , audio <UND> obj = audio [ 0 ] ; var controls:==:element . find ( ' . controls ' ) ;
var table = require ( ' markdown - table ' ) ; var repeat:==:require ( ' repeat - string ' ) ;
var key = Object . keys ( op ) [ 0 ] ; var force <CAM> server <CAM> object <CAM> id:==:typeof this . s . options . force <CAM> server <CAM> object <CAM> id     ' boolean '
var register <CAM> wrapper = scope . register <CAM> wrapper ; var define <CAM> wrap <CAM> getter:==:scope . define <CAM> wrap <CAM> getter ;
var dynCall <UND> dii = Module [ ' dynCall <UND> dii ' ] = asm [ ' dynCall <UND> dii ' ] ; var dynCall <UND> viidddddd:==:Module [ ' dynCall <UND> viidddddd ' ]    asm [ ' dynCall <UND> viidddddd ' ] ;
var _ drop <CAM> modal = _ _ webpack <UND> require _ _ ( 509 ) ; var _ drop <CAM> modal2 = _ interop <CAM> require <CAM> default ( _ drop <CAM> modal ) ; var _ react <CAM> file <CAM> download:==:_ _ webpack <UND> require _ _ ( 518 ) ; var _ react <CAM> file <CAM> download2    _ interop <CAM> require <CAM> default ( _ react <CAM> file <CAM> download ) ;
var n = + conf . n ; var key:==:conf . key ;
var ignore <CAM> case = _ props . ignore <CAM> case ; var on <CAM> input <CAM> change:==:_ props . on <CAM> input <CAM> change ;
var path = require ( ' path ' ) ; var autoprefixer:==:require ( ' autoprefixer - core ' ) ;
var _ ad = 3 ; values [ _ ad ] = _ ad ; var _ ae:==:4 ; values [ _ ae ]    _ ae ;
var session = $ . gestures . session ; var touches:==:touch . touches ;
var Timer = goog . require ( ' goog . Timer ' ) ; var promise:==:goog . require ( ' goog . labs . promise ' ) ;
var geometry = options . geometry ; var shadow <CAM> volume:==:options . shadow <CAM> volume ;
var utils = require ( ' keystone - utils ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : list : add <CAM> search <CAM> to <CAM> query ' ) ;
var previous <CAM> scroll <CAM> to <CAM> index = _ ref . previous <CAM> scroll <CAM> to <CAM> index ; var previous <CAM> size:==:_ ref . previous <CAM> size ;
var control <CAM> size = layout <CAM> info . control <CAM> size ; var rotation:==:layout <CAM> info . rotation ;
var SETS = unicode <CAM> data . SETS ; var OTHER:==:unicode <CAM> data . character <CAM> indices . OTHER ;
var lex <CAM> state = this . lex <CAM> state ; var intervening <CAM> whitespace:==:this . intervening <CAM> whitespace ;
var gulp = $ $ . help ( require ( ' gulp ' ) ) ; var lazypipe:==:require ( ' lazypipe ' ) ;
var buffer <CAM> view = runtime . gltf . buffer <CAM> views [ source . buffer <CAM> view ] ; var buffer:==:GLTF2 . gltf <CAM> utils . get <CAM> buffer <CAM> from <CAM> buffer <CAM> view ( runtime , buffer <CAM> view , 0 , buffer <CAM> view . byte <CAM> length , GLTF2 . e <CAM> component <CAM> type . UNSIGNED <UND> BYTE ) ;
var container = self . container ; var canvas:==:self . canvas ;
var node = node <CAM> stack . pop ( ) ; var text:==:node . text <CAM> content  |  |  node . inner <CAM> text ;
var group <CAM> key = item . group <CAM> key ; var group <CAM> item:==:group <CAM> items [ group <CAM> key ] ;
var r = process <CAM> feature ( data <CAM> source , parent , placemark , entity <CAM> collection , style <CAM> collection , source <CAM> uri , uri <CAM> resolver , promises , context ) ; var entity:==:r . entity ;
var uniforms = material . uniforms ; var defines:==:material . defines ;
var rotation = options . rotation  |  |  [ 0,0,0,1 ] var radius:==:options . radius  |  |  1 . 0
var edge <CAM> type <CAM> offset = this . _ edge <CAM> type <CAM> offset ; var node <CAM> count:==:this . node <CAM> count ;
var parser = require ( ' engine . io - parser ' ) ; var parseuri:==:require ( ' parseuri ' ) ;
var username = config . auth . username  |  |  '' ; var password:==:config . auth . password  |  |  '' ;
var light <CAM> greena700 = exports . light <CAM> greena700 = ' # 64dd17 ' ; var lime50:==:exports . lime50    ' # f9fbe7 ' ;
var has <CAM> own <CAM> property = . has <CAM> own <CAM> property ; var is <CAM> extensible:==:Object . is <CAM> extensible  |  |  function ( ) return true ; ;
var y = shape . cy ; var r:==:Math . max ( shape . r , 0 ) ;
var signed <CAM> xml = require ( ' xml - crypto ' ) . signed <CAM> xml ; var uuid:==:require ( ' uuid ' ) ;
var width = _ ref3 . width ; var x:==:_ ref3 . x ;
var font <CAM> stringify = _ _ webpack <UND> require _ _ ( 13 ) . font <CAM> stringify ; var pack:==:_ _ webpack <UND> require _ _ ( 13 ) . pack ;
var subscriber = state . subscriber ; var delay:==:state . delay ;
var insert <CAM> fragment <CAM> into <CAM> content <CAM> state = require ( ' insert <CAM> fragment <CAM> into <CAM> content <CAM> state ' ) ; var insert <CAM> text <CAM> into <CAM> content <CAM> state:==:require ( ' insert <CAM> text <CAM> into <CAM> content <CAM> state ' ) ;
var dom = ' dom ' ; var any:==:' any ' ;
var test = require ( ' tap ' ) . testvar spawn:==:require ( ' child <UND> process ' ) . spawn
var transparent = exports . transparent = ' rgba ( 0 , 0 , 0 , 0 ) ' ; var full <CAM> black:==:exports . full <CAM> black    ' rgba ( 0 , 0 , 0 , 1 ) ' ;
var date <CAM> time <CAM> unit = powerbi . date <CAM> time <CAM> unit ; var js <CAM> common:==:window . js <CAM> common ;
var frame <CAM> state = e . frame <CAM> state ; var extent:==:frame <CAM> state . extent ;
var raw = callsite . raw ; var len:==:raw . length > > > 0 ;
var _ ll = 187 ; values [ _ ll ] = _ ll ; var _ lm:==:188 ; values [ _ lm ]    _ lm ;
var bad <CAM> digest <CAM> error = errors . bad <CAM> digest <CAM> error ; var request <CAM> entity <CAM> too <CAM> large <CAM> error:==:errors . request <CAM> entity <CAM> too <CAM> large <CAM> error ;
var realpath = this . realpath = _ . is <CAM> absolute ( self . fullname ) & & _ . exists ( self . fullname ) ? _ ( self . fullname ) : _ . realpath <CAM> safe ( self . fullname ) ; var realpath <CAM> no <CAM> ext:==:this . realpath <CAM> no <CAM> ext    self . rest ;
var canvas = document . query <CAM> selector ( ' . canvas ' ) ; var script:==:document . query <CAM> selector ( ' . script ' ) ;
var ROTATION <UND> INDEX = Billboard . ROTATION <UND> INDEX = 9 ; var ALIGNED <UND> AXIS <UND> INDEX:==:Billboard . ALIGNED <UND> AXIS <UND> INDEX    10 ;
var d1 = _ add <CAM> div ( ' d1 ' ) , d2 = _ add <CAM> div ( ' d2 ' ) ; var c:==:_ js <CAM> plumb . connect ( source : d1 , target : d2 , css <CAM> class : ' CSS ' ) ;
var without = require ( ' lodash . without ' ) var async <CAM> map:==:require ( ' slide ' ) . async <CAM> map
var a = reject <CAM> soon ( ' rejected - a ' , 40 ) ; var b:==:reject <CAM> soon ( ' rejected - b ' , 30 ) ;
var planes = this . planes ; var matrix:==:object . matrix <CAM> world ;
var s = Math . sin ( angle ) ; var c:==:Math . cos ( angle ) ;
var commonmark = self . options . commonmark ; var gfm:==:self . options . gfm ;
var client <CAM> width = _ ref . client <CAM> width ; var scroll <CAM> height:==:_ ref . scroll <CAM> height ;
var show = calendar <CAM> model . get ( ' split <CAM> line . show ' ) ; var line <CAM> width:==:line <CAM> style <CAM> model . line <CAM> width ;
var n   = this . normal ; var p <CAM> diff:==:this . p <CAM> diff ;
var Properties = dom <CAM> property <CAM> config . Properties  |  |  ; var dom <CAM> attribute <CAM> names:==:dom <CAM> property <CAM> config . dom <CAM> attribute <CAM> names  |  |  ;
var svg = d3 . select ( offset <CAM> element ) . select ( ' svg ' ) ; var view <CAM> box:==:( svg . node ( ) ) ? svg . attr ( ' view <CAM> box ' ) : null ;
var model = me . _ model ; var start:==:me . _ start ;
var TWILIO <UND> ACCOUNT <UND> SID = process . env [ ' TWILIO <UND> ACCOUNT <UND> SID ' ] ; var TWILIO <UND> AUTH <UND> TOKEN:==:process . env [ ' TWILIO <UND> AUTH <UND> TOKEN ' ] ;
var MAX <UND> SAFE <UND> INTEGER = Number . MAX <UND> SAFE <UND> INTEGER  |  |  9007199254740991 ; var re:==:exports . re    [ ] ;
var post <CAM> script <CAM> parser = core <CAM> ps <CAM> parser . post <CAM> script <CAM> parser ; var pdf <CAM> function:==:( function pdf <CAM> function <CAM> closure ( )
var span = button . find <CAM> element ( ' span ' ) ; var class <CAM> name:==:span . get <CAM> attribute ( ' class <CAM> name ' ) ;
var display <CAM> password <CAM> checkbox = this . props . display <CAM> password <CAM> checkboxvar left <CAM> message <CAM> type:==:this . props . left <CAM> message <CAM> type
var React = require ( ' React ' ) ; var assign:==:require ( ' object - assign ' ) ;
var skirt <CAM> height = options . skirt <CAM> height ; var is <CAM> geographic:==:default <CAM> value ( options . is <CAM> geographic , true ) ;
var anchor = iframe <CAM> doc . get <CAM> element <CAM> by <CAM> id ( ' anchor1 ' ) ; var popup:==:document . get <CAM> element <CAM> by <CAM> id ( ' popup6 ' ) ;
var itm <CAM> sb <CAM> wrap = window . itm <CAM> sb <CAM> wrap ; var itm <CAM> sb <CAM> wrappm:==:window . itm <CAM> sb <CAM> wrappm ;
var distance <CAM> display <CAM> condition <CAM> property = this . _ geometry <CAM> updater . distance <CAM> display <CAM> condition <CAM> property ; var distance <CAM> display <CAM> condition:==:distance <CAM> display <CAM> condition <CAM> property . get <CAM> value ( time ) ;
var dx2 = Math . max ( parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy1 ' , this . dy1 ) ) + parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' arrow <CAM> head ' , this . arrow <CAM> head ) ) , Math . min ( bounds . width - parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx1 ' , this . dx1 ) ) , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx2 ' , this . dx2 ) ) ) ) ; var dy2:==:Math . max ( parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy1 ' , this . dy1 ) ) + parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' arrow <CAM> head ' , this . arrow <CAM> head ) ) , Math . min ( bounds . height - parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy1 ' , this . dy1 ) ) , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy2 ' , this . dy2 ) ) ) ) ;
var act <CAM> as <CAM> expander = _ props . act <CAM> as <CAM> expander ; var children:==:_ props . children ;
var path = require ( ' path ' ) ; var favicon:==:require ( ' static - favicon ' ) ;
var panel = jsbin . panels . panels [ panel <CAM> id ] ; var $ panel <CAM> button:==:$ panel <CAM> buttons . find ( ' a [ href$ ' ' + panel <CAM> id + ' ' ] ' ) ;
var states = technique . states ; var vertex <CAM> shader:==:BABYLON . Effect . shaders <CAM> store [ program . vertex <CAM> shader + ' vertex <CAM> shader ' ] ;
var enter <CAM> leave <CAM> event <CAM> plugin = require ( ' enter <CAM> leave <CAM> event <CAM> plugin ' ) ; var event <CAM> plugin <CAM> hub:==:require ( ' event <CAM> plugin <CAM> hub ' ) ;
var key = keys [ i ] ; var stat:==:this . stats _ . get ( key ) ;
var through = require ( ' through2 ' ) var stream:==:require ( ' stream ' )
var alphabetical = require ( ' is - alphabetical ' ) ; var decimal:==:require ( ' is - decimal ' ) ;
var iter = nodeset . iterator ( ) ; var type:==:typeof primitive ;
var log = _ . partial ( print , ' log ' ) ; var warn:==:_ . partial ( print , ' warn ' ) ;
var defaultsq <CAM> expr <CAM> visitor = powerbi . data . defaultsq <CAM> expr <CAM> visitor ; var semantic <CAM> filter:==:powerbi . data . semantic <CAM> filter ;
var isopack <CAM> cache = options . isopack <CAM> cache ; var acceptable <CAM> weak <CAM> packages:==:options . acceptable <CAM> weak <CAM> packages  |  |  ;
var Panel = imports . Panel ; var Tree:==:imports . Tree ;
var round <CAM> trips = SockJS [ protocol ] . round <CAM> trips  |  |  1 ; var to:==:( ( that . _ options . rto  |  |  0 ) * round <CAM> trips )  |  |  5000 ;
var get <CAM> day <CAM> segment <CAM> container = t . get <CAM> day <CAM> segment <CAM> container ; var render <CAM> day <CAM> overlay:==:t . render <CAM> day <CAM> overlay ;
var tree = this . tree ; var url:==:this . url ;
var rimraf = require ( ' rimraf ' ) ; var spawn <CAM> sync:==:child <UND> process . spawn <CAM> sync ;
var get <CAM> user <CAM> color = TogetherJS . config . get ( ' get <CAM> user <CAM> color ' ) ; var get <CAM> user <CAM> avatar:==:TogetherJS . config . get ( ' get <CAM> user <CAM> avatar ' ) ;
var escape <CAM> text <CAM> content <CAM> for <CAM> browser = require ( ' escape <CAM> text <CAM> content <CAM> for <CAM> browser ' ) ; var input <CAM> value <CAM> tracking:==:require ( ' input <CAM> value <CAM> tracking ' ) ;
var files = self . files <CAM> only <CAM> list ( ) ; var folders:==:self . folders <CAM> only <CAM> list ( ) ;
var template = this . options . get ( ' template <CAM> selection ' ) ; var escape <CAM> markup:==:this . options . get ( ' escape <CAM> markup ' ) ;
var sol = stream . sol ( )  |  |  state . after <CAM> section ; var eol:==:stream . eol ( ) ;
var d1 = _ add <CAM> div ( ' d1 ' ) , d2 = _ add <CAM> div ( ' d2 ' ) , d3 = _ add <CAM> div ( ' d3 ' ) ; var c:==:_ js <CAM> plumb . connect ( source : d1 , target : d2 ) ;
var stream = evt . stream ; var connection:==:provider . get <CAM> connection ( peer <CAM> id , connection <CAM> id ) ;
var remove <CAM> attribute = Element . prototype . remove <CAM> attribute ; var set <CAM> attribute:==:Element . prototype . set <CAM> attribute ;
var hexadecimal = require ( ' is - hexadecimal ' ) ; var alphanumerical:==:require ( ' is - alphanumerical ' ) ;
var col = cols [ j ] ; var Cell:==:this . new <CAM> cell ( col ) ;
var dx = Math . max ( 0 , Math . min ( w , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dx ' , this . dx ) ) ) ) ; var dx2:==:Math . max ( 0 , Math . min ( w , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var key = this . key <CAM> from <CAM> secret ( secret ) ; var r:==:this . hash <CAM> int ( key . message <CAM> prefix ( ) , message ) ;
var wrapper = node . owner <CAM> document . create <CAM> element ( ' html2canvaswrapper ' ) ; var parent:==:node . parent <CAM> node ,
var axis <CAM> expand <CAM> width = restrict ( parallel <CAM> model . get ( ' axis <CAM> expand <CAM> width ' ) , layout <CAM> extent ) ; var axis <CAM> expand <CAM> count:==:restrict ( parallel <CAM> model . get ( ' axis <CAM> expand <CAM> count ' )  |  |  0 , [ 0 , axis <CAM> count ] ) ;
var min = bounding <CAM> box . minimum ; var max:==:bounding <CAM> box . maximum ;
var EOF = EOF : truevar CLOSE:==:CLOSE : true
var menus = imports . menus ; var panels:==:imports . panels ;
var trans = core . db . transaction ( this . _ store ) ; var store:==:trans . object <CAM> store ( this . _ store ) ;
var lead <CAM> time = Property . get <CAM> value <CAM> or <CAM> undefined ( path <CAM> graphics . _ lead <CAM> time , time ) ; var trail <CAM> time:==:Property . get <CAM> value <CAM> or <CAM> undefined ( path <CAM> graphics . _ trail <CAM> time , time ) ;
var axis <CAM> helper = powerbi . visuals . axis <CAM> helper ; var text <CAM> measurement <CAM> service:==:powerbi . text <CAM> measurement <CAM> service ;
var SHOW <UND> SPINNER = exports . SHOW <UND> SPINNER = ' SHOW <UND> SPINNER ' ; var HIDE <UND> SPINNER:==:exports . HIDE <UND> SPINNER    ' HIDE <UND> SPINNER ' ;
var bubbles = this . bubbles = options . data <CAM> points <CAM> selection ; var data:==:options . data ;
var create <CAM> rest <CAM> parameter = parse <CAM> tree <CAM> factory . create <CAM> rest <CAM> parameter ; var create <CAM> spread <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> spread <CAM> expression ;
var fs = imports . fs ; var style:==:document . create <CAM> element ( ' style ' ) ;
var NO <UND> JS <UND> EXECUTION <UND> TIMEOUT = process . env . NO <UND> JS <UND> EXECUTION <UND> TIMEOUT  |  |  3000 ; var EVALUATE <UND> JAVASCRIPT <UND> CHECK <UND> TIMEOUT:==:process . env . EVALUATE <UND> JAVASCRIPT <UND> CHECK <UND> TIMEOUT  |  |  300 ;
var view <CAM> state = frame <CAM> state . view <CAM> state ; var projection:==:view <CAM> state . projection ;
var has <CAM> own <CAM> prop = doc <CAM> set . get <CAM> by <CAM> longname ( ' has <CAM> own <CAM> property ' ) [ 0 ] ; var proto:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' prototype ' ) [ 0 ] ;
var touches = original <CAM> event . touches & & original <CAM> event . touches . length ? original <CAM> event . touches : [ original <CAM> event ] ; var e:==:touches [ 0 ] ;
var preload = R . _ preload = function ( src , f ) var img:==:g . doc . create <CAM> element ( ' img ' ) ;
var to = changes . to ; var from:==:changes . from ;
var numeric = sf <CAM> builder <CAM> provider . builders . numeric ; var tabs:==:function tabs ( args )
var istanbul = require ( ' istanbul ' ) ; var path:==:require ( ' path ' ) ;
var blue <CAM> grey400 = exports . blue <CAM> grey400 = ' # 78909c ' ; var blue <CAM> grey500:==:exports . blue <CAM> grey500    ' # 607d8b ' ;
var path = require ( ' path ' ) ; var expect:==:require ( ' chai ' ) . expect ;
var stat <CAM> sync = require ( ' graceful - fs ' ) . stat <CAM> syncvar write <CAM> file <CAM> sync:==:require ( ' graceful - fs ' ) . write <CAM> file <CAM> sync
var i = find <CAM> chunk <CAM> index ( chunks , mid , is <CAM> orig ) ; var ch:==:chunks [ i ] ;
var eachline = require ( ' eachline ' ) ; var p:==:child <UND> process . spawn ( file , args , opts ) ;
var on <CAM> button <CAM> press = this . props . on <CAM> button <CAM> pressvar display <CAM> password <CAM> checkbox:==:this . props . display <CAM> password <CAM> checkbox
var React = require ( ' React ' ) ; var Navigator:==:require ( ' Navigator ' ) ;
var data = this . data ; var hmd <CAM> enabled:==:data . hmd <CAM> enabled ;
var PATH = bin <CAM> dir + path . delimiter + process . env . PATH ; var env:==:Object . create ( process . env ,
var FLATTENABLE <UND> KEYS = exports . FLATTENABLE <UND> KEYS = [ ' body ' , ' expressions ' ] ; var FOR <UND> INIT <UND> KEYS:==:exports . FOR <UND> INIT <UND> KEYS    [ ' left ' , ' init ' ] ;
var coef = this . _ coef ; var x <CAM> table:==:this . _ x <CAM> table ;
var decimal <CAM> places = $ . data ( this , ' numeric . decimal <CAM> places ' ) ; var key:==:e . char <CAM> code ? e . char <CAM> code : e . key <CAM> code ? e . key <CAM> code : 0 ;
var tile <CAM> load <CAM> queue <CAM> medium = primitive . _ tile <CAM> load <CAM> queue <CAM> medium ; var tile <CAM> load <CAM> queue <CAM> low:==:primitive . _ tile <CAM> load <CAM> queue <CAM> low ;
var Person = db . model ( ' gh4631 ' , person <CAM> schema ) ; var blog <CAM> post:==:db . model ( ' gh4631 <UND> 0 ' , blog <CAM> post <CAM> schema ) ;
var key = keys [ i ] ; var action <CAM> creator:==:action <CAM> creators [ key ] ;
var offset <CAM> top = section . element . offset <CAM> top ; var offset <CAM> left:==:section . element . offset <CAM> left ;
var element <CAM> selector = this . element <CAM> selector ; var duration <CAM> selector:==:this . duration <CAM> selector ;
var instance <CAM> geometries = data . instance <CAM> geometries ; var instance <CAM> nodes:==:data . instance <CAM> nodes ;
var GET <UND> ACCESSOR = ' GET <UND> ACCESSOR ' ; var IDENTIFIER <UND> EXPRESSION:==:' IDENTIFIER <UND> EXPRESSION ' ;
var path = require ( ' path ' ) ; var redis:==:require ( ' redis ' ) ;
var concat = require ( ' concat - stream ' ) ; var vm:==:require ( ' vm ' ) ;
var context = renderer . context ; var state:==:renderer . state ;
var event <CAM> end = t . event <CAM> end ; var event <CAM> element <CAM> handlers:==:t . event <CAM> element <CAM> handlers ;
var layout = imports . layout ; var fs:==:imports . fs ;
var ends <CAM> text = view <CAM> data . ends <CAM> text ; var show <CAM> label:==:zr <CAM> util . retrieve ( visual <CAM> map <CAM> model . get ( ' show <CAM> label ' , true ) , ! ends <CAM> text ) ;
var gl = this . gl ; var projection:==:this . render <CAM> session . projection ;
var level = _ level <CAM> map [ i d ] ; var sequence <CAM> name:==:level . sequence <CAM> name ;
var shadows <CAM> hue = params . shadows <CAM> hue ; var shadows <CAM> saturation:==:params . shadows <CAM> saturation ;
var password = $ ( ' # password ' ) ; var repeat:==:$ ( ' # repeat ' ) ;
var requirejs = require ( ' requirejs ' ) ; var path:==:require ( ' path ' ) ;
var w = + width ( ) - stroke ( ) - left <CAM> padding ; var h:==:+ height ( ) - stroke ( ) - bottom <CAM> padding ;
var Person = db . model ( ' gh4263 ' , person <CAM> schema ) ; var blog <CAM> post:==:db . model ( ' gh4263 <UND> 0 ' , blog <CAM> post <CAM> schema ) ;
var key <CAM> command <CAM> backspace <CAM> word = require ( ' key <CAM> command <CAM> backspace <CAM> word ' ) ; var key <CAM> command <CAM> delete <CAM> word:==:require ( ' key <CAM> command <CAM> delete <CAM> word ' ) ;
var macro <CAM> mode <CAM> state = vim <CAM> global <CAM> state . macro <CAM> mode <CAM> state ; var is <CAM> playing:==:macro <CAM> mode <CAM> state . is <CAM> playing ;
var d = ' ' d ' ' ; var e:==:' ' e ' ' ;
var to = ( opts & & typeof opts . to ! = ' undefined ' ) ? opts . to : that . to ; var target:==:( opts & & typeof opts . target !   ' undefined ' ) ? opts . target : null ;
var gte = ; gte [ this . path ] = $ gt : max ; var lte:==:; lte [ this . path ]    $ lt : min ;
var edge <CAM> element <CAM> type = this . _ edge <CAM> element <CAM> type ; var edge <CAM> to <CAM> node <CAM> offset:==:this . _ edge <CAM> to <CAM> node <CAM> offset ;
var x = glyph . position [ 0 ] + bitmap . xoffsetvar y:==:glyph . position [ 1 ] + bitmap . yoffset
var title = options . title  |  |  ' ' ; var message:==:options . message  |  |  ' ' ;
var time <CAM> stamp = ev . time <CAM> stamp  |  |  Date . now ( ) ; var elapsed <CAM> time:==:parse <CAM> float ( ev . elapsed <CAM> time . to <CAM> fixed ( 3 ) ) ;
var format = definition . format ; var xml:==:definition . xml  |  |  ;
var a = arguments [ i ] ; var t:==:$ . type ( a ) ;
var path = require ( ' path ' ) var util:==:require ( ' util ' )
var promise = enumerator . promise ; var input:==:enumerator . _ input ;
var hint <CAM> text = _ props . hint <CAM> text ; var floating <CAM> label <CAM> text:==:_ props . floating <CAM> label <CAM> text ;
var JSX <UND> ATTRIBUTE = ' JSX <UND> ATTRIBUTE ' ; var JSX <UND> ELEMENT:==:' JSX <UND> ELEMENT ' ;
var start = Math . max ( 0 , opt . start |  | 0 ) var end:==:typeof opt . end      ' number ' ? opt . end : text . length
var decoration <CAM> color = get <CAM> style <CAM> property ( item , style <CAM> context <CAM> stack , ' decoration <CAM> color ' , null ) ; var decoration <CAM> style:==:get <CAM> style <CAM> property ( item , style <CAM> context <CAM> stack , ' decoration <CAM> style ' , null ) ;
var south = cesium <CAM> math . to <CAM> degrees ( rectangle . south ) ; var east:==:cesium <CAM> math . to <CAM> degrees ( rectangle . east ) ;
var has <UND> flash    = zombie <UND> array [ index ] [ ' has <UND> flash ' ] ; var has <UND> web <UND> sockets:==:zombie <UND> array [ index ] [ ' has <UND> web <UND> sockets ' ] ;
var input = operation . input ; var output:==:operation . output ;
var a = reject <CAM> built <CAM> in <CAM> soon ( ' rejected - a ' , 40 ) ; var b:==:reject <CAM> built <CAM> in <CAM> soon ( ' rejected - b ' , 30 ) ;
var x = start . x + ( ( end . x - start . x ) * amount ) ; var y:==:start . y + ( ( end . y - start . y ) * amount ) ;
var type = type  |  |  target . typevar data:==:target . data
var _ ra = 272 ; values [ _ ra ] = _ ra ; var _ rb:==:273 ; values [ _ rb ]    _ rb ;
var samsam = require ( ' samsam ' ) ; var assert:==:referee . assert ;
var iframe = $ ( ' iframe , webview ' , element ) [ 0 ] var content <CAM> window:==:iframe . content <CAM> window
var value = element ( by . binding ( ' value  |  date : ' yyyy - MM - ddTHH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' my <CAM> form . input . $ valid ' ) ) ;
var chan = channel ( buffer ) ; var close:==:function close ( )
var operators = this . operators ; var length:==:operators . length ;
var create <CAM> connection = mysql . create <CAM> connection ; var create <CAM> pool:==:mysql . create <CAM> pool ;
var headers = options . headers  |  |  [ ] ; var cookies:==:options . cookies  |  |  [ ] ;
var touchable <CAM> opacity = require ( ' touchable <CAM> opacity ' ) ; var touchable <CAM> without <CAM> feedback:==:require ( ' touchable <CAM> without <CAM> feedback ' ) ;
var y <CAM> axis <CAM> models = found <CAM> cpts . y <CAM> axis <CAM> models ; var grid <CAM> models:==:found <CAM> cpts . grid <CAM> models ;
var app <UND> id = params . qstring . app <UND> id ; var validate:==:ob . validate <CAM> user <CAM> for <CAM> data <CAM> readapi ;
var get <CAM> select <CAM> all = window . get <CAM> select <CAM> all ; var i <CAM> number <CAM> of <CAM> rows:==:window . i <CAM> number <CAM> of <CAM> rows ;
var height = _ props3 . height ; var horizontal <CAM> overscan <CAM> size:==:_ props3 . horizontal <CAM> overscan <CAM> size ;
var interaction <CAM> manager = require ( ' interaction <CAM> manager ' ) ; var React:==:require ( ' React ' ) ;
var conf = App . conf ; var tpl:==:conf . tpl ;
var events = require ( ' events ' ) ; var exists:==:Fs . exists  |  |  Path . exists ;
var os <UND> name    = zombie <UND> array [ index ] [ ' os <UND> name ' ] ; var hw <UND> name:==:zombie <UND> array [ index ] [ ' hw <UND> name ' ] ;
var prop = ( options . model & & options . model . prop )  |  |  ' value ' ; var event:==:( options . model & & options . model . event )  |  |  ' input ' ; ( data . props  |  |  ( data . props    ) ) [ prop ]    data . model . value ;
var condition = this . transform <CAM> any ( tree . condition ) ; var if <CAM> clause:==:this . transform <CAM> to <CAM> block <CAM> or <CAM> statement ( tree . if <CAM> clause ) ;
var indigoA200 = exports . indigoA200 = ' # 536dfe ' ; var indigoA400:==:exports . indigoA400    ' # 3d5afe ' ;
var reconnect <CAM> socket = kaefer . reconnect <CAM> socket ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var Plugin = imports . Plugin ; var Form:==:imports . Form ;
var auth = mongo <CAM> url . auth & & mongo <CAM> url . auth . split ( ' : ' ) ; var ssl:==:require ( ' querystring ' ) . parse ( mongo <CAM> url . query ) . ssl      ' true ' ;
var chain = require ( ' slide ' ) . chainvar path:==:require ( ' path ' )
var PLACEMENT = Diagram . PLACEMENT ; var LINETYPE:==:Diagram . LINETYPE ;
var parser = require ( ' tap - parser ' ) ; var through:==:require ( ' through2 ' ) ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var dirname:==:require ( ' path ' ) . dirname ;
var m = matrices [ 0 ] ; var s:==:cs <UND> sqr ( 2 , m , false ) ;
var near = shadow <CAM> frustum . near ; var far:==:shadow <CAM> frustum . far ;
var next = this . next ; var prev:==:this . prev ;
var latitude = e . coords . latitude ; var altitude:==:e . coords . altitude ;
var p = this . node . parent <CAM> nodevar c:==:this . placeholder
var latitude <CAM> bands = opts & & opts . latitude <CAM> bands ! = = undefined ? opts . latitude <CAM> bands : 16 ; var longitude <CAM> bands:==:opts & & opts . longitude <CAM> bands !    undefined ? opts . longitude <CAM> bands : 16 ;
var iframe = document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' iframe ' ) [ 0 ] ; var name:==:iframe . name ;
var source <CAM> type = source <CAM> code . ast . source <CAM> type ; var variables:==:scope . variables ;
var editor   = this . editor ; var preview:==:this . preview ;
var status = _ ref . status ; var status <CAM> text:==:_ ref . status <CAM> text ;
var due <CAM> time = this . due <CAM> time ; var scheduler:==:this . scheduler ;
var dom <CAM> token <CAM> list = scope . wrappers . dom <CAM> token <CAM> list ; var parent <CAM> node <CAM> interface:==:scope . parent <CAM> node <CAM> interface ;
var complex = math . complex ; var fraction:==:math . fraction ;
var Schema = mongoose . Schema ; var co:==:require ( ' co ' ) ;
var kind = feature . get ( ' kind ' ) ; var railway:==:feature . get ( ' railway ' ) ;
var Ref = core <CAM> primitives . Ref ; var ref <CAM> set:==:core <CAM> primitives . ref <CAM> set ;
var src = xml <CAM> attribute <CAM> value ( dom <CAM> element , ' src ' ) ; var type:==:xml <CAM> attribute <CAM> value ( dom <CAM> element , ' type ' ) ;
var dynCall <UND> iddddiii = Module [ ' dynCall <UND> iddddiii ' ] = asm [ ' dynCall <UND> iddddiii ' ] ; var dynCall <UND> iiiiiiiiiiii:==:Module [ ' dynCall <UND> iiiiiiiiiiii ' ]    asm [ ' dynCall <UND> iiiiiiiiiiii ' ] ;
var is <CAM> full = self . is <CAM> full ( ) ; var is <CAM> locked:==:self . is <CAM> locked ;
var flows = config . flows ; var credentials:==:config . credentials ;
var sinon = require ( ' sinon ' ) ; var clone:==:require ( ' clone ' ) ;
var pass = shadow <CAM> map . _ passes [ i ] ; var framebuffer:==:pass . framebuffer ;
var a = require ( ' a ' ) ; var foo:==:a . foo ;
var jbig2 <CAM> image = core <CAM> jbig2 . jbig2 <CAM> image ; var jpeg <CAM> image:==:core <CAM> jpg . jpeg <CAM> image ;
var _ nk = 218 ; values [ _ nk ] = _ nk ; var _ nl:==:219 ; values [ _ nl ]    _ nl ;
var edge <CAM> fields <CAM> count = this . _ edge <CAM> fields <CAM> count ; var containment <CAM> edges:==:this . containment <CAM> edges ;
var replace = require ( ' gulp - replace ' ) ; var util:==:require ( ' gulp - util ' ) ;
var collection = db . collection ( ' read <UND> pref <UND> 1 ' , read <CAM> preference : read <CAM> preference . SECONDARY <UND> PREFERRED ) ; var command:==:db . server <CAM> config . command ;
var exec = promisify ( child <UND> process . exec ) ; var readdir:==:promisify ( fs . readdir ) ;
var polygons = this . polygons ; var polygon <CAM> pool:==:this . polygon <CAM> pool ;
var crypto = require ( ' crypto ' ) ; var shell:==:require ( ' shelljs ' ) ,
var spawn = require ( ' child <UND> process ' ) . spawn ; var fs:==:require ( ' fs ' ) ;
var a1 = expected [ i ] . locals . a1 ; var b1:==:expected [ i ] . locals . b1 ;
var parse <CAM> tree <CAM> type = traceur . syntax . trees . parse <CAM> tree <CAM> type ; var source <CAM> position:==:traceur . syntax . source <CAM> position ;
var objects = this . objects ; var listeners:==:this . anim <CAM> state . listeners ;
var windows = this . windows ; var len:==:windows . length ;
var plugin = get <CAM> by <CAM> name ( type . plugins , key ) ; var stats:==:changed <CAM> plugin . stats ;
var calendar = t . calendar ; var get <CAM> event <CAM> end:==:calendar . get <CAM> event <CAM> end ;
var is <CAM> object = leaflet <CAM> helpers . is <CAM> object ; var obtain <CAM> effective <CAM> map <CAM> id:==:leaflet <CAM> helpers . obtain <CAM> effective <CAM> map <CAM> id ;
var width = bounds . z * _ width * _ pixel <CAM> ratio ; var height:==:bounds . w * _ height * _ pixel <CAM> ratio ;
var attachments = options . attachments ; var attachments <CAM> view:==:options . attachments <CAM> view ;
var _ gn = 109 ; values [ _ gn ] = _ gn ; var _ go:==:110 ; values [ _ go ]    _ go ;
var row = this . selection <CAM> lead . row ; var column:==:this . selection <CAM> lead . column ;
var dest = options . dest & & convert <CAM> path ( options . dest ) ; var root:==:convert <CAM> path ( options . root ) ;
var x = pos <CAM> info . cx + parse <CAM> percent ( offset <CAM> center [ 0 ] , pos <CAM> info . r ) ; var y:==:pos <CAM> info . cy + parse <CAM> percent ( offset <CAM> center [ 1 ] , pos <CAM> info . r ) ;
var done = self . _ done ( resolve , self ) ; var on <CAM> open <CAM> complete:==:self . config [ ' on <CAM> open <CAM> complete ' ]  |  |  angular . noop ;
var res = this . res ; var req:==:this . req ;
var projection = view <CAM> state . projection ; var rotation:==:view <CAM> state . rotation ;
var visual <CAM> bounds = this . dom . visual <CAM> bounds ; var layout <CAM> bounds:==:this . dom . layout <CAM> bounds ;
var fs = imports . fs ; var ext:==:imports . ext ;
var tbody = goog . bind ( this . dom _ . create <CAM> dom , this . dom _ , ' tbody ' ) ; var thead:==:goog . bind ( this . dom _ . create <CAM> dom , this . dom _ , ' thead ' ) ;
var glob = require ( ' glob ' ) var color:==:require ( ' ansicolors ' )
var value <CAM> key = _ ref . value <CAM> key ; var on <CAM> option <CAM> ref:==:_ ref . on <CAM> option <CAM> ref ;
var backbone = require ( ' backbone ' ) ; var test:==:require ( ' tap ' ) . test ;
var current = data . current ; var total:==:data . total ;
var state = document . get <CAM> element <CAM> by <CAM> id ( ' state ' ) ; var address:==:document . get <CAM> element <CAM> by <CAM> id ( ' address ' ) ;
var log = require ( ' npmlog ' ) var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter
var response <UND> type = _ ref . response <UND> type ; var scope:==:_ ref . scope ;
var opening = word <CAM> regexp ( opening <CAM> keywords ) ; var middle:==:word <CAM> regexp ( middle <CAM> keywords ) ;
var r0 = computeImpulseDenominator <UND> r0 ; var c0:==:computeImpulseDenominator <UND> c0 ;
var ddfx = tmpx * 2 + dddfx , ddfy = tmpy * 2 + dddfy ; var dfx:==:cx1 * 0 . 3 + tmpx + dddfx * 0 . 16666667 , dfy    cy1 * 0 . 3 + tmpy + dddfy * 0 . 16666667 ;
var util = require ( ' util ' ) ; var chalk:==:require ( ' chalk ' ) ;
var width = this . _ model . get ( ' width ' ) ; var height:==:this . _ model . get ( ' height ' ) ;
var _ io = 142 ; values [ _ io ] = _ io ; var _ ip:==:143 ; values [ _ ip ]    _ ip ;
var zipstream = require ( ' zipstream ' ) ; var fs:==:require ( ' fs ' ) ;
var task = grunt . task ; var file:==:grunt . file ;
var _ re = 276 ; values [ _ re ] = _ re ; var _ rf:==:277 ; values [ _ rf ]    _ rf ;
var at <CAM> name <CAM> member <CAM> transformer = traceur . codegeneration . at <CAM> name <CAM> member <CAM> transformer ; var block <CAM> binding <CAM> transformer:==:traceur . codegeneration . block <CAM> binding <CAM> transformer ;
var template <CAM> url = options . template <CAM> url ; var template:==:options . template  |  |  '' ;
var event <CAM> type = $ ( ' # event <CAM> type ' ) . val ( ) ; var reasons:==:input <CAM> matrix [ event <CAM> type ] [ ' reasons ' ] ;
var send = $ scope . send ; var recipient:==:send . recipient <UND> address ;
var teal300 = exports . teal300 = ' # 4db6ac ' ; var teal400:==:exports . teal400    ' # 26a69a ' ;
var g = e . dygraph ; var step <CAM> plot:==:g . get <CAM> boolean <CAM> option ( ' step <CAM> plot ' , e . set <CAM> name ) ;
var w = $ ( ' body ' ) . width ( ) ; var h:==:$ ( ' body ' ) . height ( ) ;
var state = env [ env <UND> state ] ; var errflag:==:env [ env <UND> errflag ] ;
var name = tag . name ? ' name= ' ' + tag . name + ' ' ' : '' ; var property:==:tag . property ? ' property ' ' + tag . property + ' ' ' : '' ;
var export <CAM> mapping <CAM> list = traceur . syntax . trees . export <CAM> mapping <CAM> list ; var export <CAM> specifier:==:traceur . syntax . trees . export <CAM> specifier ;
var pointer <CAM> id = default <CAM> value ( options . pointer <CAM> id , 1 ) ; var pointer <CAM> type:==:default <CAM> value ( options . pointer <CAM> type , 0 ) ;
var a = x : ' a ' , y : ' a ' , z : ' a ' , t : ' a ' ; var b:==:y : ' b ' , t : ' b ' ;
var err = test . err ; var message:==:err . message  |  |  '' ;
var bound <CAM> element <CAM> index = view <CAM> container <CAM> location . bound <CAM> element <CAM> index ; var view <CAM> container:==:parent <CAM> view . view <CAM> containers [ bound <CAM> element <CAM> index ] ;
var x = euler . x , y = euler . y , z = euler . z ; var a:==:Math . cos ( x ) , b    Math . sin ( x ) ;
var l0 = intersectHeightfield <UND> l0 ; var l1:==:intersectHeightfield <UND> l1 ;
var expect = chai . expect ; var should:==:chai . should ;
var Controller = Ember . Controller ; var Store:==:DS . Store ;
var s = list [ j ] var t:==:list [ j+1 ]
var injected <CAM> keys = this . injected <CAM> keys ; var inject <CAM> into:==:this . inject <CAM> into ;
var n = that . point2 . p . subtract ( that . point1 . p ) . normalize ( ) . normal ( ) ; var ac:==:point . p . subtract ( that . point1 . p ) ;
var m0 = this . m00 _ ; var m1:==:this . m10 _ ;
var rect = s . rect ( 10 , 20 , 30 , 40 ) ; var circle:==:s . circle ( 10 , 20 , 30 ) ;
var after = new Blockly . field <CAM> label ( ' after ' ) ; var suffix:==:new Blockly . field <CAM> label ( ' suffix ' ) ;
var tv <CAM> event <CAM> handler = require ( ' tv <CAM> event <CAM> handler ' ) ; var View:==:require ( ' View ' ) ;
var a = x : ' a ' , y : ' c ' ; var b:==:x : ' b ' , z : 'd ' ;
var util = require ( ' util ' ) var bl:==:require ( ' bl ' )
var random = utils . random ; var Schema:==:mongoose . Schema ;
var l = doc . get <CAM> value ( ) . length ; var random:==:Math . random ( ) ;
var ready <CAM> state = this . win . document & & this . win . document . ready <CAM> state ; var location:==:this . win . document . location ;
var dir <CAM> path = file . dir <CAM> path ; var type:==:file . type ;
var template = this . options . get ( ' template <CAM> result ' ) ; var escape <CAM> markup:==:this . options . get ( ' escape <CAM> markup ' ) ;
var args = _ args ; var f:==:_ f ;
var async = require ( ' async ' ) ; var semver:==:require ( ' semver ' ) ;
var height = that . options . height ; var visible:==:that . popup . visible ( ) ;
var Stream = Struct ( ' Stream ' ) ; var str <CAM> slice:==:Struct ( ' str <CAM> slice ' ) ;
var a <CAM> life <CAM> cycle <CAM> calls = this . a <CAM> life <CAM> cycle <CAM> calls = [ ] ; var o <CAM> lifecycle <CAM> spy:==:this . o <CAM> lifecycle <CAM> spy    sinon . spy ( ) ;
var debug = window . debug ; var jasmine:==:window . jasmine ;
var will <CAM> hidden = this . state . will <CAM> hidden ; var animation:==:this . props . animation ;
var short = ppo . short . result ; var long:==:ppo . long . result ;
var export <CAM> clause = this . transform <CAM> any ( tree . export <CAM> clause ) ; var module <CAM> specifier:==:this . transform <CAM> any ( tree . module <CAM> specifier ) ;
var row <CAM> bytes = this . row <CAM> bytes ; var buffer <CAM> length:==:this . buffer <CAM> length ;
var opacity = options . opacity ! = = undefined ? options . opacity : 1 ; var rotate <CAM> with <CAM> view:==:options . rotate <CAM> with <CAM> view !    undefined ?
var indices = list . indices = this . indices ; var storage:==:list . _ storage ;
var debug = require ( ' debug ' ) ( ' loopback : test : relations . integration ' ) ; var async:==:require ( ' async ' ) ;
var arrow <CAM> function <CAM> expression = traceur . syntax . trees . arrow <CAM> function <CAM> expression ; var at <CAM> name <CAM> expression:==:traceur . syntax . trees . at <CAM> name <CAM> expression ;
var x = parse <CAM> float ( hot <CAM> spot <CAM> node . get <CAM> attribute ( ' x ' ) ) ; var y:==:parse <CAM> float ( hot <CAM> spot <CAM> node . get <CAM> attribute ( ' y ' ) ) ;
var fs = require ( ' fs ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var min <CAM> height = options . min <CAM> height ; var resize <CAM> message:==:options . resize <CAM> message ;
var get <CAM> bounds = _ tether <CAM> base$ <CAM> utils . get <CAM> bounds ; var update <CAM> classes:==:_ tether <CAM> base$ <CAM> utils . update <CAM> classes ;
var sanitize = require ( ' sanitize - filename ' ) ; var url:==:require ( ' url ' ) ;
var device = Devices [ opts . device ] ; var address:==:device . address ;
var accessor <CAM> node = math . expression . node . accessor <CAM> node ; var index <CAM> node:==:math . expression . node . index <CAM> node ;
var dates = dom . query <CAM> selector ( ' # contacts - form - dates ' ) ; var notes:==:dom . query <CAM> selector ( ' # contacts - form - notes ' ) ;
var steps = steps <CAM> defaults ( slider <CAM> in , slider <CAM> out ) ; var visible:==:coerce ( ' visible ' , steps . length > 0 ) ;
var create <CAM> string <CAM> literal = parse <CAM> tree <CAM> factory . create <CAM> string <CAM> literal ; var create <CAM> switch <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> switch <CAM> statement ;
var slot <CAM> duration = view . opt ( ' slot <CAM> duration ' ) ; var snap <CAM> duration:==:view . opt ( ' snap <CAM> duration ' ) ;
var path   = require ( ' path ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var assert = require ( ' assert ' ) ; var equal:==:require ( ' assert - dir - equal ' ) ;
var face = this . face ; var i:==:this . ij [ 0 ] ;
var draw <CAM> points = g . get <CAM> boolean <CAM> option ( ' draw <CAM> points ' , set <CAM> name ) ; var point <CAM> size:==:g . get <CAM> numeric <CAM> option ( ' point <CAM> size ' , set <CAM> name ) ;
var match = matches [ i ] ; var begin:==:Math . max ( cleared <CAM> until <CAM> div <CAM> idx , match . begin . div <CAM> idx ) ;
var h <CAM> doc <CAM> esc <CAM> key = instance . _ h <CAM> doc <CAM> esc <CAM> key <CAM> ev ; var h <CAM> doc <CAM> mouse <CAM> down:==:instance . _ h <CAM> doc <CAM> mouse <CAM> down <CAM> ev ;
var int16 = Fn . int16 ; var uint16:==:Fn . uint16 ;
var c = this . cs ; var i:==:this . num ;
var colorizer = require ( ' colorizer ' ) ; var events:==:require ( ' events ' ) ;
var x = Math . min ( rectx1 , prevrectx1 ) ; var y:==:Math . min ( recty1 , prevrecty1 ) ;
var event = track . event ( ) ; var revenue:==:track . revenue ( )  |  |  0 ;
var r = this . pow ( a , q . addn ( 1 ) . iushrn ( 1 ) ) ; var t:==:this . pow ( a , q ) ;
var B = db . model ( ' gh4278 <UND> 1 ' , b <CAM> schema ) ; var C:==:db . model ( ' gh4278 <UND> 2 ' , c <CAM> schema ) ;
var os = require ( ' os ' ) ; var fs:==:require ( ' fs ' ) ;
var $ element = this . $ element ; var $ md <CAM> util:==:this . $ md <CAM> util ;
var push = value <CAM> of : function ( ) a . push ( 10 ) ; return 0 ; ; var s:==:a . splice ( 0 , push ) ;
var Types = keystone . Field . Types ; var Date:==:new keystone . List ( ' Date ' ,
var data = app . ns ( ' data ' ) ; var ut:==:app . ns ( ' ut ' ) ;
var VERTICAL <UND> ORIGIN <UND> INDEX = Billboard . VERTICAL <UND> ORIGIN <UND> INDEX ; var SCALE <UND> INDEX:==:Billboard . SCALE <UND> INDEX ;
var typedef = typedefs [ typedefs . length - 1 ] ; var type:==:typedef . types [ 0 ] ;
var dynCall <UND> viiidi = Module [ ' dynCall <UND> viiidi ' ] = asm [ ' dynCall <UND> viiidi ' ] ; var dynCall <UND> iid:==:Module [ ' dynCall <UND> iid ' ]    asm [ ' dynCall <UND> iid ' ] ;
var assert = require ( ' assert ' ) ; var assign:==:require ( ' object - assign ' ) ;
var ENV = process . env . NODE <UND> ENV  |  |  ' development ' ; var express:==:require ( ' express ' ) ;
var g = Math . round ( cp <CAM> global . hue <CAM> torgb ( p , q , tg ) * 255 ) ; var b:==:Math . round ( cp <CAM> global . hue <CAM> torgb ( p , q , tb ) * 255 ) ;
var e = parse ( event ) ; var el:==:this . el ;
var cast <CAM> error = error . cast <CAM> error ; var validator <CAM> error:==:error . validator <CAM> error ;
var sanitize = require ( ' htmlescape ' ) . sanitize ; var shasum:==:require ( ' shasum ' ) ;
var escape <CAM> char = function escape <CAM> char ( character ) var char <CAM> code:==:character . char <CAM> code <CAM> at ( 0 ) ,
var path = require ( ' path ' ) var test:==:require ( ' tap ' ) . test
var is <CAM> array = Array . is <CAM> array ( source ) ; var target:==:_ target  |  |  ( is <CAM> array ? new Array ( source . length ) : ) ;
var Status = goog . net . streams . xhr <CAM> stream <CAM> reader . Status ; var event <CAM> type:==:goog . net . streams . node <CAM> readable <CAM> stream . event <CAM> type ;
var panels = imports . panels ; var Tree:==:imports . Tree ;
var ann = anns [ i ] ; var severity:==:ann . severity ;
var fake <CAM> group <CAM> row = window . fake <CAM> group <CAM> row ; var fake <CAM> sum <CAM> row:==:window . fake <CAM> sum <CAM> row ;
var left = ~dir . index <CAM> of ( ' left ' ) & & ' left ' ; var right:==:~dir . index <CAM> of ( ' right ' ) & & ' right ' ;
var d = new assignment <CAM> node ( object , index , value ) ; var e:==:new constant <CAM> node ( 3 ) ;
var sun <CAM> positionec = Matrix4 . multiply <CAM> by <CAM> point ( view <CAM> matrix , sun <CAM> position , sun <CAM> positionec <CAM> scratch ) ; var sun <CAM> positionwc:==:Transforms . point <CAM> togl <CAM> window <CAM> coordinates ( view <CAM> projection <CAM> matrix , viewport <CAM> transformation , sun <CAM> position , sun <CAM> positionwc <CAM> scratch ) ;
var params = ob . paramsvar validate:==:ob . validate <CAM> user <CAM> for <CAM> global <CAM> admin ;
var layout = imports . layout ; var tooltip:==:imports . tooltip ;
var collections = this . _ collections ; var composite:==:this . _ composite ;
var observers = this . observers ; var len:==:observers . length ;
var width = node . get <CAM> bounding <CAM> client <CAM> rect ( ) . width ; var height:==:node . get <CAM> bounding <CAM> client <CAM> rect ( ) . height ;
var nconf = require ( ' nconf ' ) ; var fs:==:require ( ' fs ' ) ;
var entity = updater . entity ; var i d:==:entity . i d ;
var array <CAM> map = traceur . util . array <CAM> map ; var resolve <CAM> url:==:traceur . util . resolve <CAM> url ;
var BOOLEAN <UND> UNARY <UND> OPERATORS = exports . BOOLEAN <UND> UNARY <UND> OPERATORS = [ ' delete ' , ' ! ' ] ; var NUMBER <UND> UNARY <UND> OPERATORS:==:exports . NUMBER <UND> UNARY <UND> OPERATORS    [ ' + ' , ' - ' , ' + + ' , ' -- ' , ' ~ ' ] ;
var container <CAM> size = _ ref4 . container <CAM> size ; var offset:==:_ ref4 . offset ;
var data = JSON . parse ( e . data ) ; var type:==:data . type ;
var a = document . create <CAM> text <CAM> node ( ' a ' ) ; var b:==:document . create <CAM> text <CAM> node ( ' b ' ) ;
var tablix <CAM> objects = visuals . controls . internal . tablix <CAM> objects ; var url <CAM> utils:==:js <CAM> common . url <CAM> utils ;
var aabb = this . aabb ; var l:==:aabb . lower <CAM> bound ;
var winston = require ( ' winston ' ) ; var passport:==:require ( ' passport ' ) ;
var entity = component . entity ; var data:==:component . data ;
var key = relationship . key ; var belongs <CAM> to:==:record . belongs <CAM> to ( key ) ;
var font = [ _ cs . font <CAM> weight , _ cs . font <CAM> size , _ cs . font <CAM> family ] . join ( ' ' ) ; var line <CAM> height:==:_ cs . line <CAM> height ;
var width = rect . width ; var height:==:rect . height ;
var prefs = require ( ' prefs ' ) ; var utils:==:require ( ' utils ' ) ;
var create <CAM> return <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> return <CAM> statement ; var create <CAM> statement <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> statement <CAM> list ;
var sampling <CAM> ratio = setting & & ( 0 , _ object . has <CAM> own <CAM> property ) ( setting , ' sampling <CAM> ratio ' ) ? this . hot . get <CAM> settings ( ) . auto <CAM> column <CAM> size . sampling <CAM> ratio : void 0 ; var allow <CAM> sample <CAM> duplicates:==:setting & & ( 0 , _ object . has <CAM> own <CAM> property ) ( setting , ' allow <CAM> sample <CAM> duplicates ' ) ? this . hot . get <CAM> settings ( ) . auto <CAM> column <CAM> size . allow <CAM> sample <CAM> duplicates : void 0 ;
var spy = sinon . spy ( ) ; var marker:==:L . marker ( [ 0 , 0 ] , icon : new L . div <CAM> icon ( ) ) . add <CAM> to ( map ) ;
var Map   = Immutable . Map ; var is <CAM> map:==:Immutable . Map . is <CAM> map ;
var b = math . bignumber ( 2 ) . div ( 3 ) ; var f:==:math . fraction ( b ) ;
var tags = post . tags . map ( map <CAM> name ) ; var categories:==:post . categories . map ( map <CAM> name ) ;
var error = new Error ( ' some error ' ) ; var operation:==:retry . operation ( [ 1 , 2 , 3 ] ) ;
var options = this . options . options ; var token:==:this . options . token ;
var sqrt = stdlib . Math . sqrt ; var pow:==:stdlib . Math . pow ;
var node1 = new goog . ui . tree . tree <CAM> node ( ' node1 ' ) ; var nodeA:==:new goog . ui . tree . tree <CAM> node ( ' nodeA ' ) ;
var opacity = _ props . opacity ; var style:==:_ props . style ;
var e = events [ events . length - 1 ] ; var d:==:e . detail ;
var crop <CAM> box = this . crop <CAM> box ; var is <CAM> limited:==:this . is <CAM> limited ;
var start = options . has <CAM> own <CAM> property ( ' start ' ) ? options . start : 0 ; var stop:==:options . has <CAM> own <CAM> property ( ' stop ' ) ? options . stop : 19 ;
var opensavefile = document . get <CAM> element <CAM> by <CAM> id ( ' opensavefile ' ) ; var opensaveblob:==:document . get <CAM> element <CAM> by <CAM> id ( ' opensaveblob ' ) ;
var order = ( options & & options . order )  |  |  '' ; var query:==:( options & & options . query )  |  |  '' ;
var scroll <CAM> left = this . _ code <CAM> mirror . doc . scroll <CAM> left ; var scroll <CAM> top:==:this . _ code <CAM> mirror . doc . scroll <CAM> top ;
var util = require ( ' util ' ) ; var through:==:require ( ' through ' ) ;
var history = window . history ; var push <CAM> state:==:history . push <CAM> state ;
var y = flyout <CAM> rect . top ; var width:==:flyout <CAM> rect . width ;
var NULL1 = C . NULL1 = 0x41 ; var NULL2:==:C . NULL2    0x42 ;
var shadow <CAM> offsetx = this . ctx . shadow <CAM> offsetx ; var shadow <CAM> offsety:==:this . ctx . shadow <CAM> offsety ;
var config = utils . pkg . config ( packageJSON ) ; var npm <CAM> ignore:==:config & & config . npm <CAM> ignore ;
var data <CAM> label <CAM> show = powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> show , false ) ; var data <CAM> label <CAM> color:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> color , solid : color : default <CAM> color ) ;
var lstat = require ( ' graceful - fs ' ) . lstatvar readdir:==:require ( ' graceful - fs ' ) . readdir
var face = faces [ i ] ; var edge:==:face . edge ;
var x = [ 0 , 2 , 0 , 0x41414141 ] ; var y:==:new Proxy ( x ,
var polygon <CAM> offset = default <CAM> value ( states <CAM> functions . polygon <CAM> offset , [ 0 . 0 , 0 . 0 ] ) ; var scissor:==:default <CAM> value ( states <CAM> functions . scissor , [ 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ] ) ;
var touch = e . type . index <CAM> of ( ' touch ' ) = = = 0 ; var mouse:==:e . type . index <CAM> of ( ' mouse ' )      0 ;
var array <CAM> map = traceur . util . array <CAM> map ; var assert:==:traceur . assert ;
var transform = exports . transform = pipeline . transform . bind ( pipeline ) ; var transform <CAM> from <CAM> ast:==:exports . transform <CAM> from <CAM> ast    pipeline . transform <CAM> from <CAM> ast . bind ( pipeline ) ;
var begin = this . interval . begin ; var end:==:this . interval . end ;
var a23 = this . a23 ; var a31:==:this . a31 ;
var n = readmp <CAM> int ( der , ' modulus ' ) ; var e:==:readmp <CAM> int ( der , ' public exponent ' ) ;
var dataset = me . chart . data . datasets [ point . _ dataset <CAM> index ] ; var index:==:point . _ index ;
var webview = this . webview ; var arg:==:event . args [ 0 ] ;
var menus = imports . menus ; var favorites:==:imports [ ' tree . favorites ' ] ;
var option <CAM> index = _ props . option <CAM> index ; var class <CAM> name:==:( 0 , _ classnames2 [ ' default ' ] ) ( this . props . class <CAM> name , option . class <CAM> name ) ;
var O <UND> RDWR = constants . O <UND> RDWR  |  |  0 ; var O <UND> SYMLINK:==:constants . O <UND> SYMLINK  |  |  0 ;
var mongoose = require ( ' mongoose ' ) ; var User:==:mongoose . model ( ' User ' ) ;
var from = doc <CAM> set . get <CAM> by <CAM> longname ( ' Message~headers . from ' ) ; var response:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' Message~response . code ' ) ;
var $ data <CAM> spans = that . $ data <CAM> spans = $ datatable . children ( ' . datatable - head , . datatable - rows ' ) . find ( ' . datatable - span ' ) ; var $ rows <CAM> spans:==:that . $ rows <CAM> spans    $ datatable . children ( ' . datatable - rows ' ) . children ( ' . datatable - rows - span ' ) ;
var gl = options . glvar shader:==:shaders . create <CAM> perspective ( gl )
var utils = require ( ' utils ' ) ; var esomin:==:require ( ' esomin ' ) ;
var current <CAM> styles = _ state . current <CAM> styles ; var current <CAM> velocities:==:_ state . current <CAM> velocities ;
var $ root <CAM> scope = this . $ injector . get ( ' $ root <CAM> scope ' ) ; var $ root <CAM> element:==:this . $ injector . get ( ' $ root <CAM> element ' ) ;
var stdout = FS . create <CAM> device ( dev <CAM> folder , ' stdout ' , null , output ) ; var stderr:==:FS . create <CAM> device ( dev <CAM> folder , ' stderr ' , null , error ) ;
var y0 = layout . y0 ; var y:==:layout . y ;
var read <CAM> file <CAM> sync = fs . read <CAM> file <CAM> sync ; var exports:==:module . exports    function ( )
var bot = rect . bottom + 10 + window . pagey <CAM> offset ; var left:==:rect . left + window . pagex <CAM> offset ;
var entry = document . create <CAM> element ( ' gui - menu - entry ' ) ; var img:==:document . create <CAM> element ( ' img ' ) ;
var keys = Object . keys ( obj ) ; var len:==:keys . length ;
var split = stack . split ( rline ) ; var len:==:split . length ;
var get <CAM> body = dom . get <CAM> body ; var get <CAM> content <CAM> document:==:dom . get <CAM> content <CAM> document ;
var elements = $ document . elements ( ) ; var href:==:elements . attr ( ' href ' ) ;
var header <CAM> names = parse <CAM> output . header <CAM> names ; var header <CAM> types:==:parse <CAM> output . header <CAM> types ;
var assert = test . assertvar to <CAM> string:==:. to <CAM> string
var cyan600 = exports . cyan600 = ' # 00acc1 ' ; var cyan700:==:exports . cyan700    ' # 0097a7 ' ;
var fs = require ( ' fs ' ) ; var create <CAM> server:==:require ( ' http - server ' ) . create <CAM> server ;
var children = _ props3 . children ; var on <CAM> row <CAM> click:==:_ props3 . on <CAM> row <CAM> click ;
var n = new Thunk ( ' first ' ) var u:==:new Thunk ( ' second ' )
var get <CAM> label <CAM> formatted <CAM> text = powerbi . visuals . data <CAM> label <CAM> utils . get <CAM> label <CAM> formatted <CAM> text ; var font <CAM> size:==:label <CAM> point . font <CAM> size ;
var output <CAM> dir = options . output <CAM> dir  |  |  process . cwd ( ) var output <CAM> suffix:==:options . output <CAM> suffix  |  |  ''
var children = React . Children . to <CAM> array ( this . props . children ) ; var value:==:children [ position ] . props . value ;
var cell <CAM> size <CAM> and <CAM> position <CAM> getter = _ props . cell <CAM> size <CAM> and <CAM> position <CAM> getter ; var section <CAM> size:==:_ props . section <CAM> size ;
var webpack = require ( ' webpack ' ) ; var commons <CAM> chunk <CAM> plugin:==:webpack . optimize . commons <CAM> chunk <CAM> plugin ;
var Parser = traceur . syntax . Parser ; var module <CAM> analyzer:==:traceur . semantics . module <CAM> analyzer ;
var name = req . params . name ; var page:==:Number ( req . query . page )  |  |  1 ;
var pos = this . position ; var l:==:labels . length ;
var fs = require ( ' fs ' ) var ngrok:==:require ( ' ngrok ' )
var transform <CAM> origin = kendo . effects . transform <CAM> origin ; var fill <CAM> scale:==:kendo . effects . fill <CAM> scale ;
var is <CAM> custom <CAM> component = require ( ' is <CAM> custom <CAM> component ' ) ; var omitted <CAM> close <CAM> tags:==:require ( ' omitted <CAM> close <CAM> tags ' ) ;
var vizion   = require ( ' vizion ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : god ' ) ;
var enter <CAM> to <CAM> class = ref . enter <CAM> to <CAM> class ; var enter <CAM> active <CAM> class:==:ref . enter <CAM> active <CAM> class ;
var path <CAM> array = options . path <CAM> array ; var close <CAM> array:==:options . close <CAM> array  |  |  false ;
var x = this . x , y = this . y , z = this . z , w = this . w ; var e:==:m . elements ;
var w = this . width  |  |  ( canvas & & canvas . width )  |  |  1000 ; var h:==:this . height  |  |  ( canvas & & canvas . height )  |  |  1000 ;
var type = activity . source . data . type ; var name:==:activity . source . name ;
var eye = SIMD . float32x4 ( eye <CAM> ref . x , eye <CAM> ref . y , eye <CAM> ref . z , 0 ) ; var up:==:SIMD . float32x4 ( up <CAM> ref . x , up <CAM> ref . y , up <CAM> ref . z , 0 ) ;
var $ locutus = $ global . $ locutusvar locale:==:$ locutus . php . locale <CAM> categories . LC <UND> TIME
var reject = follower . _ rejection <CAM> handler0 ; var promise:==:follower . _ promise0 ;
var util = require ( ' util ' ) ; var shims:==:require ( ' _ shims ' ) ;
var sinon = require ( ' sinon ' ) ; var assign:==:require ( ' object - assign ' ) ;
var protractor = require ( ' protractor ' ) ; var firebase:==:require ( ' firebase ' ) ;
var assert = test . assert ; var expect:==:test . expect ;
var line = cur . line ; var ch:==:cur . ch ;
var is <CAM> loading = _ state . is <CAM> loading ; var options:==:_ state . options ;
var n = doc . nums . shift ( ) ; var s:==:doc . strs . shift ( ) ;
var range = math . range ; var ceil:==:math . ceil ;
var position = entity . position ; var length:==:cylinder . length ;
var fragmented <CAM> tracks = config . fragmented <CAM> tracks ; var all <CAM> tracks <CAM> are <CAM> disabled:==:config . all <CAM> tracks <CAM> are <CAM> disabled ;
var path = require ( ' path ' ) ; var proxyquire:==:require ( ' proxyquire ' ) ;
var remove = author <CAM> attributes . remove ; var apply:==:author <CAM> attributes . apply ;
var temp <CAM> key <CAM> map = config . temp <CAM> key <CAM> map ; var entity <CAM> type:==:entity <CAM> group . entity <CAM> type ;
var extension <CAM> sidebar <CAM> pane = declare <CAM> interface <CAM> class ( extension <CAM> sidebar <CAM> pane <CAM> impl ) ; var panel <CAM> with <CAM> sidebar:==:declare <CAM> interface <CAM> class ( panel <CAM> with <CAM> sidebar <CAM> impl ) ;
var touch <CAM> ripple <CAM> color = _ props2 . touch <CAM> ripple <CAM> color ; var touch <CAM> ripple <CAM> opacity:==:_ props2 . touch <CAM> ripple <CAM> opacity ;
var d = dec <UND> point = = = undefined ? ' , ' : dec <UND> point ; var t:==:thousands <UND> sep      undefined ? ' . ' : thousands <UND> sep , s    n < 0 ? ' - ' : ' ' ;
var routing <CAM> controller = _ components <CAM> fxos <CAM> mvc <CAM> dist <CAM> mvc . routing <CAM> controller ; var main <CAM> view:==:_ js <CAM> view <CAM> main <CAM> view [ ' default ' ] ;
var target <CAM> touches = this . create <CAM> touch <CAM> list ( options . target <CAM> touches , target ) ; var changed <CAM> touches:==:this . create <CAM> touch <CAM> list ( options . changed <CAM> touches , target ) ;
var create <CAM> statement <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> statement <CAM> list ; var create <CAM> assignment <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> statement ;
var row <CAM> start <CAM> index = _ ref6 . row <CAM> start <CAM> index ; var row <CAM> stop <CAM> index:==:_ ref6 . row <CAM> stop <CAM> index ;
var pose = controller . pose ; var controller <CAM> quaternion:==:this . controller <CAM> quaternion ;
var tick = ticks [ i ] var x:==:tick . x
var geocoder = viewer . _ geocoder ; var home <CAM> button:==:viewer . _ home <CAM> button ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ; var g:==:new Dygraph ( graph , data1 , opts ) ;
var status = data . status ; var node <CAM> stats:==:data . node <CAM> stats ;
var Plugin = imports . Plugin ; var pubsub:==:imports . pubsub ;
var min = idx . min ( ) ; var max:==:idx . max ( ) ;
var row = range . start . row ; var session:==:this . session ;
var babel = require ( ' babel - core ' ) ; var transform:==:require ( ' es3ify ' ) . transform ;
var notify = require ( ' gulp - notify ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var scroll <CAM> to <CAM> column = _ state . scroll <CAM> to <CAM> column ; var scroll <CAM> to <CAM> row:==:_ state . scroll <CAM> to <CAM> row ;
var member = members [ m ] ; var size:==:size <CAM> of ( member . type ) ;
var fs = require ( ' fs ' ) ; var git:==:require ( ' gulp - git ' ) ;
var brush <CAM> option = cover . _ _ brush <CAM> option ; var range:==:zr <CAM> util . clone ( brush <CAM> option . range ) ;
var array = $ ( this ) . attr ( ' array ' ) ; var pos:==:$ ( this ) . attr ( ' pos ' ) ;
var old <UND> pass = validator . trim ( req . body . old <UND> pass ) ; var new <UND> pass:==:validator . trim ( req . body . new <UND> pass ) ;
var collapsed = options . collapsed ; var predicate:==:options . predicate ;
var step = step <CAM> result . step ; var snippet:==:snippet <CAM> builder . build ( step ) ;
var text <CAM> measurement <CAM> service = powerbi . text <CAM> measurement <CAM> service ; var label <CAM> text <CAM> properties:==:powerbi . visuals . data <CAM> label <CAM> utils . label <CAM> text <CAM> properties ;
var i = this . injector <CAM> strategy ; var p:==:i . proto <CAM> strategy ;
var subscriber = _ ref . subscriber ; var window:==:_ ref . window ;
var srs <CAM> name = context [ ' srs <CAM> name ' ] ; var hasZ:==:context [ ' hasZ ' ] ;
var target = $ ( event . target ) ; var btn:==:target . closest ( ' a . sys - icon - btn ' ) ;
var listener = listener <CAM> obj . listener ; var bind <CAM> to:==:listener <CAM> obj . bind <CAM> to  |  |  listener <CAM> obj . target ;
var include <CAM> spinner = this . include <CAM> spinner ; var include <CAM> bar:==:this . include <CAM> bar ;
var json = path . join ( dir , ' meta . json ' ) var js:==:path . join ( dir , ' meta . js ' )
var observable = this . transform <CAM> any ( tree . observable ) ; var body:==:this . transform <CAM> to <CAM> block <CAM> or <CAM> statement ( tree . body ) ;
var weight = edge . data . weightvar color:==:edge . data . color
var view   = camera . view  |  |  identityvar projection:==:camera . projection  |  |  identity
var _ df = 53 ; values [ _ df ] = _ df ; var _ dg:==:54 ; values [ _ dg ]    _ dg ;
var panels = imports . panels ; var util:==:imports . util ;
var Lexer = core <CAM> parser . Lexer ; var Parser:==:core <CAM> parser . Parser ;
var apps <CAM> service = _ app <CAM> js <CAM> services <CAM> apps <CAM> service [ ' default ' ] ; var url <CAM> service:==:_ app <CAM> js <CAM> services <CAM> url <CAM> service [ ' default ' ] ;
var rel = ' rel ' ; var spacing:==:' spacing ' ;
var $ button = event . data . $ button ; var button:==:event . data . button ;
var options = _ options  |  | var output <CAM> dir:==:options . output <CAM> dir  |  |  process . cwd ( )
var layer = selection . select <CAM> all ( ' . layer - hit ' ) ; var mode:==:context . mode ( ) ;
var function <CAM> declaration = traceur . syntax . trees . function <CAM> declaration ; var parse <CAM> tree <CAM> factory:==:traceur . codegeneration . parse <CAM> tree <CAM> factory ;
var scopes = this . scopes ; var scope:==:scopes . pop ( ) ;
var fs = require ( ' fs ' ) var chai:==:require ( ' chai ' )
var method = default <CAM> value ( options . method , ' GET ' ) ; var data:==:options . data ;
var apps <CAM> service = _ app <CAM> js <CAM> services <CAM> apps <CAM> service [ ' default ' ] ; var broadcast <CAM> service:==:_ app <CAM> js <CAM> services <CAM> broadcast <CAM> service [ ' default ' ] ;
var parse = property <CAM> types . selector . parse ; var stringify:==:property <CAM> types . selector . stringify ;
var backdrop = new Animation ( ele . query <CAM> selector ( ' ion - backdrop ' ) ) ; var wrapper:==:new Animation ( ele . query <CAM> selector ( ' . alert - wrapper ' ) ) ;
var path = require ( ' path ' ) ; var less:==:require ( ' less ' ) ;
var o = opts ! = null ? opts : ; var raw:==:o . raw ;
var merge = require ( ' gulp - merge ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var fill <CAM> dropdown = util . fill <CAM> dropdown ; var bind <CAM> checkbox:==:util . bind <CAM> checkbox ;
var passport = require ( ' passport ' ) ; var nconf:==:require ( ' nconf ' ) ;
var value = event . detail . value ; var filtered <CAM> keys:==:this . _ filtered <CAM> keys ;
var method = ctx . method ; var req:==:ctx . req ;
var video = document . query <CAM> selector ( ' video ' ) ; var canvas:==:window . canvas    document . query <CAM> selector ( ' canvas ' ) ;
var replicaset <CAM> name = options . replicaset <CAM> name  |  |  ' rs ' ; var write <CAM> concern:==:options . write <CAM> concern  |  |  w : 1 ;
var scroll <CAM> top = win . pagey <CAM> offset  |  |  ele . scroll <CAM> top ; var scroll <CAM> left:==:win . pagex <CAM> offset  |  |  ele . scroll <CAM> left ;
var Controller = _ fxos <CAM> mvc <CAM> dist <CAM> mvc . Controller ; var App:==:_ app <CAM> js <CAM> models <CAM> app [ ' default ' ] ;
var integration = require ( ' analytics . js - integration ' ) ; var foldl:==:require ( ' foldl ' ) ;
var panel <CAM> with <CAM> sidebar = declare <CAM> interface <CAM> class ( panel <CAM> with <CAM> sidebar <CAM> impl ) ; var Request:==:declare <CAM> interface <CAM> class ( request <CAM> impl ) ;
var active = active <CAM> element ( ) ; var wrapper:==:this . wrapper ;
var key = ' key ' in opts ? opts . key : false ; var descending:==:' descending ' in opts & & opts . descending ? ' prev ' : null ;
var editor = this . editor ; var renderer:==:editor . renderer ;
var moment = require ( ' moment ' ) ; var util:==:require ( ' hexo - util ' ) ;
var a = new String ( ' efgh ' ) ; a [ 11 ] = 11 ; var a:==:new uint8 <CAM> array ( [ 1 , 2 , 3 , 4 ] ) ;
var QUX = doc <CAM> set . get <CAM> by <CAM> longname ( ' QUX ' ) [ 0 ] ; var SOCKET:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' SOCKET ' ) [ 0 ] ;
var dom = this . dom ; var ctx:==:this . ctx ;
var f8 <CAM> colors = require ( ' f8 <CAM> colors ' ) ; var Image:==:require ( ' Image ' ) ;
var body = message . body ; var uid:==:body . uid ;
var zmin = options . zmin  |  |  -1 . 0 ; var xmax:==:options . xmax  |  |  1 . 0 ;
var store = new datastore ( tests . data . read <CAM> only <CAM> item <CAM> file <CAM> test <CAM> templates . get <CAM> test <CAM> data ( ' countries <UND> withoutid ' ) ) ; var d:==:new doh . Deferred ( ) ;
var create <CAM> make <CAM> node <CAM> function = util . create <CAM> make <CAM> node <CAM> function ; var simplify:==:typed ( ' simplify ' ,
var default <CAM> to = leaflet <CAM> helpers . default <CAM> to ; var marker <CAM> cluster <CAM> plugin:==:leaflet <CAM> helpers . marker <CAM> cluster <CAM> plugin ;
var tab = object . tab . n ; var def:==:object . def ;
var custom = point . custom  |  |  ; var model:==:point . _ model ;
var key = validator . trim ( req . query . key ) ; var name:==:validator . trim ( req . query . name ) ;
var errors = require ( ' restify - errors ' ) ; var method <CAM> not <CAM> allowed <CAM> error:==:errors . method <CAM> not <CAM> allowed <CAM> error ;
var parameter <CAM> list = this . transform <CAM> any ( tree . parameter <CAM> list ) ; var type <CAM> annotation:==:this . transform <CAM> any ( tree . type <CAM> annotation ) ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var tab <CAM> bar <CAM> itemios:==:require ( ' tab <CAM> bar <CAM> itemios ' ) ;
var i d = get <CAM> attr ( edge <CAM> dom , ' i d ' ) ; var label:==:get <CAM> attr ( edge <CAM> dom , ' label ' ) ;
var data = options . data ; var method:==:options . method  |  |  ' GET ' ;
var forward = command . search <CAM> args . forward ; var whole <CAM> word <CAM> only:==:command . search <CAM> args . whole <CAM> word <CAM> only ;
var storage <CAM> library = Windows . Storage . storage <CAM> library ; var known <CAM> library <CAM> id:==:Windows . Storage . known <CAM> library <CAM> id ;
var first <CAM> task <CAM> index = info . first <CAM> task <CAM> index ; var last <CAM> task <CAM> index:==:info . last <CAM> task <CAM> index ;
var node = nodes [ i ] ; var mock <CAM> contact:==:mock <CAM> contacts [ i ] ;
var   STORED = 14 ; var   COPY _:==:15 ;
var tty = require ( ' tty ' ) var path:==:require ( ' path ' )
var dx = e . detail . relative . dx ; var dy:==:e . detail . relative . dy ;
var b = Number ( reg <CAM> exp <CAM> result <CAM> array [ 3 ] ) ; var a:==:Number ( reg <CAM> exp <CAM> result <CAM> array [ 4 ] ) ;
var border <CAM> widths = options . border <CAM> widths  |  |  [ ] var border <CAM> colors:==:options . border <CAM> colors  |  |  [ ]
var path = paths [ 0 ] ; var name:==:Path . basename ( path ) ;
var data <CAM> view <CAM> transform = powerbi . data . data <CAM> view <CAM> transform ; var sq <CAM> expr <CAM> builder:==:powerbi . data . sq <CAM> expr <CAM> builder ;
var app = apps [ i ] var img:==:span . child <CAM> nodes [ i ]  |  |  span . append <CAM> child ( document . create <CAM> element ( ' img ' ) )
var tkey = $ ( this ) . attr ( ' tkey ' ) ; var tname:==:$ ( this ) . attr ( ' tname ' ) ;
var te = elt ( ' textarea ' , null , null , ' position : absolute ; padding : 0 ; width : 1px ; height : 1em ; outline : none ' ) ; var div:==:elt ( ' div ' , [ te ] , null , ' overflow : hidden ; position : relative ; width : 3px ; height : 0px ; ' ) ;
var pwd = options . pwd  |  |  '' ; var app <CAM> name:==:this . context . app <CAM> name ;
var page <CAM> info = ret . page <CAM> info ; var comments:==:ret . comments ;
var g = parse <CAM> int ( rgb [ 1 ] , 10 ) . to <CAM> string ( 16 ) ; var b:==:parse <CAM> int ( rgb [ 2 ] , 10 ) . to <CAM> string ( 16 ) ;
var indigoA100 = exports . indigoA100 = ' # 8c9eff ' ; var indigoA200:==:exports . indigoA200    ' # 536dfe ' ;
var pos = this . position ; var bounds:==:this . game . physics . arcade . bounds ;
var waitid = typeof waitid = = ' undefined '  |  |  waitid = = = null ? showid : ( waitid ! = = '' ? waitid : '' ) ; var showidclass:==:! showidclass ? '' : showidclass ;
var y = ( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) + ( vector . z * transformation . m [ 9 ] ) ; var z:==:( vector . x * transformation . m [ 2 ] ) + ( vector . y * transformation . m [ 6 ] ) + ( vector . z * transformation . m [ 10 ] ) ;
var decode <CAM> addends = this . decode <CAM> addends ; var decode <CAM> coefficients:==:this . decode <CAM> coefficients ;
var del = require ( ' del ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var channel <CAM> request = goog . labs . net . web <CAM> channel . channel <CAM> request ; var request <CAM> stats:==:goog . labs . net . web <CAM> channel . request <CAM> stats ;
var parse = property <CAM> types . boolean . parse ; var stringify:==:property <CAM> types . boolean . stringify ;
var bind <CAM> to <CAM> adapter = document . get <CAM> element <CAM> by <CAM> id ( ' bind <CAM> to <CAM> adapter ' ) . checked ; var inbound <CAM> buffer <CAM> size:==:document . get <CAM> element <CAM> by <CAM> id ( ' inbound <CAM> buffer <CAM> size ' ) . value ;
var path = require ( ' path ' ) ; var semver:==:require ( ' semver ' ) ;
var document = win . document ; var div:==:document . create <CAM> element ( ' div ' ) ;
var MONGODB <UND> NEW = nconf . get ( ' MONGODB <UND> NEW ' ) ; var mongo <CAM> client:==:MongoDB . mongo <CAM> client ;
var fill <CAM> color = data . fill <CAM> color  |  0 ; var line <CAM> color:==:data . line <CAM> color  |  0 ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var f8 <CAM> touchable:==:require ( ' f8 <CAM> touchable ' ) ;
var sum32 <UND> 4 = utils . sum32 <UND> 4 ; var block <CAM> hash:==:hash . common . block <CAM> hash ;
var create <CAM> react <CAM> native <CAM> component <CAM> class = require ( ' create <CAM> react <CAM> native <CAM> component <CAM> class ' ) ; var react <CAM> native <CAM> view <CAM> attributes:==:require ( ' react <CAM> native <CAM> view <CAM> attributes ' ) ;
var node = e . node ; var name:==:node . name ;
var load = loader . get <CAM> module <CAM> load ( ' package . json!npm ' ) ; var source:==:load . source ;
var TEST = ! ! options . TEST ; var E2E:==:! ! options . E2E ;
var natural <CAM> height = precomputed <CAM> features ? precomputed <CAM> features . natural <CAM> height : image <CAM> element . natural <CAM> height ; var offset <CAM> width:==:precomputed <CAM> features ? precomputed <CAM> features . offset <CAM> width : natural <CAM> width ;
var async <CAM> state = traceur . codegeneration . generator . async <CAM> state ; var end <CAM> state:==:traceur . codegeneration . generator . end <CAM> state ;
var line <CAM> number = parse <CAM> int ( line <CAM> numbers [ i ] , 10 ) ; var column <CAM> number:==:parse <CAM> int ( column <CAM> numbers [ j ] , 10 ) ;
var base <CAM> themes = data . base <CAM> themes ; var core <CAM> tpls:==:data . core <CAM> tpls ;
var pid = req . params . pid ; var vfsid:==:req . params . vfsid ;
var plugins = Chart . plugins ; var platform:==:Chart . platform ;
var max = this . max ; var min:==:this . min ;
var to = doc <CAM> set . get <CAM> by <CAM> longname ( ' Message~headers . to ' ) ; var from:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' Message~headers . from ' ) ;
var bump   = require ( ' gulp - bump ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var hash = context . hash ; var min <CAM> length:==:parse <CAM> int ( hash . min <CAM> length , 10 ) ;
var diameter <CAM> top = ( options . diameter <CAM> top = = = 0 ) ? 0 : options . diameter <CAM> top  |  |  options . diameter  |  |  1 ; var diameter <CAM> bottom:==:options . diameter <CAM> bottom  |  |  options . diameter  |  |  1 ;
var grid <CAM> class <CAM> name = _ props . grid <CAM> class <CAM> name ; var grid <CAM> style:==:_ props . grid <CAM> style ;
var cross <CAM> origin = get <CAM> cross <CAM> origin ( this . cross <CAM> origin ) ; var url:==:cross <CAM> origin ? this . cross <CAM> origin <CAM> url : this . url ;
var drop <CAM> down = the <CAM> scope . drop <CAM> down ; var multi <CAM> select:==:the <CAM> scope . multi <CAM> select ;
var react <CAM> input <CAM> selection = require ( ' react <CAM> input <CAM> selection ' ) ; var react <CAM> instrumentation:==:require ( ' react <CAM> instrumentation ' ) ;
var to <CAM> array = exports . to <CAM> array = function ( obj ) var len:==:obj . length
var range = math . range ; var pow:==:math . pow ;
var fs = require ( ' graceful - fs ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var set <CAM> focus <CAM> outside <CAM> of <CAM> table = window . set <CAM> focus <CAM> outside <CAM> of <CAM> table ; var fake <CAM> group <CAM> row:==:window . fake <CAM> group <CAM> row ;
var start = me . _ start ; var view:==:me . _ view ;
var scheduler = this . scheduler ; var actions:==:scheduler . actions ;
var entity <CAM> aspect = context . entity <CAM> aspect ; var entity <CAM> manager:==:entity <CAM> aspect . entity <CAM> manager ;
var React = require ( ' React ' ) ; var Image:==:require ( ' Image ' ) ;
var scrollpane = ui . find ( ' > . scrollpane ' ) ; var actions:==:scrollpane . find ( ' > . test - actions ' ) ;
var KIND <UND> HIDDEN = module . exports . KIND <UND> HIDDEN = ' hidden ' ; var KIND <UND> DEFAULT:==:module . exports . KIND <UND> DEFAULT    undefined ;
var util = require ( ' util ' ) var Readable:==:require ( ' readable - stream ' ) . Readable
var head = document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' head ' ) [ 0 ] ; var s:==:document . create <CAM> element ( ' script ' ) ;
var find <CAM> locale <CAM> id = closurei18n <CAM> extractor . find <CAM> locale <CAM> id ; var extract <CAM> number <CAM> symbols:==:closurei18n <CAM> extractor . extract <CAM> number <CAM> symbols ;
var scrollX = ( ( typeof window . scrollX ! = = ' undefined ' ) ? window . scrollX : window . pagex <CAM> offset ) ; var scrollY:==:( ( typeof window . scrollY !    ' undefined ' ) ? window . scrollY : window . pagey <CAM> offset ) ;
var c = ast . condition . visit ( this ) ; var t:==:ast . true <CAM> exp . visit ( this ) ;
var has <CAM> short <CAM> cmap = ! ! cmap <CAM> table . has <CAM> short <CAM> cmap ; var to <CAM> font <CAM> char:==:this . to <CAM> font <CAM> char ;
var context <CAM> object = overlay . data ( ' context <CAM> object ' ) ; var border:==:instance . g . get <CAM> by <CAM> id ( context <CAM> object . i d + ' _ border ' ) ;
var projection <CAM> view = this . projection <CAM> view ; var inverse <CAM> projection <CAM> view:==:this . inverse <CAM> projection <CAM> view ;
var now = require ( ' performance - now ' ) var Buffer:==:require ( ' safe - buffer ' ) . Buffer
var c9 = imports . c9 ; var members <CAM> panel:==:imports . members <CAM> panel ;
var props = ref . props ; var children:==:ref . children ;
var name = name <CAM> list [ i ]  |  |  '' ; var i d:==:data <CAM> item & & data <CAM> item . i d ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ rand:==:Module [ ' _ rand ' ]    asm [ ' _ rand ' ] ;
var argument <CAM> list = traceur . syntax . trees . argument <CAM> list ; var array <CAM> literal <CAM> expression:==:traceur . syntax . trees . array <CAM> literal <CAM> expression ;
var tip <CAM> label = options . tip <CAM> label ? options . tip <CAM> label : ' Reset rotation ' ; var button:==:document . create <CAM> element ( ' button ' ) ;
var Header = require ( ' Header ' ) ; var header <CAM> with <CAM> github:==:require ( ' header <CAM> with <CAM> github ' ) ;
var blog <CAM> post <CAM> footer = require ( ' blog <CAM> post <CAM> footer ' ) ; var excerpt <CAM> link:==:require ( ' excerpt <CAM> link ' ) ;
var num = btn . data ( ' num ' ) ; var loot <CAM> buttons:==:$ ( ' # loot <CAM> buttons ' ) ;
var get <CAM> end = function get <CAM> end ( item ) var end:==:item . data . end !   undefined ? item . data . end : item . data . start ;
var script = scripts [ i ] ; var src:==:script . src  |  |  script . get <CAM> attribute ( ' src ' ) ;
var morph = model . morphs [ i ] ; var elements:==:morph . elements ;
var parent = last <CAM> node . parent ; var editor:==:last <CAM> node . editor ;
var ops = require ( ' ndarray - ops ' ) ; var tinycolor:==:require ( ' tinycolor2 ' ) ;
var should = require ( ' should ' ) ; var moment:==:require ( ' moment ' ) ;
var c = pp . current ; var p:==:pp . get <CAM> as <CAM> current <CAM> point ( ) ;
var f = this . _ f  |  0var g:==:this . _ g  |  0
var s = wb . sheet <CAM> names [ idx ] , ws = wb . Sheets [ s ]  |  |  ; var r:==:safe <UND> decode <UND> range ( ws [ ' ! ref ' ]  |  |  ' A1 ' ) ;
var express   = require ( ' express ' ) var fs:==:require ( ' fs ' )
var axis <CAM> index = series <CAM> model . get ( dim <CAM> names . axis <CAM> index ) ; var axis <CAM> id:==:series <CAM> model . get ( dim <CAM> names . axis <CAM> id ) ;
var create <CAM> binding <CAM> identifier = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> binding <CAM> identifier ; var options:==:traceur . options . parse ;
var create <CAM> enum <CAM> type = powerbi . create <CAM> enum <CAM> type ; var data <CAM> view <CAM> objects:==:powerbi . data <CAM> view <CAM> objects ;
var tab = tabs . focussed <CAM> tab & & tabs . focussed <CAM> tab ; var editor:==:tab & & tab . editor ;
var inner <CAM> type = this . _ inner <CAM> type ; var values:==:this . _ values ;
var receiver = ctx . receiver ; var value:==:ctx . value ;
var removed = collection . _ removed <CAM> entities ; var changed:==:collection . _ changed <CAM> entities ;
var path = require ( ' path ' ) var osenv:==:require ( ' osenv ' )
var isXML = Sizzle . isXML = function ( elem ) var document <CAM> element:==:elem & & ( elem . owner <CAM> document  |  |  elem ) . document <CAM> element ;
var axon    = require ( ' pm2-axon ' ) ; var sock:==:axon . socket ( ' sub ' ) ;
var corner = choice . corner ; var pos:==:choice . pos ;
var cast <CAM> shadows = shadow <CAM> mode . cast <CAM> shadows ( primitive . shadows ) ; var receive <CAM> shadows:==:shadow <CAM> mode . receive <CAM> shadows ( primitive . shadows ) ;
var error = new Error ( ' some error ' ) ; var operation:==:retry . operation ( retries : 3 , forever : true ) ;
var client = Nightscout . client ; var translate:==:client . translate ;
var data = this . data ; var bp:==:this . bp ;
var childs = this . parent . childs ; var index:==:childs . index <CAM> of ( this ) ;
var data <CAM> index = symbol <CAM> meta . data <CAM> index ; var item <CAM> model:==:symbol <CAM> meta . item <CAM> model ;
var app = req . app ; var user:==:undefsafe ( req , ' session . user ' )  |  |  ;
var validatedom <CAM> nesting = require ( ' validatedom <CAM> nesting ' ) ; var void <CAM> element <CAM> tags:==:require ( ' void <CAM> element <CAM> tags ' ) ;
var hash = _ props2 . hash ; var state:==:_ props2 . state ;
var streamify = require ( ' gulp - streamify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var pathname = this . pathname  |  |  '' ; var hash:==:this . hash  |  |  '' ;
var el = this . el ; var rotation:==:el . get <CAM> attribute ( ' rotation ' ) ;
var closure = require ( ' closure - util ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var sf <CAM> field = sf <CAM> builder <CAM> provider . builders . sf <CAM> field ; var condition:==:sf <CAM> builder <CAM> provider . builders . condition ;
var tile <CAM> height = default <CAM> value ( options . tile <CAM> height , parse <CAM> int ( format . get <CAM> attribute ( ' height ' ) , 10 ) ) ; var minimum <CAM> level:==:default <CAM> value ( options . minimum <CAM> level , parse <CAM> int ( tilesets <CAM> list [ 0 ] . get <CAM> attribute ( ' order ' ) , 10 ) ) ;
var key = KEY <UND> MODS [ hash <CAM> id ] + key <CAM> string ; var command:==:this . command <CAM> key <CAM> binding [ key ] ;
var _ ka = 160 ; values [ _ ka ] = _ ka ; var _ kb:==:161 ; values [ _ kb ]    _ kb ;
var builtin <CAM> funcs = word <CAM> regexp ( builtin <CAM> funcs <CAM> words ) ; var builtin <CAM> objs:==:word <CAM> regexp ( builtin <CAM> objs <CAM> words ) ;
var protocol = require ( ' protocol ' ) ; var send:==:require ( ' send - json ' ) ;
var search <CAM> result = this . _ search <CAM> result ; var ui <CAM> source <CAM> code:==:search <CAM> result . ui <CAM> source <CAM> code ;
var label = conf . labelvar base:==:conf . base
var dynCall <UND> iiiiiiddi = Module [ ' dynCall <UND> iiiiiiddi ' ] = asm [ ' dynCall <UND> iiiiiiddi ' ] ; var dynCall <UND> viiiii:==:Module [ ' dynCall <UND> viiiii ' ]    asm [ ' dynCall <UND> viiiii ' ] ;
var registered <CAM> mesh = this . _ registered <CAM> meshes [ index ] ; var body:==:registered <CAM> mesh . body . body ;
var title = evt . detail . title  |  |  '' ; var elements:==:this . elements ;
var extension = function extension ( module , flnm ) var filename:==:flnm  |  |  module . filename ;
var containment <CAM> edges = this . containment <CAM> edges ; var edge <CAM> fields <CAM> count:==:this . _ edge <CAM> fields <CAM> count ;
var is <CAM> stop <CAM> included = options . is <CAM> stop <CAM> included ; var intervals:==:this . _ intervals ;
var x = c . x ; var y:==:c . y ;
var toolbar = this . toolbar ; var settings:==:this . settings ;
var token = options . token ; var line <CAM> number:==:options . line <CAM> number ;
var has = require ( ' has ' ) ; var hexadecimal:==:require ( ' is - hexadecimal ' ) ;
var domain = require ( ' domain ' ) ; var request:==:require ( ' request ' ) ;
var data = this . data ; var container:==:this . container ;
var dynCall <UND> iiiddddiii = Module [ ' dynCall <UND> iiiddddiii ' ] = asm [ ' dynCall <UND> iiiddddiii ' ] ; var dynCall <UND> viiiiiiiiiii:==:Module [ ' dynCall <UND> viiiiiiiiiii ' ]    asm [ ' dynCall <UND> viiiiiiiiiii ' ] ;
var ceil = create <CAM> round ( ' ceil ' ) ; var divide:==:create <CAM> math <CAM> operation ( function ( dividend , divisor )
var i d = goog . gears . fake <CAM> worker <CAM> pool _ . idCounter <UND> ++ ; var name:==:iframe <CAM> element . name    iframe <CAM> element . i d    ' fake - worker- ' + i d ;
var context = this . context _ ; var context <CAM> fill <CAM> state:==:this . context <CAM> fill <CAM> state _ ;
var child <CAM> node <CAM> interface = scope . child <CAM> node <CAM> interface ; var Node:==:scope . wrappers . Node ;
var transforms = ol . proj . transforms . cache _ ; var transform:==:transforms [ source <CAM> code ] [ destination <CAM> code ] ;
var line = get <CAM> line ( cm . view . doc , lineN ) ; var visual:==:visual <CAM> line ( cm . view . doc , line ) ;
var skew = interp ( fromM . skew , toM . skew , f ) ; var perspective:==:interp ( fromM . perspective , toM . perspective , f ) ;
var client <CAM> left = ele . client <CAM> left  |  |  body . client <CAM> left  |  |  0 ; var scroll <CAM> top:==:win . pagey <CAM> offset  |  |  ele . scroll <CAM> top ;
var ALETTER = ci . ALETTER ; var MIDNUMLET:==:ci . MIDNUMLET ;
var iso <CAM> adobe <CAM> charset = core <CAM> charsets . iso <CAM> adobe <CAM> charset ; var expert <CAM> charset:==:core <CAM> charsets . expert <CAM> charset ;
var video = document . query <CAM> selector ( ' video ' ) ; var constraints:==:window . constraints
var metadata = safe <CAM> json <CAM> parse ( item . metadata ) ; var i d:==:metadata . i d ;
var world <CAM> alpha = graphics . world <CAM> alpha ; var len:==:graphics . graphics <CAM> data . length ;
var hi = $ ( ' . say - hi ' ) ; var content:==:hi . find ( ' . content ' ) ;
var cos = spine . math <CAM> utils . cos <CAM> deg ( angle ) ; var sin:==:spine . math <CAM> utils . sin <CAM> deg ( angle ) ;
var pos = jumptodef . add <CAM> unknown <CAM> column ( ace , node . pos , node . name ) ; var display <CAM> pos:==:node . display <CAM> pos
var handlebars = require ( ' handlebars ' ) ; var reference:==:require ( ' reference ' ) ;
var is <CAM> scrolling = _ ref2 . is <CAM> scrolling ; var row <CAM> index:==:_ ref2 . row <CAM> index ;
var web <CAM> player = require ( ' web <CAM> player ' ) ; var snack <CAM> player:==:require ( ' snack <CAM> player ' ) ;
var spawn = require ( ' child <UND> process ' ) . spawnvar tmp:==:require ( ' tmp ' )
var dot <CAM> size <CAM> min = line <CAM> dot <CAM> chart . default <CAM> settings . dot <CAM> size <CAM> min ; var dot <CAM> size <CAM> max:==:line <CAM> dot <CAM> chart . default <CAM> settings . dot <CAM> size <CAM> max ;
var send = $ scope . send ; var recipient:==:send . recipient <UND> actual  |  |  send . recipient <UND> address ;
var Plugin = imports . Plugin ; var scm:==:imports . scm ;
var gzip = Promise . promisify ( zlib . gzip ) ; var get <CAM> credentials:==:Promise . promisify ( aws . config . get <CAM> credentials , context : aws . config ) ;
var top <CAM> radius = cylinder . top <CAM> radius ; var bottom <CAM> radius:==:cylinder . bottom <CAM> radius ;
var calendar <CAM> identifiers = Windows . Globalization . calendar <CAM> identifiers ; var clock <CAM> identifiers:==:Windows . Globalization . clock <CAM> identifiers ;
var el = elements [ x ] ; var parent:==:el . parent <CAM> node ;
var FOO = doc <CAM> set . get <CAM> by <CAM> longname ( ' FOO ' ) [ 0 ] ; var BAR:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' BAR ' ) [ 0 ] ;
var is <CAM> array = shared <CAM> util . is <CAM> array ; var is <CAM> num:==:shared <CAM> util . is <CAM> num ;
var language = i18n . language ( ) ; var _ plural:==:function _ plural ( input , number , form )
var util    = require ( ' util ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : action <CAM> method ' ) ;
var recognize <CAM> dates = defined ( context . recognize <CAM> dates , handler . recognize <CAM> dates ) ; var infer <CAM> json <CAM> light <CAM> feed <CAM> as <CAM> object:==:defined ( context . infer <CAM> json <CAM> light <CAM> feed <CAM> as <CAM> object , handler . infer <CAM> json <CAM> light <CAM> feed <CAM> as <CAM> object ) ;
var is <CAM> defined = leaflet <CAM> helpers . is <CAM> defined ; var defaults:==:leaflet <CAM> map <CAM> defaults . set <CAM> defaults ( scope . defaults , attrs . i d ) ;
var color <CAM> prop <CAM> type = require ( ' color <CAM> prop <CAM> type ' ) ; var shadow <CAM> prop <CAM> typesios:==:require ( ' shadow <CAM> prop <CAM> typesios ' ) ;
var colors    = require ( ' colors ' ) ; var child <UND> process:==:require ( ' child <UND> process ' ) ;
var is <CAM> list = util . is <CAM> listvar is <CAM> function:==:util . is <CAM> function
var expand <CAM> member <CAM> expression = traceur . codegeneration . expand <CAM> member <CAM> expression ; var expand <CAM> member <CAM> lookup <CAM> expression:==:traceur . codegeneration . expand <CAM> member <CAM> lookup <CAM> expression ;
var iq = $ iq ( type : ' set ' ) . c ( ' query ' , xmlns : ' jabber : iq : roster ' ) . c ( ' item ' , jid : jid , subscription : ' remove ' ) ; var suc:==:options . success  |  |  empty <CAM> fn ;
var l = $ ( target ) . offset ( ) . left+10 ; var t:==:$ ( target ) . offset ( ) . bottom-10 ;
var now = Date . now ( ) var start:==:opts . start  |  |  now
var line <CAM> width = params . line <CAM> width  |  |  1 ; var foldback:==:params . foldback  |  |  0 . 623 ;
var layers = this . _ layers ; var zlevel <CAM> list:==:this . _ zlevel <CAM> list ;
var component = components . get ( node ) ; var declared <CAM> prop <CAM> types:==:component & & component . declared <CAM> prop <CAM> types  |  |  ;
var add <CAM> class = exports . add <CAM> class = add <CAM> class <CAM> method ; var remove <CAM> class:==:exports . remove <CAM> class    remove <CAM> class <CAM> method ;
var chalk = require ( ' chalk ' ) ; var filesize:==:require ( ' filesize ' ) ;
var fragment = options . fragment ; var reload:==:options . reload ;
var theme = hexo . theme ; var i18n:==:theme . i18n ;
var crs = path . _ map . options . crs ; var transformation:==:crs . transformation ;
var Editor = imports . Editor ; var editors:==:imports . editors ;
var auth <UND> key <UND> id = deserializer . fetch <CAM> long ( ' auth <UND> key <UND> id ' ) var msg <UND> id:==:deserializer . fetch <CAM> long ( ' msg <UND> id ' )
var path = require ( ' path ' ) ; var concat:==:require ( ' concat - stream ' ) ;
var _ fc = 82 ; values [ _ fc ] = _ fc ; var _ fd:==:83 ; values [ _ fd ]    _ fd ;
var print <CAM> style = _ _ webpack <UND> require _ _ ( 29 ) . print <CAM> style ; var all <CAM> options:==:_ _ webpack <UND> require _ _ ( 49 ) . all <CAM> options ;
var parse <CAM> tree <CAM> type = traceur . syntax . trees . parse <CAM> tree <CAM> type ; var parse <CAM> tree <CAM> visitor:==:traceur . syntax . parse <CAM> tree <CAM> visitor ;
var git = require ( ' gulp - git ' ) ; var gulp:==:require ( ' gulp ' ) ;
var property <CAM> name <CAM> shorthand <CAM> transformer = traceur . codegeneration . property <CAM> name <CAM> shorthand <CAM> transformer ; var quasi <CAM> literal <CAM> transformer:==:traceur . codegeneration . quasi <CAM> literal <CAM> transformer ;
var design <CAM> unit = parse <CAM> float ( params . design <CAM> unit ) ; var column <CAM> count:==:parse <CAM> float ( params . column <CAM> count ) ;
var chain = require ( ' slide ' ) . chainvar async <CAM> map:==:require ( ' slide ' ) . async <CAM> map
var condition = this . transform <CAM> any ( tree . condition ) ; var increment:==:this . transform <CAM> any ( tree . increment ) ;
var indigoA400 = exports . indigoA400 = ' # 3d5afe ' ; var indigoA700:==:exports . indigoA700    ' # 304ffe ' ;
var x = x <CAM> anchor ; var y:==:y <CAM> anchor + ( i * height ) ;
var create <CAM> array <CAM> literal <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> array <CAM> literal <CAM> expression ; var create <CAM> assign <CAM> state <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> assign <CAM> state <CAM> statement ;
var s = this . search <CAM> text & & this . search <CAM> text . to <CAM> lower <CAM> case ( ) ; var f:==:$ . is <CAM> empty <CAM> object ( this . filter <CAM> columns ) ? null : this . filter <CAM> columns ;
var items = this . els . items ; var source:==:this . source ;
var section = document . create <CAM> element ( ' section ' ) ; var header:==:group . query <CAM> selector ( ' header ' ) ;
var assert = require ( ' assert ' ) ; var sql <CAM> string:==:common . sql <CAM> string ;
var utils = require ( ' keystone - utils ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : list : register ' ) ;
var dispatcher = scope . dispatcher ; var pointermap:==:dispatcher . pointermap ;
var use <CAM> colors = this . use <CAM> colors ; var name:==:this . namespace ;
var LINETYPE = Diagram . LINETYPE ; var ARROWTYPE:==:Diagram . ARROWTYPE ;
var script = bscript . fromASM ( f . script ) var address:==:baddress . from <CAM> output <CAM> script ( script , networks [ f . network ] )
var create <CAM> binary <CAM> operator = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> binary <CAM> operator ; var create <CAM> call <CAM> expression:==:traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ;
var merge = require ( ' utils - merge ' ) ; var resolve:==:require ( ' path ' ) . resolve ;
var start <CAM> count = start <CAM> count <CAM> parser . parseu <CAM> short ( ) ; var id <CAM> delta:==:id <CAM> delta <CAM> parser . parse <CAM> short ( ) ;
var login = document . get <CAM> element <CAM> by <CAM> id ( ' login ' ) ; var output:==:document . get <CAM> element <CAM> by <CAM> id ( ' output ' ) ;
var LIST <UND> TYPE = firepad . line <CAM> formatting . LIST <UND> TYPE ; var code <CAM> mirror:==:global . code <CAM> mirror ;
var x = default <CAM> value ( query <CAM> numeric <CAM> value ( icon <CAM> node , ' x ' , namespaces . gx ) , 0 ) ; var y:==:default <CAM> value ( query <CAM> numeric <CAM> value ( icon <CAM> node , ' y ' , namespaces . gx ) , 0 ) ;
var c = chars [ i ] ; var index:==:lower . index <CAM> of ( c , last <CAM> index+1 ) ;
var missspelling = ' missspelling ' ; var iggnore:==:' iggnore ' ;
var Types = keystone . Field . Types ; var cloudinary <CAM> image:==:new keystone . List ( ' cloudinary <CAM> image ' ,
var ui <CAM> event = register <CAM> generic <CAM> event ( ' ui <CAM> event ' , Event ) ; var custom <CAM> event:==:register <CAM> generic <CAM> event ( ' custom <CAM> event ' , Event ) ;
var set <CAM> timeout = window . set <CAM> timeout . bind ( window ) ; var clear <CAM> timeout:==:window . clear <CAM> timeout . bind ( window ) ;
var path = storage . path = source . path ; var orient:==:storage . orient    source . orient ;
var wallet = profile <CAM> service . get <CAM> wallet ( $ state <CAM> params . wallet <CAM> id ) ; var wallet <CAM> id:==:wallet . credentials . wallet <CAM> id ;
var vertices = geometry2 . vertices ; var faces:==:geometry2 . faces ;
var Image = react <CAM> canvas . Image ; var Text:==:react <CAM> canvas . Text ;
var first = Math . min ( this . first <CAM> row , config . first <CAM> row ) ; var last:==:Math . max ( this . last <CAM> row , config . last <CAM> row , cells . length ) ;
var bl = require ( ' bl ' ) var xtend:==:require ( ' xtend ' )
var p = this . progress ( ) ; var from:==:svg . to <CAM> number <CAM> array ( p . from . value ) ;
var extend = require ( ' extend ' ) ; var ccount:==:require ( ' ccount ' ) ;
var e = end + 1 ; var s:==:start - 1 ;
var model   = params . model    |  |  identity <CAM> matrixvar view:==:params . view    |  |  identity <CAM> matrix
var should = require ( ' should ' ) ; var when:==:require ( ' when ' ) ;
var r = input . split ( ' \r ' ) ; var n:==:input . split ( ' \n ' ) ;
var thrower = foreign . thrower ; var debugme:==:foreign . debugme ;
var mode = this . mode ; var ng <CAM> model:==:this . ng <CAM> model ;
var dynCall <UND> vii = Module [ ' dynCall <UND> vii ' ] = asm [ ' dynCall <UND> vii ' ] ; var dynCall <UND> iii:==:Module [ ' dynCall <UND> iii ' ]    asm [ ' dynCall <UND> iii ' ] ;
var pins = io . pins . slice ( ) ; var length:==:pins . length ;
var start = availability . start ; var stop:==:availability . stop ;
var tab = ( aml . get <CAM> page ( )  |  |  ) . cloud9tab ; var dark:==:! tab  |  |  tab . class <CAM> list . names . index <CAM> of ( ' dark ' ) > -1 ;
var items <CAM> indom = this . _ items <CAM> indom ; var items:==:this . _ items ;
var uvs = sprite . _ uvs ; var rect:==:sprite <CAM> frame . _ rect ;
var arrow <CAM> head = Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' arrow <CAM> head ' , this . arrow <CAM> head ) ) ) ) ; var rounded:==:mx <CAM> utils . get <CAM> value ( this . style , ' rounded ' , ' 0 ' ) ;
var index = _ ref6 . index ; var offset:==:_ ref6 . offset ;
var c = fulfill <CAM> built <CAM> in <CAM> soon ( ' c ' , 10 ) ; var d:==:fulfill <CAM> built <CAM> in <CAM> soon ( ' d ' , 20 ) ;
var radius = this . handle . radius ; var center:==:this . center ;
var initial <CAM> name = dec <CAM> endpoint . initial <CAM> name ! = null ? dec <CAM> endpoint . initial <CAM> name : dec <CAM> endpoint . name ; var fetching:==:this . _ fetching [ initial <CAM> name ] ;
var framebuffer = pass <CAM> state . framebuffer ; var length:==:commands . length ;
var group <CAM> id = this . group <CAM> ids [ i ] ; var group:==:this . groups [ group <CAM> id ] ;
var fs = require ( ' fs ' ) ; var log:==:require ( ' some - async - logger ' ) ;
var is <CAM> string = _ _ webpack <UND> require _ _ ( 11 ) . is <CAM> string ; var format:==:_ _ webpack <UND> require _ _ ( 11 ) . format ;
var util = require ( ' util ' ) ; var EOL:==:require ( ' os ' ) . EOL ;
var _ dp = 63 ; values [ _ dp ] = _ dp ; var _ ea:==:64 ; values [ _ ea ]    _ ea ;
var st <CAM> rotation = polygon <CAM> geometry . _ st <CAM> rotation ; var height:==:polygon <CAM> geometry . _ height ;
var method = demo <CAM> sequence [ step ] . method ; var args:==:demo <CAM> sequence [ step ] . args ;
var key = options . key  |  |  options ; var padding:==:options . padding  |  |  default <CAM> padding ;
var east <CAM> west <CAM> normal = Cartesian3 . normalize ( west <CAM> vector , east <CAM> west <CAM> normal <CAM> scratch ) ; var south:==:rectangle . south ;
var visibility = this . find <CAM> effective <CAM> style <CAM> property ( element , ' visibility ' ) ; var _ is <CAM> displayed:==:this . _ is <CAM> displayed ( element ) ;
var imagery <CAM> provider = this . _ imagery <CAM> provider ; var rectangle:==:this . _ rectangle ;
var run <CAM> post <CAM> sets = Module [ ' run <CAM> post <CAM> sets ' ] = asm [ ' run <CAM> post <CAM> sets ' ] ; var dynCall <UND> ii:==:Module [ ' dynCall <UND> ii ' ]    asm [ ' dynCall <UND> ii ' ] ;
var repulsion = force <CAM> model . get ( ' repulsion ' ) ; var edge <CAM> length:==:force <CAM> model . get ( ' edge <CAM> length ' ) ;
var transform = element . get <CAM> attribute ( ' transform ' ) ; var r:==:transform & & transform . match ( Blockly . utils . get <CAM> relativexy . XY <UND> REGEX _ ) ;
var React = require ( ' React ' ) ; var unindent:==:require ( ' unindent ' ) ;
var noise = p5 . prototype . noise ; var noise <CAM> seed:==:p5 . prototype . noise <CAM> seed ;
var flags = scope . flags ; var isIE:==:scope . isIE ;
var filter = require ( ' gulp - filter ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var render <CAM> overlay = t . render <CAM> overlay ; var clear <CAM> overlays:==:t . clear <CAM> overlays ;
var next = changes . next ; var length:==:text . length ;
var expires = Number ( token <CAM> data . expires ) ; var token <UND> ts:==:token <CAM> data . token <UND> ts ;
var store = new datastore ( tests . data . read <CAM> only <CAM> item <CAM> file <CAM> test <CAM> templates . get <CAM> test <CAM> data ( ' countries <UND> withNull ' ) ) ; var d:==:new doh . Deferred ( ) ;
var intersected <CAM> el = this . intersected <CAM> el ; var intersection:==:this . intersection ;
var crypto = require ( ' crypto ' ) ; var big <CAM> integer:==:require ( ' jsbn ' ) . big <CAM> integer ;
var settings   = this . settings ; var toolbar <CAM> handlers:==:editormd . toolbar <CAM> handlers ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ; var g:==:new Dygraph ( graph , simple <CAM> data , ) ;
var char <CAM> spacing = current . char <CAM> spacing ; var word <CAM> spacing:==:current . word <CAM> spacing ;
var data <CAM> key = _ column$props . data <CAM> key ; var cell <CAM> data:==:cell <CAM> data <CAM> getter ( column <CAM> data : column <CAM> data , data <CAM> key : data <CAM> key , row <CAM> data : row <CAM> data ) ;
var configure = imports . configure ; var settings:==:imports . settings ;
var container = this . container ; var canvas:==:this . canvas ;
var foo = function foo ( ) ; var foo:==:async function foo ( ) ;
var anchor = options . anchor ; var force <CAM> function:==:options . force <CAM> function ;
var moz <CAM> contacts = navigator . moz <CAM> contacts ; var handler:==:function handler ( event )
var url = require ( ' url ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var p2 = $ ( ' p2 ' ) ; var test <CAM> el2:==:$ ( ' test <CAM> el2 ' ) ;
var destination = this . destination ; var window <CAM> size:==:this . window <CAM> size ;
var box = this . dom . box ; var line:==:this . dom . line ;
var position = camera3D . position ; var direction:==:camera3D . direction ;
var version = _ ref . version ; var prefix:==:_ ref . prefix ;
var client <CAM> width = line <CAM> space . client <CAM> width  |  |  line <CAM> space . offset <CAM> width ; var client <CAM> height:==:line <CAM> space . client <CAM> height  |  |  line <CAM> space . offset <CAM> height ;
var a = aabb1 . elements ; var b:==:aabb2 . elements ;
var ssri = require ( ' ssri ' ) ; var fs:==:require ( ' fs ' ) ;
var g = this . rgb . g ; var b:==:this . rgb . b ;
var width = texture . width ; var height:==:texture . height ;
var screen <CAM> box = plot . screen <CAM> boxvar data <CAM> box:==:plot . data <CAM> box
var watcher = imports . watcher ; var commands:==:imports . commands ;
var email = identify . email ( ) ; var phone:==:identify . phone ( ) ;
var find <CAM> in <CAM> function <CAM> scope = traceur . codegeneration . find <CAM> in <CAM> function <CAM> scope ; var function <CAM> declaration:==:traceur . syntax . trees . function <CAM> declaration ;
var custom <CAM> validators = configuration . custom <CAM> validators  |  |  [ ] ; var skip <CAM> undeclared:==:configuration . skip <CAM> undeclared  |  |  false ;
var cell <CAM> style = props . cell <CAM> style ; var column <CAM> count:==:props . column <CAM> count ;
var color = option . color |  | null ; var fps:==:option . fps ;
var x = x0 ; var y:==:y0 ;
var c = new Tracker . Dependency ; var d:==:new Tracker . Dependency ;
var dx = Math . max ( 0 , Math . min ( bounds . width , mx <CAM> utils . get <CAM> value ( this . state . style , ' dx ' , corner <CAM> shape . prototype . dx ) ) ) ; var dy:==:Math . max ( 0 , Math . min ( bounds . height , mx <CAM> utils . get <CAM> value ( this . state . style , ' dy ' , corner <CAM> shape . prototype . dy ) ) ) ;
var assignment <CAM> node = math . expression . node . assignment <CAM> node ; var symbol <CAM> node:==:math . expression . node . symbol <CAM> node ;
var menu <CAM> item = imports . menu <CAM> item ; var tabbehavior:==:imports . tabbehavior ;
var IDENTITY <UND> MATRIX = shared <CAM> util . IDENTITY <UND> MATRIX ; var image <CAM> kind:==:shared <CAM> util . image <CAM> kind ;
var coverage = ' coverage ' in conf ? conf . coverage : false ; var reporter:==:' reporter ' in conf ? conf . reporter : ' spec ' ;
var entity = this . _ entity ; var is <CAM> available:==:entity . is <CAM> available ( time ) ;
var easing = EASING <UND> FUNCTIONS [ data . easing ] ; var fill:==:data . fill ;
var time <CAM> window <CAM> left = this . _ time <CAM> window <CAM> left - this . _ padding <CAM> left <CAM> time ; var entry <CAM> total <CAM> times:==:timeline <CAM> data . entry <CAM> total <CAM> times ;
var indigo900 = exports . indigo900 = ' # 1a237e ' ; var indigoA100:==:exports . indigoA100    ' # 8c9eff ' ;
var Axes = plotly <CAM> internal . Axes ; var d3:==:require ( ' d3 ' ) ;
var ciphertext = cipher <CAM> params . ciphertext ; var salt:==:cipher <CAM> params . salt ;
var p2 = [ cp2x , cp2y ] ; var p3:==:[ p3x , p3y ] ;
var target <CAM> size = test <CAM> file . target <CAM> size ; var target <CAM> crop:==:test <CAM> file . target <CAM> crop      undefined ? null :
var done = options . done ; var filter:==:options . filter ;
var is <CAM> array = _ _ dependency1 _ _ . is <CAM> array ; var is <CAM> non <CAM> thenable:==:_ _ dependency1 _ _ . is <CAM> non <CAM> thenable ;
var focus <CAM> node = selection . focus <CAM> node ; var focus <CAM> offset:==:selection . focus <CAM> offset ;
var data = this . _ data ; var req:==:this . req ;
var focus <CAM> ripple <CAM> color = _ props3 . focus <CAM> ripple <CAM> color ; var focus <CAM> ripple <CAM> opacity:==:_ props3 . focus <CAM> ripple <CAM> opacity ;
var error = shared <CAM> util . error ; var log2:==:shared <CAM> util . log2 ;
var source = util . get <CAM> arg ( a <CAM> args , ' source ' , null ) ; var name:==:util . get <CAM> arg ( a <CAM> args , ' name ' , null ) ;
var name = this . transform <CAM> any ( tree . name ) ; var type <CAM> annotation:==:this . transform <CAM> any ( tree . type <CAM> annotation ) ;
var test = require ( ' tap ' ) . testvar readdir:==:require ( ' graceful - fs ' ) . readdir
var scroll <CAM> top = _ ref7 . scroll <CAM> top ; var on <CAM> scroll:==:this . props . on <CAM> scroll ;
var max = box <CAM> geometry . _ maximum ; var vertex <CAM> format:==:box <CAM> geometry . _ vertex <CAM> format ;
var inner <CAM> radius <CAM> of <CAM> arc = draw <CAM> options . inner <CAM> radius <CAM> of <CAM> arc ; var left:==:draw <CAM> options . left ;
var y = rrect <CAM> data . y ; var width:==:rrect <CAM> data . width ;
var user = req . uservar current:==:req . body . current <UND> password
var current = req . body . current <UND> passwordvar password:==:req . body . password
var path    = require ( ' path ' ) ; var join:==:require ( ' path ' ) . join ;
var parent <CAM> node = unwrap ( parent <CAM> node <CAM> wrapper ) ; var new <CAM> child:==:unwrap ( new <CAM> child <CAM> wrapper ) ;
var d = bn . from <CAM> bits ( h . to <CAM> bits ( vectors [ i ] . d ) ) ; var x:==:bn . from <CAM> bits ( h . to <CAM> bits ( vectors [ i ] . Qx ) ) ;
var models = _ _ alloy <CAM> id9 . models ; var len:==:models . length ;
var set <CAM> dog <CAM> name = doc <CAM> set . get <CAM> by <CAM> longname ( ' set <CAM> dog <CAM> name ' ) [ 0 ] ; var set <CAM> first <CAM> name:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' set <CAM> first <CAM> name ' ) [ 0 ] ;
var flat <CAM> coordinates = this . flat <CAM> coordinates ; var ends:==:this . ends _ ;
var Glob = require ( ' glob ' ) . Globvar fs:==:Promise . promisify <CAM> all ( require ( ' graceful - fs ' ) )
var set <CAM> attribute = proto . set <CAM> attribute ; var has:==:Object . prototype . has <CAM> own <CAM> property ;
var invalid <CAM> algorithm <CAM> error = errs . invalid <CAM> algorithm <CAM> error ; var signature <CAM> parse <CAM> error:==:errs . signature <CAM> parse <CAM> error ;
var matrix = math . matrix ; var range:==:math . range ;
var less = require ( ' gulp - less ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var options = self . options ; var canvas:==:self . canvas ;
var inquirer = require ( ' inquirer ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec <CAM> sync ;
var destination = this . destination ; var result <CAM> selector:==:this . result <CAM> selector ;
var fs = require ( ' fs ' ) ; var qs:==:require ( ' qs ' ) ;
var do <CAM> save = function do <CAM> save ( contact <CAM> data ) var moz <CAM> contacts:==:navigator . moz <CAM> contacts ;
var replay <CAM> group = this . replay <CAM> group _ ; var size:==:frame <CAM> state . size ;
var dom <CAM> lazy <CAM> tree = require ( ' dom <CAM> lazy <CAM> tree ' ) ; var Danger:==:require ( ' Danger ' ) ;
var summary = create <CAM> dom ( ' div ' , class <CAM> name : ' summary ' ) ; var results:==:find ( ' . results ' ) ;
var create <CAM> true <CAM> literal = parse <CAM> tree <CAM> factory . create <CAM> true <CAM> literal ; var create <CAM> use <CAM> strict <CAM> directive:==:parse <CAM> tree <CAM> factory . create <CAM> use <CAM> strict <CAM> directive ;
var frame <CAM> state = scene . frame <CAM> state ; var actual <CAM> position:==:scene <CAM> transforms . compute <CAM> actual <CAM> wgs84 <CAM> position ( frame <CAM> state , position , actual <CAM> position <CAM> scratch ) ;
var isstopped = line <CAM> dot <CAM> chart . default <CAM> settings . isstopped ; var duration:==:line <CAM> dot <CAM> chart . default <CAM> settings . duration ;
var angle = this . angle ; var phase:==:this . phase ;
var fs = require ( ' fs ' ) ; var through:==:require ( ' through2 ' ) ;
var t = height - pbottom . size <CAM> calculated ; var w:==:width ;
var jpx <CAM> stream = core <CAM> stream . jpx <CAM> stream ; var lzw <CAM> stream:==:core <CAM> stream . lzw <CAM> stream ;
var editor <CAM> button = document . get <CAM> element <CAM> by <CAM> id ( ' editor <CAM> button1600 ' ) ; var scene:==:engine . scenes [ 0 ] ;
var data <CAM> points = data . data <CAM> points ; var category <CAM> labels:==:data . category <CAM> labels ;
var Person = db . model ( ' gh2562 <UND> b0 ' , person <CAM> schema ) ; var Band:==:db . model ( ' gh2562 <UND> b1 ' , band <CAM> schema ) ;
var join = path <CAM> fn . join ; var sep:==:path <CAM> fn . sep ;
var key = EvpKDF . create ( key <CAM> size : key <CAM> size + iv <CAM> size ) . compute ( password , salt ) ; var iv:==:word <CAM> array . create ( key . words . slice ( key <CAM> size ) , iv <CAM> size * 4 ) ;
var lrz = require ( ' lrz ' ) ; var expect:==:chai . expect ;
var method = req . method ; var signature:==:req . query . msg <UND> signature ;
var integration = require ( ' analytics . js - integration ' ) ; var snake:==:require ( ' to - snake - case ' ) ;
var filename = add instanceof window . File ? add . name : add . filename ; var type:==:add instanceof window . File ? ' file ' : ( add . type  |  |  ' file ' ) ;
var inner <CAM> color = this . inner <CAM> colorvar outer <CAM> fill:==:this . outer <CAM> fill
var actual = path . join ( _ _ dirname , dir , ' actual . txt ' ) ; var expected:==:path . join ( _ _ dirname , dir , ' expected . txt ' ) ;
var _ kl = 171 ; values [ _ kl ] = _ kl ; var _ km:==:172 ; values [ _ km ]    _ km ;
var serialize = xhr <CAM> options . serialize = isJSONP ? identity : xhr <CAM> options . serialize  |  |  JSON . stringify ; var deserialize:==:xhr <CAM> options . deserialize    isJSONP ? identity : xhr <CAM> options . deserialize  |  |  JSON . parse ;
var o = other . attributes ; var distance:==:Trig . distance ( x , y , o . x , o . y ) ;
var ui = imports . ui ; var save:==:imports . save ;
var model = properties [ ' ro . product . model ' ] var brand:==:properties [ ' ro . product . brand ' ]
var config = utils . pkg . config ( packageJSON )  |  |  ; var plugins:==:config . plugins  |  |  [ ] ;
var util = require ( ' util ' ) ; var open:==:require ( ' biased - opener ' ) ;
var create <CAM> statement <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> statement <CAM> list ; var create <CAM> break <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> break <CAM> statement ;
var typescript = require ( ' gulp - typescript ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var a = foo : ' bar'var b:==:Object . create ( null )
var _ ro = 286 ; values [ _ ro ] = _ ro ; var _ rp:==:287 ; values [ _ rp ]    _ rp ;
var controller = options . controller ; var controller <CAM> as:==:options . controller <CAM> as ;
var get <CAM> async = request . get <CAM> async ; var post <CAM> async:==:request . post <CAM> async ;
var options = this . options ; var selected:==:$ ( this . el ) . data ( ' selected ' ) ;
var inherits = _ dereq _ ( ' inherits ' ) var string <CAM> decoder:==:_ dereq _ ( ' string <UND> decoder ' ) . string <CAM> decoder
var syrup = require ( ' stf - syrup ' ) var request:==:require ( ' request ' )
var before <CAM> first <CAM> paragraph = options . before <CAM> first <CAM> paragraph = = null ? before <CAM> paragraph : options . before <CAM> first <CAM> paragraph ; var after <CAM> last <CAM> paragraph:==:options . after <CAM> last <CAM> paragraph     null ? after <CAM> paragraph : options . after <CAM> last <CAM> paragraph ;
var green = options [ ' green ' ] ; var blue:==:options [ ' blue ' ] ;
var help02 = document . get <CAM> element <CAM> by <CAM> id ( ' help02 ' ) ; var loading <CAM> text:==:document . get <CAM> element <CAM> by <CAM> id ( ' loading <CAM> text ' ) ;
var height = image . height ; var left:==:crop <CAM> box . left - canvas . left - image . left ;
var container = parent [ 0 ] . query <CAM> selector ( ' . md - dialog - container ' ) ; var dialog:==:angular . element ( container ) . find ( ' md - dialog ' ) ;
var dynCall <UND> viiiddddi = Module [ ' dynCall <UND> viiiddddi ' ] = asm [ ' dynCall <UND> viiiddddi ' ] ; var dynCall <UND> iddddiii:==:Module [ ' dynCall <UND> iddddiii ' ]    asm [ ' dynCall <UND> iddddiii ' ] ;
var s = this . _ detach <CAM> view <CAM> in <CAM> container <CAM> scope ( ) ; var parent <CAM> view:==:view <UND> ref <UND> 1 . internal <CAM> view ( view <CAM> container <CAM> location . parent <CAM> view ) ;
var font <CAM> type = font <CAM> type  |  |  ' Helvetica ' ; var text <CAM> color <CAM> freq:==:text <CAM> color <CAM> freq  |  |  ' # fff ' ;
var stroke = default <CAM> value ( options . stroke , false ) ; var fill:==:default <CAM> value ( options . fill , true ) ;
var normal <CAM> symbol <CAM> draw = this . _ normal <CAM> symbol <CAM> draw ; var group:==:this . group ;
var offset = this . options . offset ; var fixed <CAM> top:==:this . options . fixed <CAM> top ;
var request = require ( ' request ' ) ; var express:==:require ( ' express ' ) ;
var max <CAM> iterations = retrieve ( options . max <CAM> iterations , 2 ) ; var min <CAM> char:==:retrieve ( options . min <CAM> char , 0 ) ;
var column <CAM> data = _ column$props . column <CAM> data ; var data <CAM> key:==:_ column$props . data <CAM> key ;
var grid = ignore <CAM> placement ? this . ignored <CAM> grid : this . grid ; var collision <CAM> box <CAM> array:==:this . collision <CAM> box <CAM> array ;
var l2 <UND> decay = this . l2 <UND> decay * l2 <UND> decay <UND> mul ; var l1 <UND> decay:==:this . l1 <UND> decay * l1 <UND> decay <UND> mul ;
var mixin = scope . mixin ; var nodes <CAM> were <CAM> added:==:scope . nodes <CAM> were <CAM> added ;
var editor   = this . editor ; var settings:==:this . settings ;
var secp256k1 = ecurve . get <CAM> curve <CAM> by <CAM> name ( ' secp256k1 ' ) var G:==:secp256k1 . G
var colors <CAM> per <CAM> vertex = simple <CAM> polyline <CAM> geometry . _ colors <CAM> per <CAM> vertex ; var follow <CAM> surface:==:simple <CAM> polyline <CAM> geometry . _ follow <CAM> surface ;
var _ og = 230 ; values [ _ og ] = _ og ; var _ oh:==:231 ; values [ _ oh ]    _ oh ;
var from <CAM> segment = from <CAM> segments [ i ] ; var to <CAM> segment:==:to <CAM> segments [ i ] ;
var amber100 = exports . amber100 = ' # ffecb3 ' ; var amber200:==:exports . amber200    ' # ffe082 ' ;
var order = $ scope . order [ type ] ; var first <UND> currency:==:$ scope . order . first <UND> currency  |  |  Currency . from <UND> json ( ' XRP ' ) ;
var offset = file <UND> ids [ file <UND> id ] . offset-1 ; var byte <CAM> array:==:file <UND> ids [ file <UND> id ] . byte <CAM> array ;
var scene = entity <CAM> cluster . _ scene ; var label <CAM> collection:==:entity <CAM> cluster . _ label <CAM> collection ;
var tessellation = options . tessellation  |  |  64 ; var updatable:==:options . updatable ;
var run <CAM> post <CAM> sets = Module [ ' run <CAM> post <CAM> sets ' ] = asm [ ' run <CAM> post <CAM> sets ' ] ; var dynCall <UND> iiiiiiii:==:Module [ ' dynCall <UND> iiiiiiii ' ]    asm [ ' dynCall <UND> iiiiiiii ' ] ;
var create <CAM> empty <CAM> parameter <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> empty <CAM> parameter <CAM> list ; var create <CAM> function <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> function <CAM> expression ;
var length = result . lengthvar rule:==:schema . rule
var module <CAM> transformer = traceur . codegeneration . module <CAM> transformer ; var object <CAM> literal <CAM> transformer:==:traceur . codegeneration . object <CAM> literal <CAM> transformer ;
var babel = require ( ' gulp - babel ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var fs:==:Promise . promisify <CAM> all ( require ( ' fs ' ) ) ;
var ux = window . app . ns ( ' ux ' ) ; var ut:==:window . app . ns ( ' ut ' ) ;
var e = new global . uint16 <CAM> array ( buffer ) ; var f:==:new global . uint32 <CAM> array ( buffer ) ;
var len = this . _ length ( ) ; var progress:==:this . _ progress ;
var readdir = require ( ' readdir - scoped - modules ' ) var debug:==:require ( ' debuglog ' ) ( ' rpt ' )
var react <CAM> server <CAM> rendering = require ( ' react <CAM> server <CAM> rendering ' ) ; var react <CAM> version:==:require ( ' react <CAM> version ' ) ;
var x = Symbol ( ' x ' ) ; var y:==:Symbol ( ' y ' ) ;
var visual <CAM> data <CAM> role <CAM> kind = powerbi . visual <CAM> data <CAM> role <CAM> kind ; var data <CAM> label <CAM> utils:==:powerbi . visuals . data <CAM> label <CAM> utils ;
var nodes = this . nodes ; var first <CAM> retainer <CAM> index:==:this . _ first <CAM> retainer <CAM> index ;
var head = el . query <CAM> selector ( ' gui - list - view - head ' ) ; var body:==:el . query <CAM> selector ( ' gui - list - view - body ' ) ;
var apf = imports . apf ; var tab <CAM> manager:==:imports . tab <CAM> manager ;
var muk = require ( ' muk ' ) ; var thinkit:==:require ( ' thinkit ' ) ;
var B = Backbone . Model . extend ( ) ; var C:==:Backbone . Collection . extend (
var exp = expectation [ key ] ; var act:==:actual [ key ] ;
var max <CAM> force = ( typeof ( options . max <CAM> force ) = = = ' undefined ' ? Number . MAX <UND> VALUE : options . max <CAM> force ) ; var local <CAM> angleb:==:options . local <CAM> angleb  |  |  0 ;
var model = this . X . lookup ( e . get <CAM> attribute ( ' model ' )  |  |  p . sub <CAM> type ) ; var children:==:e . children ;
var . . . x = a . b ; var . . . x:==:a ( ) ;
var after   = require ( ' after ' ) ; var assert:==:require ( ' assert ' ) ;
var sig <CAM> bytes = word <CAM> array . sig <CAM> bytes ; var map:==:this . _ map ;
var points = options . points ; var tangents:==:options . tangents ;
var rotation = metadata . rotation  |  |  0 ; var mirrored:==:metadata . mirrored  |  |  false ;
var async = require ( ' async ' ) ; var winston:==:require ( ' winston ' ) ;
var entries = ' local entries ' ; var fill:==:' local fill ' ;
var frontu <CAM> vs = frontu <CAM> vs ? frontu <CAM> vs : new BABYLON . Vector4 ( 0 . 0 , 0 . 0 , 1 . 0 , 1 . 0 ) ; var backu <CAM> vs:==:backu <CAM> vs ? backu <CAM> vs : new BABYLON . Vector4 ( 0 . 0 , 0 . 0 , 1 . 0 , 1 . 0 ) ;
var tail = _ curry1 ( _ check <CAM> for <CAM> method ( ' tail ' , slice ( 1 , Infinity ) ) ) ; var take:==:_ curry2 ( _ dispatchable ( [ ' take ' ] , _ xtake , function take ( n , xs )
var has <CAM> highlights = data . has <CAM> highlights ; var margin:==:this . margin ;
var suffix = options . suffix  |  |  '' ; var separator:==:options . has <CAM> own <CAM> property ( ' separator ' ) ? options . separator : ' , ' ;
var get <CAM> draft <CAM> editor <CAM> selection <CAM> with <CAM> nodes = require ( ' get <CAM> draft <CAM> editor <CAM> selection <CAM> with <CAM> nodes ' ) ; var move <CAM> selection <CAM> backward:==:require ( ' move <CAM> selection <CAM> backward ' ) ;
var init = program . init ; var update:==:program . update ;
var gulp = require ( ' gulp ' ) ; var Server:==:require ( ' karma ' ) . Server ;
var db = this . _ db ; var upgrade <CAM> from:==:this . upgrade <CAM> from ;
var language = imports . language ; var watcher:==:imports . watcher ;
var height = default <CAM> value ( options . height , 0 . 0 ) ; var extruded <CAM> height:==:options . extruded <CAM> height ;
var browserify = require ( ' browserify ' ) ; var fs:==:require ( ' fs ' ) ;
var offset = TIFF <UND> HEADER <UND> LENGTH + entries <UND> length + ifd <UND> offset + values . length ; var b:==:_ value <UND> to <UND> bytes ( raw <UND> value , value <UND> type , offset ) ;
var cascade <CAM> expression = traceur . syntax . trees . cascade <CAM> expression ; var class <CAM> declaration:==:traceur . syntax . trees . class <CAM> declaration ;
var pool   = require ( ' typedarray - pool ' ) var ndarray:==:require ( ' ndarray ' )
var x = v1 . x + v2 . x ; var y:==:v1 . y + v2 . y ;
var path = require ( ' path ' ) ; var jsdom:==:require ( ' jsdom ' ) ;
var fs   = require ( ' fs ' ) ; var io:==:require ( ' socket . io ' ) ;
var ripple <CAM> style = _ props . ripple <CAM> style ; var secondary:==:_ props . secondary ;
var abs = Math . abs ; var diveq:==:numeric . diveq ;
var admin = require ( ' pomelo - admin ' ) ; var util:==:require ( ' util ' ) ;
var data = Buffer . from ( f . data , ' hex ' ) var output:==:bscript . null <CAM> data . output . encode ( data )
var assert = scope . assert ; var mixin:==:scope . mixin ;
var dx4 = Math . max ( parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx3 ' , 0 ) ) , Math . min ( parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx5 ' , 0 ) ) , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx4 ' , 0 ) ) ) ) ; var dy4:==:Math . max ( 0 , Math . min ( 100 , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy4 ' , 0 ) ) ) ) ;
var bounds    = this . boundsvar size:==:this . size
var local <CAM> sphere <CAM> pos = sphereTrimesh <UND> localSpherePos ; var tmp:==:sphereTrimesh <UND> tmp ;
var reactdom <CAM> textarea = require ( ' reactdom <CAM> textarea ' ) ; var react <CAM> instrumentation:==:require ( ' react <CAM> instrumentation ' ) ;
var is <CAM> valid <CAM> entity <CAM> code = _ _ webpack <UND> require _ _ ( 1023 ) . is <CAM> valid <CAM> entity <CAM> code ; var from <CAM> code <CAM> point:==:_ _ webpack <UND> require _ _ ( 1023 ) . from <CAM> code <CAM> point ;
var reduced = _ curry1 ( _ reduced ) ; var remove:==:_ curry3 ( function remove ( start , count , list )
var operand = this . transform <CAM> any ( tree . left . operand ) ; var member <CAM> expression:==:this . transform <CAM> any ( tree . left . member <CAM> expression ) ;
var _ bo = 30 ; values [ _ bo ] = _ bo ; var _ bp:==:31 ; values [ _ bp ]    _ bp ;
var current = tester . inject ( ' $ route ' ) . current ; var controller:==:current . controller ;
var primitives = mesh . primitives ; var length:==:primitives . length ;
var r = Math . abs ( color1 . rgb [ 0 ] - color2 . rgb [ 0 ] ) ; var g:==:Math . abs ( color1 . rgb [ 1 ] - color2 . rgb [ 1 ] ) ;
var label = _ ref5 . label ; var label <CAM> key:==:_ ref5 . label <CAM> key ;
var items = drag <CAM> drop <CAM> ins . items ; var buckets:==:drag <CAM> drop <CAM> ins . buckets ;
var set <CAM> first <CAM> name = doc <CAM> set . get <CAM> by <CAM> longname ( ' set <CAM> first <CAM> name ' ) [ 0 ] ; var set <CAM> last <CAM> name:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' set <CAM> last <CAM> name ' ) [ 0 ] ;
var m = this . mass ; var r:==:this . radius ;
var Net = global . Net ; var Trainer:==:global . Trainer ;
var scroll <CAM> to <CAM> column = _ props3 . scroll <CAM> to <CAM> column ; var scroll <CAM> to <CAM> row:==:_ props3 . scroll <CAM> to <CAM> row ;
var find <CAM> ancestor <CAM> offset <CAM> key = require ( ' find <CAM> ancestor <CAM> offset <CAM> key ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var width = $ ( ' # view - canvas - map ' ) . prop ( ' width ' ) ; var height:==:$ ( ' # view - canvas - map ' ) . prop ( ' height ' ) ;
var left = shadow <CAM> frustum . left ; var right:==:shadow <CAM> frustum . right ;
var resizer = create <CAM> element <CAM> with <CAM> class ( ' div ' , ' heap - snapshot - view - resizer ' ) ; var title:==:resizer . create <CAM> child ( ' div ' , ' title ' ) . create <CAM> child ( ' span ' ) ;
var second <UND> currency = $ scope . order . second <UND> currency ; var second <UND> issuer:==:$ scope . order . second <UND> issuer ;
var connect = require ( ' connect ' ) ; var fs:==:require ( ' fs ' ) ;
var _ qo = 270 ; values [ _ qo ] = _ qo ; var _ qp:==:271 ; values [ _ qp ]    _ qp ;
var assert    = require ( ' assert ' ) ; var connection <CAM> config:==:common . connection <CAM> config ;
var ARROWTYPE = Diagram . ARROWTYPE ; var PLACEMENT:==:Diagram . PLACEMENT ;
var is <CAM> content <CAM> editable <CAM> true = node <CAM> type . is <CAM> content <CAM> editable <CAM> true ; var is <CAM> content <CAM> editable <CAM> false:==:node <CAM> type . is <CAM> content <CAM> editable <CAM> false ;
var rectangle = parameters . rectangle ; var west:==:rectangle . west ;
var total = track . total ( )  |  |  track . revenue ( )  |  |  0 ; var order <CAM> id:==:track . order <CAM> id ( ) ;
var transition <CAM> enabled = props . transition <CAM> enabled ; var z <CAM> depth:==:props . z <CAM> depth ;
var key <CAM> command <CAM> plain <CAM> delete = require ( ' key <CAM> command <CAM> plain <CAM> delete ' ) ; var key <CAM> command <CAM> move <CAM> selection <CAM> to <CAM> end <CAM> of <CAM> block:==:require ( ' key <CAM> command <CAM> move <CAM> selection <CAM> to <CAM> end <CAM> of <CAM> block ' ) ;
var locals = options . locals  |  |  ; var transform <CAM> template:==:options . transform <CAM> template  |  |  angular . identity ;
var multi <CAM> line = _ props2 . multi <CAM> line ; var on <CAM> blur:==:_ props2 . on <CAM> blur ;
var assert = require ( ' chai ' ) . assert ; var fs:==:require ( ' fs ' ) ;
var from <CAM> world <CAM> point = orbit <CAM> camera <CAM> input <CAM> mouse . from <CAM> world <CAM> point ; var to <CAM> world <CAM> point:==:orbit <CAM> camera <CAM> input <CAM> mouse . to <CAM> world <CAM> point ;
var r = from . r + ( to . r - from . r ) * p . progress ; var g:==:from . g + ( to . g - from . g ) * p . progress ;
var prop = this . properties [ prop <CAM> changed . key ] ; var property:==:this . get <CAM> stencil ( ) . property ( prop <CAM> changed . key ) ;
var _ send <CAM> message = function _ send <CAM> message ( message , success <CAM> cb , error <CAM> cb ) var name:==:message . name ;
var allow <CAM> swipe <CAM> to <CAM> prev = s . params . allow <CAM> swipe <CAM> to <CAM> prev ; var allow <CAM> swipe <CAM> to <CAM> next:==:s . params . allow <CAM> swipe <CAM> to <CAM> next ;
var scroll <CAM> ctrl = infinite <CAM> scroll <CAM> ctrl . scroll <CAM> ctrl = ctrls [ 0 ] ; var js <CAM> scrolling:==:infinite <CAM> scroll <CAM> ctrl . js <CAM> scrolling    ! scroll <CAM> ctrl . is <CAM> native ( ) ;
var server <CAM> config = config . params . server <CAM> config ; < % if ( filters . mongoose ) % > var mongoose:==:require ( ' mongoose ' ) ;
var sum32 <UND> 4 = utils . sum32 <UND> 4 ; var sum32 <UND> 5:==:utils . sum32 <UND> 5 ;
var should = require ( ' should ' ) ; var assert:==:require ( ' assert ' ) ;
var link = title <CAM> model . get ( ' link ' ) ; var sublink:==:title <CAM> model . get ( ' sublink ' ) ;
var EXPORT <UND> STAR = ' EXPORT <UND> STAR ' ; var EXPRESSION <UND> STATEMENT:==:' EXPRESSION <UND> STATEMENT ' ;
var head = $ $ ( ' tr ' , ' goog - date - picker - head ' ) [ 0 ] ; var month:==:$ $ ( ' button ' , ' goog - date - picker - month ' , head . first <CAM> child ) [ 0 ] ;
var log = stdlib . Math . log ; var sqrt:==:stdlib . Math . sqrt ;
var is <CAM> startish = event <CAM> plugin <CAM> utils . is <CAM> startish ; var is <CAM> moveish:==:event <CAM> plugin <CAM> utils . is <CAM> moveish ;
var dx5 = mx <CAM> utils . get <CAM> value ( this . style , ' dx5 ' , ' 0 ' ) ; var dy5:==:mx <CAM> utils . get <CAM> value ( this . style , ' dy5 ' , ' 0 ' ) ;
var element <CAM> index = directive <CAM> record . directive <CAM> index . element <CAM> index ; var t:==:new binding <CAM> target ( DIRECTIVE , element <CAM> index , property <CAM> name , null , ast . to <CAM> string ( ) ) ;
var root <CAM> nodes = model . _ runtime . root <CAM> nodes ; var length:==:root <CAM> nodes . length ;
var add = new operator <CAM> node ( ' + ' , ' add ' , [ a , a ] ) ; var sub:==:new operator <CAM> node ( ' - ' , ' subtract ' , [ a , a ] ) ;
var State = traceur . codegeneration . generator . State ; var try <CAM> state:==:traceur . codegeneration . generator . try <CAM> state ;
var client <CAM> height = _ ref . client <CAM> height ; var client <CAM> width:==:_ ref . client <CAM> width ;
var sum32 = utils . sum32 ; var sum32 <UND> 4:==:utils . sum32 <UND> 4 ;
var terms = this . _ index . terms ; var titleterms:==:this . _ index . titleterms ;
var fs = require ( ' graceful - fs ' ) ; var path:==:require ( ' path ' ) ;
var resizer = chart . canvas . parent <CAM> node . _ chartjs . resizer ; var content:==:resizer . content <CAM> window  |  |  resizer ;
var editable = ( this . editable . update <CAM> time  |  |  this . editable . update <CAM> group ) ; var class <CAM> name:==:( this . data . class <CAM> name ? ' ' + this . data . class <CAM> name : '' ) +
var editor <CAM> state = require ( ' editor <CAM> state ' ) ; var key <CAM> binding <CAM> util:==:require ( ' key <CAM> binding <CAM> util ' ) ;
var break <CAM> statement = traceur . syntax . trees . break <CAM> statement ; var continue <CAM> statement:==:traceur . syntax . trees . continue <CAM> statement ;
var underline <CAM> style = _ props2 . underline <CAM> style ; var rows:==:_ props2 . rows ;
var MUST <UND> USE <UND> ATTRIBUTE = dom <CAM> property . injection . MUST <UND> USE <UND> ATTRIBUTE ; var MUST <UND> USE <UND> PROPERTY:==:dom <CAM> property . injection . MUST <UND> USE <UND> PROPERTY ;
var FAILED = ' FAILED ' var PASSED:==:' PASSED '
var decrypt <CAM> stream = core <CAM> stream . decrypt <CAM> stream ; var arc <CAM> four <CAM> cipher:==:( function arc <CAM> four <CAM> cipher <CAM> closure ( )
var start = new Date ( options . start ) ; var end:==:new Date ( options . end ) ;
var rimraf = require ( ' rimraf ' ) ; var tsb:==:require ( ' gulp - tsb ' ) ;
var master <CAM> callback = jasmine . create <CAM> spy ( ' master <CAM> callback ' ) ; var top <CAM> callback:==:jasmine . create <CAM> spy ( ' top <CAM> callback ' ) ;
var uniq = require ( ' lodash . uniq ' ) ; var flatten:==:require ( ' lodash . flatten ' ) ;
var dropdown <CAM> picker = require <CAM> native <CAM> component ( ' android <CAM> dropdown <CAM> picker ' , picker <CAM> android , cfg ) ; var dialog <CAM> picker:==:require <CAM> native <CAM> component ( ' android <CAM> dialog <CAM> picker ' , picker <CAM> android , cfg ) ;
var wrap = function ( node , wrapper <CAM> name ) var parent:==:node . parent <CAM> node ;
var hover <CAM> item <CAM> style = series <CAM> scope & & series <CAM> scope . hover <CAM> item <CAM> style ; var symbol <CAM> rotate:==:series <CAM> scope & & series <CAM> scope . symbol <CAM> rotate ;
var x = math <CAM> min ( other . x , this . x ) ; var y:==:math <CAM> min ( other . y , this . y ) ;
var a = parse <CAM> int ( va [ i ] , 10 ) var b:==:parse <CAM> int ( vb [ i ] , 10 )
var height = ( data . height ) ? data . height : 2 ; var border:==:( data . border ) ? data . border : 0 ;
var winston = require ( ' winston ' ) ; var nconf:==:require ( ' nconf ' ) ;
var c = stream . read ( quantclass . bits ) ; var nlevels:==:quantclass . nlevels ;
var el = c . elm ; var s:==:el . style ;
var clear <CAM> support <CAM> code <CAM> fns = exports . clear <CAM> support <CAM> code <CAM> fns = _ support <UND> code <UND> fns2 . default . reset ; var proxy <CAM> support <CAM> code:==:function proxy <CAM> support <CAM> code ( name )
var blue <CAM> grey600 = exports . blue <CAM> grey600 = ' # 546e7a ' ; var blue <CAM> grey700:==:exports . blue <CAM> grey700    ' # 455a64 ' ;
var function <CAM> declaration = traceur . syntax . trees . function <CAM> declaration ; var get <CAM> accessor:==:traceur . syntax . trees . get <CAM> accessor ;
var a = document . create <CAM> element ( ' script ' ) ; var m:==:document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' script ' ) [ 0 ] ;
var boundary = this . boundary ; var stream:==:this . stream ;
var from = new rgb <CAM> color ( p . from . value ) ; var to:==:new rgb <CAM> color ( p . to . value ) ;
var Previewer = imports . Previewer ; var ui:==:imports . ui ;
var loc = win . location . href ; var index:==:loc . index <CAM> of ( ' # ' ) ;
var dependencies = mout . object . values ( node . dependencies ) ; var version:==:! node . missing ? node . pkg <CAM> meta . _ release  |  |  node . pkg <CAM> meta . version : null ;
var attr = xml <CAM> node . attributes [ i ] ; var value:==:attr . value ;
var in <CAM> selection = ev . in <CAM> selection ( ) ; var pageX:==:ev . pageX ;
var input = element . find ( ' input ' ) . eq ( 0 ) ; var attributes:==:field . attributes ( ) ;
var full <CAM> layout = gd . _ full <CAM> layout ; var index:==:trace . ids . index <CAM> of ( i d ) ;
var b = Object . freeze ( a ) ; var c:==:Object . create ( b ) ;
var native <CAM> methods <CAM> mixin = require ( ' native <CAM> methods <CAM> mixin ' ) ; var react <CAM> native <CAM> view <CAM> attributes:==:require ( ' react <CAM> native <CAM> view <CAM> attributes ' ) ;
var should = require ( ' should ' ) ; var os:==:require ( ' os ' ) ;
var content = page . content ; var images:==:options . image  |  |  options . images  |  |  page . photos  |  |  [ ] ;
var max <CAM> errors = options . max <CAM> errors ; var error <CAM> messages:==:this . error <CAM> messages    blocks . observable ( [ ] ) ;
var editable = ( this . options . editable . update <CAM> time  |  |  this . options . editable . update <CAM> group  |  |  this . editable = = = true ) & & this . editable ! = = false ; var class <CAM> name:==:( this . data . class <CAM> name ? ' ' + this . data . class <CAM> name : '' ) + ( this . selected ? ' vis - selected ' : '' ) + ( editable ? ' vis - editable ' : ' vis - readonly ' ) ;
var error <CAM> obj = util . error <CAM> obj ; var try <CAM> catch1:==:util . try <CAM> catch1 ;
var c = process <CAM> diagram <CAM> canvas . g . ellipse ( ax , ay , 2 , 2 ) . attr ( stroke : Color . slate <CAM> grey ) ; var c:==:process <CAM> diagram <CAM> canvas . g . ellipse ( bx , by , 2 , 2 ) . attr ( stroke : Color . slate <CAM> grey ) ;
var is <CAM> function = _ _ dependency1 _ _ . is <CAM> function ; var is <CAM> non <CAM> thenable:==:_ _ dependency1 _ _ . is <CAM> non <CAM> thenable ;
var DOCUMENT <UND> POSITION <UND> FOLLOWING = Node . DOCUMENT <UND> POSITION <UND> FOLLOWING ; var DOCUMENT <UND> POSITION <UND> CONTAINS:==:Node . DOCUMENT <UND> POSITION <UND> CONTAINS ;
var AWAIT <UND> EXPRESSION = ' AWAIT <UND> EXPRESSION ' ; var BINARY <UND> EXPRESSION:==:' BINARY <UND> EXPRESSION ' ;
var t = Math . max ( this . top , region . top   ) ; var r:==:Math . min ( this . right , region . right ) ;
var len = refs . length ; var timescale:==:sidx . timescale ;
var b = this . buffer [ i ] ; var p:==:this . points [ i ] ;
var vertices = this . vertices ; var bones:==:this . bones ;
var backdrop = ' . dropdown - backdrop'var toggle:==:' [ data - toggle dropdown ] '
var del = require ( ' del ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var gl = plot . glvar view <CAM> box:==:plot . view <CAM> box
var label <CAM> text <CAM> properties = powerbi . visuals . data <CAM> label <CAM> utils . label <CAM> text <CAM> properties ; var get <CAM> label <CAM> formatted <CAM> text:==:powerbi . visuals . data <CAM> label <CAM> utils . get <CAM> label <CAM> formatted <CAM> text ;
var socket <CAM> timeout = RED . settings . socket <CAM> timeout |  | null ; var net:==:require ( ' net ' ) ;
var dezalgo = require ( ' dezalgo ' ) var mkdirp:==:require ( ' mkdirp ' )
var version = opt <UND> version  |  |  '' ; var display <CAM> name:==:opt <UND> displayName  |  |  ( database <CAM> name + ' name ' ) ;
var element = this . element . create <CAM> child ( ' span ' , ' status - bar - counter - item ' ) ; var icon:==:element . create <CAM> child ( ' label ' , ' ' , ' dt - icon - label ' ) ;
var doc = window . document . document <CAM> element ; var body:==:window . document . body ;
var type = this . type ; var base:==:this . data [ this . base ] ;
var uv <CAM> position <CAM> buffer = this . _ uv <CAM> position <CAM> buffer ; var alpha <CAM> buffer:==:this . _ alpha <CAM> buffer ;
var min <CAM> container <CAM> width = Number ( options . min <CAM> container <CAM> width )  |  |  200 ; var min <CAM> container <CAM> height:==:Number ( options . min <CAM> container <CAM> height )  |  |  100 ;
var edge <CAM> shortcut <CAM> type = this . _ edge <CAM> shortcut <CAM> type ; var edge <CAM> element <CAM> type:==:this . _ edge <CAM> element <CAM> type ;
var hover <CAM> color = _ props . hover <CAM> color ; var on <CAM> mouse <CAM> enter:==:_ props . on <CAM> mouse <CAM> enter ;
var top <CAM> positions = pos . top <CAM> positions ; var num <CAM> corners:==:pos . num <CAM> corners ;
var line   = this . linevar text:==:this . text
var index <CAM> of = zr <CAM> util . index <CAM> of ; var curry:==:zr <CAM> util . curry ;
var context = this . contextvar width:==:canvas . width
var a = ' a ' ; var b:==:' b ' ;
var terminal = imports . terminal ; var commands:==:imports . commands ;
var _ kk = 170 ; values [ _ kk ] = _ kk ; var _ kl:==:171 ; values [ _ kl ]    _ kl ;
var pos = stream . pos ; var end:==:stream . end ;
var parse = math . expression . parse ; var conditional <CAM> node:==:math . expression . node . conditional <CAM> node ;
var IS <UND> TEST <UND> MODE = ! ! process . env . IS <UND> TEST <UND> MODE ; var Emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var type = _ props2 . type ; var underline <CAM> disabled <CAM> style:==:_ props2 . underline <CAM> disabled <CAM> style ;
var dimensions = document . query <CAM> selector ( ' # dimensions ' ) ; var video:==:document . query <CAM> selector ( ' video ' ) ;
var root = tree . root ; var obj:==:this . obj ;
var metadata = result . metadata ; var ctx:==:result . ctx ;
var check <CAM> if <CAM> attachable = options . check <CAM> if <CAM> attachable ; var no <CAM> edges:==:options . no <CAM> edges ;
var spec = options . spec ; var watch:==:options . watch ;
var alert = imports [ ' dialog . alert ' ] . show ; var confirm:==:imports [ ' dialog . confirm ' ] . show ;
var state   = this . _ statevar velocity:==:this . _ velocity
var component = components . get ( utils . get <CAM> parent <CAM> component ( ) ) ; var mutations:==:component & & component . mutations  |  |  [ ] ;
var on <CAM> row <CAM> double <CAM> click = _ ref . on <CAM> row <CAM> double <CAM> click ; var on <CAM> row <CAM> mouse <CAM> over:==:_ ref . on <CAM> row <CAM> mouse <CAM> over ;
var light <CAM> black = exports . light <CAM> black = ' rgba ( 0 , 0 , 0 , 0 . 54 ) ' ; var min <CAM> black:==:exports . min <CAM> black    ' rgba ( 0 , 0 , 0 , 0 . 26 ) ' ;
var val = function ( value ) var settings:==:config <CAM> service . get <CAM> sync ( ) . wallet . settings ;
var post <CAM> digest <CAM> queue = $ root <CAM> scope . $ $ post <CAM> digest <CAM> queue = [ ] ; var apply <CAM> async <CAM> queue:==:$ root <CAM> scope . $ $ apply <CAM> async <CAM> queue    [ ] ;
var list <CAM> view = require ( ' list <CAM> view ' ) ; var Dimensions:==:require ( ' Dimensions ' ) ;
var index = rectangle . _ index ; var custom:==:rectangle . custom  |  |  ;
var o <CAM> page = this . _ o <CAM> page ; var s <CAM> library <CAM> name:==:this . _ s <CAM> library <CAM> name ;
var user = this . analytics . user ( ) ; var events:==:this . events ( event ) ;
var create <CAM> expression <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> expression <CAM> statement ; var create <CAM> function <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> function <CAM> expression ;
var duration = duration <CAM> input . value ; var gap:==:gap <CAM> input . value ;
var south = rectangle . south ; var north:==:rectangle . north ;
var exclusive <CAM> maximum = args . form . exclusive <CAM> maximum  |  |  false ; var minimum:==:args . form . minimum  |  |  false ;
var react <CAM> markup <CAM> checksum = require ( ' react <CAM> markup <CAM> checksum ' ) ; var assert <CAM> valid <CAM> props:==:require ( ' assert <CAM> valid <CAM> props ' ) ;
var encoding = name <UND> to <UND> encoding [ name ] ; var index:==:indexes [ name ] ;
var path = require ( ' path ' ) ; var panino:==:require ( ' panino ' ) ;
var typescript = this . env . options . typescript ; var bower:==:require ( path . join ( process . cwd ( ) , ' bower . json ' ) ) ;
var method = message . method ; var url:==:message . url ;
var Platform = require ( ' Platform ' ) ; var back <CAM> android:==:require ( ' back <CAM> android ' ) ;
var client <CAM> width = document . document <CAM> element . client <CAM> width ; var content <CAM> width:==:this . content <CAM> width ;
var impulse2   = this . impulse2 ; var length:==:options . length ;
var util = imports . util ; var commands:==:imports . commands ;
var is <CAM> cordova = platform <CAM> info . is <CAM> cordova ; var is <CAM> chrome <CAM> app:==:platform <CAM> info . is <CAM> chrome <CAM> app ;
var analytics = imports [ ' analytics ' ] ; var outplan:==:require ( ' outplan ' ) ;
var datasets = data . datasets ; var get <CAM> value <CAM> or <CAM> default:==:helpers . get <CAM> value <CAM> or <CAM> default ;
var select <CAM> value = _ ref . select <CAM> value ; var value <CAM> array:==:_ ref . value <CAM> array ;
var make <CAM> span = build <CAM> common . make <CAM> span ; var font <CAM> map:==:build <CAM> common . font <CAM> map ;
var lime500 = exports . lime500 = ' # cddc39 ' ; var lime600:==:exports . lime600    ' # c0ca33 ' ;
var extname = path . extname ; var exists:==:fs . exists  |  |  path . exists ;
var get <CAM> innerhtml = scope . get <CAM> innerhtml ; var mixin:==:scope . mixin ;
var MEM = 31 ; var SYNC:==:32 ;
var second = parse <CAM> int ( kernings [ i ] . get <CAM> attribute ( ' second ' ) , 10 ) ; var amount:==:parse <CAM> int ( kernings [ i ] . get <CAM> attribute ( ' amount ' ) , 10 ) ;
var y = anchor <CAM> point . y ; var x1:==:x + box . x1 ;
var element <CAM> injector <CAM> index = memento . _ element <CAM> injector <CAM> index ; var directive <CAM> index:==:memento . _ directive <CAM> index ;
var start <CAM> point = copy <CAM> point ( selection . start <CAM> point ) ; var end <CAM> point:==:copy <CAM> point ( selection . end <CAM> point ) ;
var matrix = this . matrix ; var cur <CAM> matrix:==:this . cur <CAM> matrix ;
var fixed <CAM> height = _ props3 . fixed <CAM> height ; var keep <CAM> collapsed <CAM> content:==:_ props3 . keep <CAM> collapsed <CAM> content ;
var util = imports . util ; var join:==:require ( ' path ' ) . join ;
var computed = ko . computed ( function ( ) eval <CAM> spy ( observable ( ) ) ; return observable ( ) ; ) . extend ( rate <CAM> limit : 500 ) ; var notify <CAM> spy:==:jasmine . create <CAM> spy ( ' notify <CAM> spy ' ) ;
var longitude = e . coords . longitude ; var latitude:==:e . coords . latitude ;
var blog <CAM> post = db . model ( ' gh4073 <UND> 2 ' , blog <CAM> post <CAM> schema ) ; var Event:==:db . model ( ' gh4073 <UND> 3 ' , event <CAM> schema ) ;
var content <CAM> box = instance . get ( ' content <CAM> box ' ) ; var label <CAM> el:==:instance . get ( ' label <CAM> el ' ) ;
var xslt = document . get <CAM> element <CAM> by <CAM> id ( ' xslt ' ) ; var result:==:document . get <CAM> element <CAM> by <CAM> id ( ' result ' ) ;
var index = value . index <CAM> of ( C <UND> NEWLINE ) ; var length:==:value . length ;
var deep <CAM> orange300 = exports . deep <CAM> orange300 = ' # ff8a65 ' ; var deep <CAM> orange400:==:exports . deep <CAM> orange400    ' # ff7043 ' ;
var setopts = common . setoptsvar own <CAM> prop:==:common . own <CAM> prop
var object <CAM> or <CAM> function = _ _ dependency2 _ _ . object <CAM> or <CAM> function ; var is <CAM> function:==:_ _ dependency2 _ _ . is <CAM> function ;
var capt = this . element . children ( ' . window - caption ' ) ; var icon:==:capt . find ( ' . window - caption - icon ' ) ;
var height = viewport . height - ( margin . top + margin . bottom ) ; var width:==:viewport . width - ( margin . left + margin . right ) ;
var result = processor . result ( ) ; var distortion:==:parse <CAM> int ( result . distortion ) ;
var add = numeric . add , mul = numeric . mul , y1,erinf ; var max:==:Math . max , min    Math . min , abs    Math . abs , norminf    numeric . norminf , pow    Math . pow ;
var Track = require ( ' facade ' ) . Track ; var bind:==:require ( ' bind ' ) ;
var each = Tools . each , trim = Tools . trim ; var DOM:==:dom <CAM> utils . DOM ;
var spawn <CAM> sync = require ( ' child <UND> process ' ) . spawn <CAM> sync ; var streamqueue:==:require ( ' streamqueue ' ) ;
var battery = window . navigator . battery ; var charging:==:document . get <CAM> element <CAM> by <CAM> id ( ' charging ' ) ;
var meta = model . get ( ' metadata ' ) ; var content:==:model . get ( ' content ' ) ;
var POSITION <UND> INDEX = Billboard . POSITION <UND> INDEX ; var PIXEL <UND> OFFSET <UND> INDEX:==:Billboard . PIXEL <UND> OFFSET <UND> INDEX ;
var metadata = _ ref . metadata ; var signing <CAM> keys:==:_ ref . signing <CAM> keys ;
var x0 = subband . tbx0 ; var y0:==:subband . tby0 ;
var f = Q . fulfill ( 5 ) ; var r:==:Q . reject ( new Error ( ' aaargh ' ) ) ;
var alpha = options . series . pie . shadow . alpha ; var radius:==:options . series . pie . radius > 1 ? options . series . pie . radius : max <CAM> radius * options . series . pie . radius ;
var boundary = source . boundary ; var x:==:boundary ? boundary . x : null ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var request:==:bb <CAM> promise . promisify ( require ( ' request ' ) ) ;
var records <CAM> total = compat ( ' i <CAM> total <CAM> records ' ,   ' records <CAM> total ' ) ; var records <CAM> filtered:==:compat ( ' i <CAM> total <CAM> display <CAM> records ' , ' records <CAM> filtered ' ) ;
var has <CAM> initialization = Representation . has <CAM> initialization ( representation ) ; var has <CAM> segments:==:Representation . has <CAM> segments ( representation ) ;
var context = this . context _ ; var context <CAM> stroke <CAM> state:==:this . context <CAM> stroke <CAM> state _ ;
var te = elt ( ' textarea ' , null , null , ' position : absolute ; bottom : -1em ; padding : 0 ; width : 1px ; height : 1em ; outline : none ' ) var div:==:elt ( ' div ' , [ te ] , null , ' overflow : hidden ; position : relative ; width : 3px ; height : 0px ; ' )
var path = require ( ' path ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var start = _ item . data . start ; var end:==:_ item . data . end !    undefined ? _ item . data . end : start ;
var x = Math . min ( x <CAM> extent [ 0 ] , x <CAM> extent [ 1 ] ) ; var y:==:Math . min ( y <CAM> extent [ 0 ] , y <CAM> extent [ 1 ] ) ;
var blog <CAM> post = db . model ( ' ref <CAM> blog <CAM> post ' , posts , ' gh-2176 - 1 ' ) ; var User:==:db . model ( ' ref <CAM> user ' , users , ' gh-2176 - 2 ' ) ;
var sub <CAM> tasks = parameters . sub <CAM> tasks ; var length:==:sub <CAM> tasks . length ;
var node <CAM> from = graph . get <CAM> node ( adj . node <CAM> from . i d ) ; var node <CAM> to:==:graph . get <CAM> node ( adj . node <CAM> to . i d ) ;
var screen <CAM> box = this . screen <CAM> boxvar pixel <CAM> ratio:==:this . pixel <CAM> ratio
var dfa = this . stack [ this . stack . length - 1 ] . dfa ; var node:==:this . stack [ this . stack . length - 1 ] . node ;
var net = require ( ' net ' ) ; var tls:==:require ( ' tls ' ) ;
var fixed <CAM> data <CAM> table <CAM> buffered <CAM> rows = require ( ' fixed <CAM> data <CAM> table <CAM> buffered <CAM> rows . react ' ) ; var fixed <CAM> data <CAM> table <CAM> column <CAM> resize <CAM> handle:==:require ( ' fixed <CAM> data <CAM> table <CAM> column <CAM> resize <CAM> handle . react ' ) ;
var width = this . _ image . width ; var height:==:this . _ image . height ;
var node = nodes <CAM> to <CAM> insert [ i d ] . node ; var parent <CAM> id:==:nodes <CAM> to <CAM> insert [ i d ] . parent <CAM> id ;
var Share = require ( ' Share ' ) ; var View:==:require ( ' View ' ) ;
var top <CAM> level <CAM> types = event <CAM> constants . top <CAM> level <CAM> types ; var get <CAM> first <CAM> reactdom:==:react <CAM> mount . get <CAM> first <CAM> reactdom ;
var el = setup <CAM> select ( ' ng - required='is <CAM> required ' md - no - asterisk='false ' ng - model='some <CAM> model ' ' ) ; var select:==:el . find ( ' md - select ' ) ;
var text <CAM> fill = style . text <CAM> fill ; var text <CAM> stroke:==:style . text <CAM> stroke ;
var gap <CAM> size = options . gap <CAM> size  |  |  1 ; var dash <CAM> nb:==:options . dash <CAM> nb  |  |  200 ;
var user <CAM> id = _ ref . user <CAM> id ; var on <CAM> submit <CAM> user <CAM> id:==:_ ref . on <CAM> submit <CAM> user <CAM> id ;
var padding <CAM> right = parse <CAM> int ( style . padding <CAM> right , 10 )  |  |  0 ; var padding <CAM> top:==:parse <CAM> int ( style . padding <CAM> top , 10 )  |  |  0 ;
var max = Math . max . apply ( Math , nums ) ; var min:==:Math . min . apply ( Math , nums ) ;
var row <CAM> stop <CAM> index = _ ref8 . row <CAM> stop <CAM> index ; var on <CAM> rows <CAM> rendered:==:this . props . on <CAM> rows <CAM> rendered ;
var type = utils . type ; var to <CAM> string:==:Object . prototype . to <CAM> string ;
var yes = buttons [ yes <CAM> label ] ; var no:==:buttons [ no <CAM> label ] ;
var force <CAM> function = options . force <CAM> function ; var max <CAM> length:==:options . max <CAM> length ;
var lang = options . lang <CAM> info ; var editable:==:$ editable [ 0 ] ;
var instance = instances [ i ] ; var geometry:==:instance [ geometry <CAM> name ] ;
var intercept = require ( ' intercept - stdout ' ) ; var net:==:require ( ' net ' ) ;
var read <CAM> uint32 = shared <CAM> util . read <CAM> uint32 ; var warn:==:shared <CAM> util . warn ;
var cache = ref . cache ; var should <CAM> preload:==:ref . should <CAM> preload ;
var descriptor = pre <CAM> evaluated <CAM> font . descriptor ; var type:==:pre <CAM> evaluated <CAM> font . type ;
var latitude = is <CAM> latitude <CAM> valid ? parse <CAM> float ( latitude <CAM> string ) : -1 ; var longitude:==:is <CAM> longitude <CAM> valid ? parse <CAM> float ( longitude <CAM> string ) : -1 ;
var flate <CAM> stream = core <CAM> stream . flate <CAM> stream ; var jbig2 <CAM> stream:==:core <CAM> stream . jbig2 <CAM> stream ;
var types = Object . keys ( defs . types ) var defaults:==:Object . keys ( defs . defaults )
var a = new Readable ( object <CAM> mode : true ) var b:==:new Readable ( object <CAM> mode : true )
var source = state . source ; var queue:==:source . queue ;
var first <CAM> edge <CAM> indexes = this . _ first <CAM> edge <CAM> indexes ; var flags:==:this . _ flags ;
var react <CAM> browser <CAM> event <CAM> emitter = require ( ' react <CAM> browser <CAM> event <CAM> emitter ' ) ; var reactdom <CAM> component <CAM> tree:==:require ( ' reactdom <CAM> component <CAM> tree ' ) ;
var missing <CAM> data <CAM> exception = shared <CAM> util . missing <CAM> data <CAM> exception ; var create <CAM> promise <CAM> capability:==:shared <CAM> util . create <CAM> promise <CAM> capability ;
var idb <CAM> key <CAM> range = window . idb <CAM> key <CAM> range  |  |  window . webkitidb <CAM> key <CAM> range ; var idb <CAM> transaction:==:window . idb <CAM> transaction  |  |  window . webkitidb <CAM> transaction  |  |  ;
var page = data . page ; var pages:==:data . pages ;
var template = node . get <CAM> attribute ( ' template ' ) ; var resource <CAM> type:==:node . get <CAM> attribute ( ' resource <CAM> type ' ) ;
var Node = mod . Node ; var avl <CAM> tree:==:mod . avl <CAM> tree ;
var subscribable = new ko . subscribable ( ) . extend ( rate <CAM> limit : 250 ) . extend ( rate <CAM> limit : 500 ) ; var notify <CAM> spy:==:jasmine . create <CAM> spy ( ' notify <CAM> spy ' ) ;
var $ head <CAM> spans = that . $ head <CAM> spans = $ datatable . children ( ' . datatable - head ' ) . children ( ' . datatable - head - span ' ) ; var $ cells:==:that . $ cells    $ data <CAM> spans . find ( ' td , th ' ) ;
var height = _ props . height ; var width:==:_ props . width ;
var w = extract <CAM> number ( props . width , 0 ) ; var h:==:extract <CAM> number ( props . height , 0 ) ;
var calendar <CAM> ctrl = this . calendar <CAM> ctrl ; var year <CAM> ctrl:==:this . year <CAM> ctrl ;
var context = vertex <CAM> array . _ context ; var has <CAM> instanced <CAM> attributes:==:vertex <CAM> array . _ has <CAM> instanced <CAM> attributes ;
var get <CAM> data <CAM> item <CAM> value = model <CAM> util . get <CAM> data <CAM> item <CAM> value ; var conver <CAM> data <CAM> value:==:model <CAM> util . conver <CAM> data <CAM> value ;
var fs = require ( ' fs ' ) ; var child <UND> process:==:require ( ' child <UND> process ' ) ;
var vi = ContactEquation <UND> getImpactVelocityAlongNormal <UND> vi ; var vj:==:ContactEquation <UND> getImpactVelocityAlongNormal <UND> vj ;
var x = this . _ device <CAM> pixel <CAM> ratio * ( tx - related <CAM> pos . left ) ; var y:==:this . _ device <CAM> pixel <CAM> ratio * ( related <CAM> pos . top + related <CAM> pos . height - ty ) ;
var parser = require ( ' engine . io - parser ' ) ; var parseqs:==:require ( ' parseqs ' ) ;
var limit = obj . limit ; var ratio:==:Math . ceil ( obj . ratio ) ;
var tree = new goog . ui . tree . tree <CAM> control ( ' tree ' ) ; var a:==:new goog . ui . tree . tree <CAM> node ( ' a ' ) ;
var canvas <CAM> renderer = Hilo . canvas <CAM> renderer ; var dom <CAM> renderer:==:Hilo . dom <CAM> renderer ;
var defaults = require ( ' defaults ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var strict = opts . strict ! = = falsevar umask:==:typeof opts . umask      ' number ' ? ~opts . umask : ~process <CAM> umask ( )
var BUILDER <UND> KEYS = exports . BUILDER <UND> KEYS = ; var DEPRECATED <UND> KEYS:==:exports . DEPRECATED <UND> KEYS    ;
var c = faces [ i ] var n:==:c . length
var font <CAM> size <CAM> unit = font <CAM> size <CAM> unit  |  |  ' 10px ' ; var font <CAM> type:==:font <CAM> type  |  |  ' Helvetica ' ;
var month = app . month ; var today <CAM> square:==:month . today <CAM> square ;
var os = require ( ' os ' ) var crypto:==:require ( ' crypto ' )
var lis = $ . event . listeners ; var len:==:lis . length ;
var async = require ( ' async ' ) ; var assert:==:require ( ' power - assert ' ) ;
var surface = this . _ surface ; var pass:==:frame <CAM> state . passes ;
var di = require ( ' asyncdi ' ) ; var marked:==:require ( ' marked ' ) ;
var parse <CAM> tree <CAM> visitor = traceur . syntax . parse <CAM> tree <CAM> visitor ; var tree <CAM> writer:==:traceur . outputgeneration . tree <CAM> writer ;
var debug = require ( ' debug ' ) ( ' memory ' ) ; var util:==:require ( ' util ' ) ;
var row = results . rows . item ( i ) ; var data:==:JSON . parse ( row . data ) ;
var sheet = style . sheet  |  |  style . style <CAM> sheet ; var css <CAM> text:==:sheet ? ( sheet . css <CAM> rules & & sheet . css <CAM> rules [ 0 ] ? sheet . css <CAM> rules [ 0 ] . css <CAM> text : sheet . css <CAM> text  |  |  '' ) : '' ;
var data = size . data ; var mp:==:data . mp ? data . mp + value + ' ' : '' ;
var backdrop = new Animation ( ele . query <CAM> selector ( ' ion - backdrop ' ) ) ; var wrapper:==:new Animation ( ele . query <CAM> selector ( ' . popover - wrapper ' ) ) ;
var async = require ( ' async ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var parse <CAM> delay = given <CAM> options . parse <CAM> delay  |  |  300 ; var time:==:given <CAM> options . time  |  |  window ;
var anchor = cm . get <CAM> cursor ( ' anchor ' ) ; var head:==:cm . get <CAM> cursor ( ' head ' ) ;
var duration = parse <CAM> timing <CAM> value ( duration <CAM> str ) ; var delay:==:parse <CAM> timing <CAM> value ( delay <CAM> str ) ;
var st = this . styles , all <CAM> text = this . text , marked = this . marked ; var len:==:all <CAM> text . length ;
var text <CAM> color <CAM> freq = text <CAM> color <CAM> freq  |  |  ' # fff ' ; var text <CAM> color <CAM> unit:==:text <CAM> color <CAM> unit  |  |  ' # fff ' ;
var form = that . _ send <UND> form = _ document . create <CAM> element ( ' form ' ) ; var area:==:that . _ send <UND> area    _ document . create <CAM> element ( ' textarea ' ) ;
var z = axis <CAM> pointer <CAM> model . get ( ' z ' ) ; var zlevel:==:axis <CAM> pointer <CAM> model . get ( ' zlevel ' ) ;
var blue <CAM> grey900 = exports . blue <CAM> grey900 = ' # 263238 ' ; var grey50:==:exports . grey50    ' # fafafa ' ;
var parse <CAM> tree <CAM> writer = traceur . outputgeneration . parse <CAM> tree <CAM> writer ; var parse <CAM> tree <CAM> map <CAM> writer:==:traceur . outputgeneration . parse <CAM> tree <CAM> map <CAM> writer ;
var header = require ( ' gulp - header ' ) ; var jsdoc:==:require ( ' gulp - jsdoc ' ) ;
var dns = require ( ' dns ' ) ; var extend:==:require ( ' extend ' ) ;
var content = msg . content ; var start:==:content . cursor <UND> start ;
var nodes = cluster . nodes ( graph <UND> data ) ; var link:==:vis . select <CAM> all ( ' path . link ' )
var remote = new PouchDB ( dbs . remote ) ; var ajax:==:remote . _ ajax ;
var search <CAM> prompt <CAM> text = _ props2 . search <CAM> prompt <CAM> text ; var is <CAM> loading:==:this . state . is <CAM> loading ;
var tabbehavior = architect <CAM> app . services . tabbehavior ; var file <CAM> path:==:selected . package <CAM> config & & selected . package <CAM> config . file <CAM> path ;
var resolve = require ( ' path ' ) . resolvevar lockfile:==:require ( ' lockfile ' )
var v1 <CAM> comp = v1 <CAM> comp <CAM> parser . exec ( v1 <CAM> sub )  |  |  [ '' , '' , '' ] ; var v2 <CAM> comp:==:v2 <CAM> comp <CAM> parser . exec ( v2 <CAM> sub )  |  |  [ '' , '' , '' ] ;
var deltaY = event . wheel <CAM> deltay  |  |  event . deltaY ; var deltaX:==:event . wheel <CAM> deltax  |  |  event . deltaX ;
var cursors = by <CAM> class <CAM> name ( cm . get <CAM> wrapper <CAM> element ( ) , ' code <CAM> mirror - cursors ' ) [ 0 ] ; var cursor:==:cursors . first <CAM> child ;
var parse = require ( ' spdx - expression - parse ' ) ; var correct:==:require ( ' spdx - correct ' ) ;
var Scope = loopback . Scope ; var ACL:==:loopback . ACL ;
var company <CAM> created = identify . company <CAM> created ( ) ; var created:==:identify . created ( ) ;
var node = d3 . select ( sel . node ( ) ) ; var data:==:node . data ( ) ;
var is <CAM> point <CAM> light = shadow <CAM> map . is <CAM> point <CAM> light ; var passes:==:shadow <CAM> map . passes ;
var tile <CAM> width = this . _ tile <CAM> width  |  |  image . width ; var tile <CAM> height:==:this . _ tile <CAM> height  |  |  image . height ;
var _ cp = 47 ; values [ _ cp ] = _ cp ; var _ da:==:48 ; values [ _ da ]    _ da ;
var l = Object . keys ( msg . payload ) . length ; var pay:==:msg . payload ;
var screen <CAM> left = _ window . screen <CAM> left  |  |  _ window . screenX  |  |  0 ; var screen <CAM> top:==:_ window . screen <CAM> top  |  |  _ window . screenY  |  |  0 ;
var tr = div . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' tr ' ) [ 0 ] var td:==:div . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' td ' ) [ 0 ]
var fs = imports . fs ; var layout:==:imports . layout ;
var globe = controller . _ globe ; var camera:==:scene . camera ;
var template = el . attr ( ' data - template ' ) ; var location:==:el . attr ( ' data - location ' ) ;
var head = html . append <CAM> child ( doc . create <CAM> elementns ( ns , ' head ' ) ) ; var title:==:doc . create <CAM> elementns ( ns , ' title ' ) ;
var isRTL = this . isRTL ; var row <CAM> cnt:==:this . row <CAM> cnt ;
var type = request . type ; var data:==:request . data ;
var position = distances [ 0 ] . position ; var distance:==:distances [ 0 ] . distance ;
var tpl = this . tpl ; var buttons:==:this . button . buttons ;
var Link = get <CAM> component ( ' Link ' ) ; var make <CAM> menu <CAM> options:==:function make <CAM> menu <CAM> options ( name )
var tiling <CAM> type = this . tiling <CAM> type ; var color:==:this . color ;
var a = cd [ 0 ] . a ; var b:==:cd [ 0 ] . b ;
var transition <CAM> duration = timings . transition <CAM> duration ; var animation <CAM> duration:==:timings . animation <CAM> duration ;
var month = this . $ wheels <CAM> month . find ( ' . selected ' ) . attr ( ' data - month ' ) ; var year:==:this . $ wheels <CAM> year . find ( ' . selected ' ) . attr ( ' data - year ' ) ;
var remove <CAM> range <CAM> from <CAM> content <CAM> state = require ( ' remove <CAM> range <CAM> from <CAM> content <CAM> state ' ) ; var split <CAM> block <CAM> in <CAM> content <CAM> state:==:require ( ' split <CAM> block <CAM> in <CAM> content <CAM> state ' ) ;
var level4 = db . model ( ' level <UND> 4 ' , level4 <CAM> schema ) ; var level3:==:db . model ( ' level <UND> 3 ' , level3 <CAM> schema ) ;
var I32 = new primitive <CAM> type ( ' I32 ' , 4 , ' i ' , -0x80000000 , 0x7fffffff ) ; var U8:==:new primitive <CAM> type ( ' U8 ' , 1 , ' i ' , 0 , 255 ) ;
var mixins = taffy ( members . mixins ) ; var externals:==:taffy ( members . externals ) ;
var event <CAM> plugin <CAM> utils = require ( ' event <CAM> plugin <CAM> utils ' ) ; var event <CAM> propagators:==:require ( ' event <CAM> propagators ' ) ;
var month <CAM> start = Calc . month <CAM> start ; var performance:==:require ( ' performance ' ) ;
var operation = req . service . api . operations [ req . operation ] ; var output:==:operation . output ;
var container = pos . container ( ) ; var offset:==:pos . offset ( ) ;
var totalX = t . totalX ; var totalY:==:t . totalY ;
var consolidate = require ( ' consolidate ' ) var express:==:require ( ' express ' )
var VALID = ' VALID ' ; var INVALID:==:' INVALID ' ;
var b = fulfill <CAM> thenable <CAM> soon ( ' b ' , 30 ) ; var c:==:fulfill <CAM> soon ( ' c ' , 10 ) ;
var start = group . start ; var count:==:group . count ;
var bone <CAM> matrices = this . bone <CAM> matrices ; var bone <CAM> texture:==:this . bone <CAM> texture ;
var optimist = require ( ' optimist ' ) ; var util:==:require ( ' util ' ) ;
var device = scope . device ( ) var control:==:scope . control ( )
var collection = db . collection ( ' test <UND> should <UND> throw <UND> error <UND> if <UND> serializing <UND> function <UND> 1 ' ) ; var func:==:function ( ) return 1 ;
var flags = index . flagsvar cells:==:index . cells
var jshint = require ( ' gulp - jshint ' ) ; var each:==:require ( ' gulp - each ' ) ;
var scene = object . _ scene ; var camera:==:scene . camera ;
var column = args . column ; var menu:==:column . header & & column . header . menu ;
var length = input . length ; var dimension:==:opt <UND> dimension !    undefined ? opt <UND> dimension : 2 ;
var left = left <CAM> func ( segment . left <CAM> col ) ; var right:==:right <CAM> func ( segment . right <CAM> col ) ;
var Post = hexo . model ( ' Post ' ) ; var Category:==:hexo . model ( ' Category ' ) ;
var a = w . agents [ 0 ] ; var b:==:a . brain ;
var follow <CAM> surface = simple <CAM> polyline <CAM> geometry . _ follow <CAM> surface ; var granularity:==:simple <CAM> polyline <CAM> geometry . _ granularity ;
var validate <CAM> find <CAM> request = local <CAM> utils . validate <CAM> find <CAM> request ; var validate <CAM> sort:==:local <CAM> utils . validate <CAM> sort ;
var _ jm = 156 ; values [ _ jm ] = _ jm ; var _ jn:==:157 ; values [ _ jn ]    _ jn ;
var with <CAM> statement = traceur . syntax . trees . with <CAM> statement ; var yield <CAM> statement:==:traceur . syntax . trees . yield <CAM> statement ;
var tween = tweens [ i ] ; var target:==:tween . _ target ;
var slice = Array . prototype . slice ; var join:==:Array . prototype . join ;
var grey800 = exports . grey800 = ' # 424242 ' ; var grey900:==:exports . grey900    ' # 212121 ' ;
var texture <CAM> index <CAM> buffer = this . _ texture <CAM> index <CAM> buffer ; var uv <CAM> position <CAM> buffer:==:this . _ uv <CAM> position <CAM> buffer ;
var support <CAM> constant = exports . support <CAM> constant = ' absolute | after - edge | after | all - scroll | all | alphabetic | always | antialiased | armenian | auto | avoid - column | avoid - page | avoid | balance | baseline | before - edge | before | below | bidi - override | block - line - height | block | bold | bolder | border - box | both | bottom | box | break - all | break - word | capitalize | caps - height | caption | center | central | char | circle | cjk - ideographic | clone | close - quote | col - resize | collapse | column | consider - shifts | contain | content - box | cover | crosshair | cubic - bezier | dashed | decimal - leading - zero | decimal | default | disabled | disc | disregard - shifts | distribute - all - lines | distribute - letter | distribute - space | distribute | dotted | double | e - resize | ease - in | ease - in - out | ease - out | ease | ellipsis | end | exclude - ruby | fill | fixed | georgian | glyphs | grid - height | groove | hand | hanging | hebrew | help | hidden | hiragana - iroha | hiragana | horizontal | icon | ideograph - alpha | ideograph - numeric | ideograph - parenthesis | ideograph - space | ideographic | inactive | include - ruby | inherit | initial | inline - block | inline - box | inline - line - height | inline - table | inline | inset | inside | inter - ideograph | inter - word | invert | italic | justify | katakana - iroha | katakana | keep - all | last | left | lighter | line - edge | line - through | line | linear | list - item | local | loose | lower - alpha | lower - greek | lower - latin | lower - roman | lowercase | lr - tb | ltr | mathematical | max - height | max - size | medium | menu | message - box | middle | move | n - resize | ne - resize | newspaper | no - change | no - close - quote | no - drop | no - open - quote | no - repeat | none | normal | not - allowed | nowrap | nw - resize | oblique | open - quote | outset | outside | overline | padding - box | page | pointer | pre - line | pre - wrap | pre | preserve-3d | progress | relative | repeat - x | repeat - y | repeat | replaced | reset - size | ridge | right | round | row - resize | rtl | s - resize | scroll | se - resize | separate | slice | small - caps | small - caption | solid | space | square | start | static | status - bar | step - end | step - start | steps | stretch | strict | sub | super | sw - resize | table - caption | table - cell | table - column - group | table - column | table - footer - group | table - header - group | table - row - group | table - row | table | tb - rl | text - after - edge | text - before - edge | text - bottom | text - size | text - top | text | thick | thin | transparent | underline | upper - alpha | upper - latin | upper - roman | uppercase | use - script | vertical - ideographic | vertical - text | visible | w - resize | wait | whitespace | z - index | zero ' ; var support <CAM> constant <CAM> color:==:exports . support <CAM> constant <CAM> color    ' aqua | black | blue | fuchsia | gray | green | lime | maroon | navy | olive | orange | purple | red | silver | teal | white | yellow ' ;
var state = options ? options . state : nullvar title:==:options ? options . title : null
var hbox <CAM> upload <CAM> no <CAM> folders = plugin . get <CAM> element ( ' hbox <CAM> upload <CAM> no <CAM> folders ' ) ; var hbox <CAM> upload <CAM> with <CAM> folders:==:plugin . get <CAM> element ( ' hbox <CAM> upload <CAM> with <CAM> folders ' ) ;
var visual <CAM> map <CAM> model = this . visual <CAM> map <CAM> model ; var option:==:visual <CAM> map <CAM> model . option ;
var geometry = this . geometry ; var material:==:this . material ;
var order <CAM> id = o <CAM> event . get <CAM> parameter ( ' arguments ' ) . order <CAM> id ; var product <CAM> id:==:o <CAM> event . get <CAM> parameter ( ' arguments ' ) . product <CAM> id
var draw <CAM> width = this . draw <CAM> width ; var draw <CAM> height:==:this . draw <CAM> height ;
var file = e . files [ i ] var range:==:request . headers . range
var left = left <CAM> padding + left <CAM> padding <CAM> addition ; var top:==:top <CAM> padding + top <CAM> padding <CAM> addition ;
var readline = require ( ' readline ' ) var path:==:require ( ' path ' )
var save = imports . save ; var tooltip:==:imports . tooltip ;
var neighbors <CAM> significance = this . neighbors <CAM> significance ; var significance <CAM> state:==:this . significance <CAM> state ;
var db = new PouchDB ( dbs . name ) ; var remote:==:new PouchDB ( dbs . remote ) ;
var wraphtml <CAM> collection = scope . wraphtml <CAM> collection ; var unwrap:==:scope . unwrap ;
var onsuccess = opts . onsuccess ; var onerror:==:opts . onerror ;
var x = this . x <CAM> data = this . pickx <CAM> data = options . x ; var y:==:this . y <CAM> data    this . picky <CAM> data    options . y ;
var min = data . min ; var data:==:data . data ;
var chain = require ( ' slide ' ) . chainvar iferr:==:require ( ' iferr ' )
var parse <CAM> bytes = utils . parse <CAM> bytes ; var cached <CAM> property:==:utils . cached <CAM> property ;
var parent = event . target . parent <CAM> node ; var thread <CAM> id:==:parent . dataset . thread <CAM> id ;
var web <CAM> driver = require ( ' selenium - webdriver ' ) . web <CAM> driver ; var web <CAM> element:==:require ( ' selenium - webdriver ' ) . web <CAM> element ;
var layout = this . layer . layout ; var features:==:this . features ;
var message <CAM> type = ( key <CAM> message . message <CAM> type ) ? key <CAM> message . message <CAM> type : ' license - request ' ; var message:==:key <CAM> message . message ;
var i = this . index++ ; var array:==:this . array ;
var unwrap = shadowdom <CAM> polyfill . unwrap ; var wrap:==:shadowdom <CAM> polyfill . wrap ;
var gl = plot . glvar shader:==:create <CAM> shader ( gl , shaders . vertex ,   shaders . fragment )
var parser = require ( ' engine . io - parser ' ) ; var inherit:==:require ( ' component - inherit ' ) ;
var is <CAM> fading = this . _ animation . _ is <CAM> fading ; var i:==:this . _ bone <CAM> list . length ;
var orangeA200 = exports . orangeA200 = ' # ffab40 ' ; var orangeA400:==:exports . orangeA400    ' # ff9100 ' ;
var type = options & & options . type  |  |  this . _ options . type ; var filter:==:options & & options . filter ;
var join    = require ( ' path ' ) . join ; var connect:==:require ( ' connect ' ) ;
var scroll <CAM> top = host <CAM> document <CAM> element . $ . scroll <CAM> top ; var scroll <CAM> left:==:host <CAM> document <CAM> element . $ . scroll <CAM> left ;
var useragent = Npm . require ( ' useragent ' ) ; var send:==:Npm . require ( ' send ' ) ;
var loop = S . in <UND> loop ; var labels:==:S . labels ;
var after = parse <CAM> int ( after <CAM> el . attr ( ' data - index ' ) , 10 )  |  |  0 ; var tid:==:ajaxify . data . tid ;
var w = bb . width ; var h:==:bb . height ;
var duplexer = require ( ' duplexer2 ' ) ; var subarg:==:require ( ' subarg ' ) ;
var error <UND> uri = _ ref . error <UND> uri ; var state:==:_ ref . state ;
var tab <CAM> index = _ props3 . tab <CAM> index ; var type:==:_ props3 . type ;
var old <CAM> height    = pair . value . old <CAM> height ; var new <CAM> height:==:pair . value . new <CAM> height ;
var session    = zombie <UND> array [ index ] [ ' session ' ] ; var browser <UND> name:==:zombie <UND> array [ index ] [ ' browser <UND> name ' ] ;
var Formatting = js <CAM> common . Formatting ; var reg <CAM> exp <CAM> extensions:==:js <CAM> common . reg <CAM> exp <CAM> extensions ;
var item = this . item <CAM> set . item <CAM> from <CAM> target ( event ) ; var group:==:this . item <CAM> set . group <CAM> from <CAM> target ( event ) ;
var is <CAM> broadcast = app <CAM> peers <CAM> manager . is <CAM> broadcast ( peerID ) var is <CAM> megagroup:==:app <CAM> peers <CAM> manager . is <CAM> megagroup ( peerID )
var is <CAM> mobile = utils . device . is <CAM> mobile ( ) ; var register <CAM> element:==:re . register <CAM> element ;
var parent = node . parent <CAM> nodevar c:==:watcher . placeholder    create <CAM> anchor ( ' if ' )
var addon <CAM> test <CAM> app = require ( ' ember - cli - addon - tests ' ) . addon <CAM> test <CAM> app ; var request:==:require ( ' request ' ) ;
var promise = this . _ promise0 ; var receiver:==:this . _ receiver <CAM> at ( 0 ) ;
var title = options . title  |  |  gettext ( ' Are you sure ? ' ) ; var message:==:options . message  |  |  ' ' ;
var data <CAM> label <CAM> horizontal <CAM> position = powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> horizontal <CAM> position , visuals . reference <CAM> line <CAM> data <CAM> label <CAM> horizontal <CAM> position . left ) ; var data <CAM> label <CAM> vertical <CAM> position:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> vertical <CAM> position , visuals . reference <CAM> line <CAM> data <CAM> label <CAM> vertical <CAM> position . above ) ;
var Sku = db . model ( ' Sku ' , , ' gh2841 <UND> 0 ' ) ; var Item:==:db . model ( ' Item ' ,
var collab <CAM> panel = imports . collab <CAM> panel ; var collab:==:imports . collab ;
var filename = attrs . filename = node . file . full <CAM> path ; var str:==:node . file . str ;
var target = this . _ parent <CAM> pane . _ target ; var rule:==:this . rule ( ) ;
var text = options . has <CAM> own <CAM> property ( ' text ' ) ? options . text : ' Search ' ; var button:==:options . button ;
var origin = context . origin ; var size:==:context . size ;
var current = options . current  |  |  this . page . current  |  |  0 ; var total:==:options . total  |  |  this . page . total  |  |  1 ;
var assert = require ( ' assert ' ) ; var source <CAM> map <CAM> consumer:==:require ( ' source - map ' ) . source <CAM> map <CAM> consumer ;
var btn1 = plugin . get <CAM> element ( ' btn1 ' ) ; var btn3:==:plugin . get <CAM> element ( ' btn3 ' ) ;
var data <CAM> label <CAM> utils = powerbi . visuals . data <CAM> label <CAM> utils ; var text <CAM> measurement <CAM> service:==:powerbi . text <CAM> measurement <CAM> service ;
var curr = state . tokens . curr ; var next:==:state . tokens . next ;
var rotate = data . rotate ; var scaleX:==:data . scaleX ;
var offsetX = parse <CAM> int ( dom . offsetX . value , 10 ) ; var offsetY:==:parse <CAM> int ( dom . offsetY . value , 10 ) ;
var Promise = require ( ' Promise ' ) ; var rct <CAM> device <CAM> event <CAM> emitter:==:require ( ' rct <CAM> device <CAM> event <CAM> emitter ' ) ;
var should = require ( ' should ' ) ; var fs:==:require ( ' fs ' ) ;
var xa = point <CAM> data . xa ; var ya:==:point <CAM> data . ya ;
var canvas <CAM> graphics = display <CAM> canvas . canvas <CAM> graphics ; var create <CAM> scratch <CAM> canvas:==:display <CAM> canvas . create <CAM> scratch <CAM> canvas ;
var polyline <CAM> decorator <CAM> plugin = leaflet <CAM> helpers . polyline <CAM> decorator <CAM> plugin ; var is <CAM> defined:==:leaflet <CAM> helpers . is <CAM> defined ;
var encrypted = socket . request ? ! ! socket . request . connection . encrypted : false ; var host:==:headers . host ;
var events = require ( ' events ' ) ; var chai:==:require ( ' chai - nightwatch ' ) ;
var validator = v . validator ; var message:==:v . message ;
var findit = require ( ' findit ' ) ; var path:==:require ( ' path ' ) ;
var Keys = require ( ' Keys ' ) ; var user <CAM> agent:==:require ( ' user <CAM> agent ' ) ;
var Finally = traceur . syntax . trees . Finally ; var for <CAM> in <CAM> statement:==:traceur . syntax . trees . for <CAM> in <CAM> statement ;
var outline <CAM> color = Property . get <CAM> value <CAM> or <CAM> cloned <CAM> default ( ellipse . outline <CAM> color , time , Color . BLACK , scratch <CAM> color ) ; var outline <CAM> width:==:Property . get <CAM> value <CAM> or <CAM> default ( ellipse . outline <CAM> width , time , 1 . 0 ) ;
var crypto = require ( ' crypto ' ) ; var stream:==:require ( ' stream ' ) ;
var print <CAM> container = this . print <CAM> container ; var body:==:document . query <CAM> selector ( ' body ' ) ;
var item = result . rows . item ( i ) ; var metadata:==:vuvuzela . parse ( item . metadata ) ;
var user = $ scope . store <CAM> login . username . $ model <CAM> valuevar pass:==:$ scope . store <CAM> login . password . $ model <CAM> value
var hide <CAM> if <CAM> no <CAM> prev <CAM> next = this . _ get ( inst , ' hide <CAM> if <CAM> no <CAM> prev <CAM> next ' ) ; var navigation <CAM> as <CAM> date <CAM> format:==:this . _ get ( inst , ' navigation <CAM> as <CAM> date <CAM> format ' ) ;
var tier = tiers [ index ] ; var th:==:document . create <CAM> element ( ' th ' ) ;
var is <CAM> defined = angular . is <CAM> defined ; var is <CAM> function:==:angular . is <CAM> function ;
var env = process . env . NODE <UND> ENV ; var PACKAGE <UND> NAME:==:config <CAM> factory . PACKAGE <UND> NAME ;
var port1 = channel . port1 ; var port2:==:channel . port2 ;
var Image = require ( ' Image ' ) ; var style <CAM> sheet:==:require ( ' style <CAM> sheet ' ) ;
var render = vdom ( $ window ) . rendervar a:==:tag : ' input '
var display <CAM> name = powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . display <CAM> name ) ; var line <CAM> color:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . line <CAM> color ) ;
var cancel = on <CAM> evt ( el , ' touchcancel ' , on <CAM> released <CAM> item , this ) ; var scroll:==:on <CAM> evt ( window , ' scroll ' , on <CAM> released <CAM> item , this ) ;
var graph = data . graph ; var data <CAM> type:==:el . data <CAM> type ;
var on <CAM> row <CAM> mouse <CAM> over = _ props3 . on <CAM> row <CAM> mouse <CAM> over ; var on <CAM> row <CAM> mouse <CAM> out:==:_ props3 . on <CAM> row <CAM> mouse <CAM> out ;
var disable <CAM> keyboard <CAM> focus = _ props3 . disable <CAM> keyboard <CAM> focus ; var disable <CAM> touch <CAM> ripple:==:_ props3 . disable <CAM> touch <CAM> ripple ;
var dx = Math . max ( 0 , Math . min ( bounds . width , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:Math . max ( 0 , Math . min ( 1 , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var context = data . context ; var dependencies:==:data . dependencies ;
var url = url <CAM> templates [ ( x + tmsY + level ) % url <CAM> templates . length ] . replace ( ' z ' , level ) . replace ( ' x ' , x ) . replace ( ' y ' , tmsY ) ; var proxy:==:this . _ proxy ;
var pass = passes [ pass <CAM> name ] ; var instance <CAM> program:==:pass . instance <CAM> program ;
var traits = group . traits ( ) ; var user:==:this . analytics . user ( ) ;
var character <CAM> spacing = get <CAM> style <CAM> property ( , style <CAM> context <CAM> stack , ' character <CAM> spacing ' , 0 ) ; var font:==:this . font <CAM> provider . provide <CAM> font ( font <CAM> name , bold , italics ) ;
var src = _ props . src ; var style:==:_ props . style ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var fs:==:require ( ' fs - extra ' ) ;
var Text = react <CAM> canvas . Text ; var font <CAM> face:==:react <CAM> canvas . font <CAM> face ;
var react <CAM> test <CAM> utils = require ( ' react <CAM> test <CAM> utils ' ) ; var change <CAM> event <CAM> plugin:==:require ( ' change <CAM> event <CAM> plugin ' ) ;
var render <CAM> photo = this . opts . render <CAM> photo ; var skip:==:render <CAM> opts . skip  |  |  [ ] ;
var digest = attachment . digest ; var type:==:attachment . content <UND> type ;
var p = a . opaque ; var b:==:a . mb <UND> w ;
var x = data [ i ] . x ; var y:==:data [ i ] . y ;
var Buffer = require ( ' safe - buffer ' ) . Buffervar bs58check:==:require ( ' bs58check ' )
var runners = util . clone <CAM> object ( options . runners ) ; var testing:==:options . testing ;
var array = this . array ; var promise:==:array . _ promise ;
var categories = categorical & & categorical . categories  |  |  [ ] ; var values:==:categorical & & categorical . values  |  |  [ ] ;
var http = require ( ' http ' ) ; var read:==:require ( ' fs ' ) . read <CAM> file <CAM> sync ;
var y = readmp <CAM> int ( der , ' y ' ) ; var x:==:readmp <CAM> int ( der , ' x ' ) ;
var elements = this . elements ; var type:==:evt . detail . prompt <CAM> type  |  |  evt . detail . type ;
var _ ki = 168 ; values [ _ ki ] = _ ki ; var _ kj:==:169 ; values [ _ kj ]    _ kj ;
var _ ah = 7 ; values [ _ ah ] = _ ah ; var _ ai:==:8 ; values [ _ ai ]    _ ai ;
var find <CAM> in <CAM> block = function find <CAM> in <CAM> block ( header <CAM> block ) var headers:==:header <CAM> block . headers ;
var outline <CAM> width = rectangle . outline <CAM> width ; var close <CAM> bottom:==:rectangle . close <CAM> bottom ;
var name <CAM> map = month <CAM> label . get ( ' name <CAM> map ' ) ; var margin:==:month <CAM> label . get ( ' margin ' ) ;
var rectangle = Rectangle . clone ( rectangle <CAM> geometry . _ rectangle , rectangle <CAM> scratch ) ; var ellipsoid:==:rectangle <CAM> geometry . _ ellipsoid ;
var data = this . data ; var path:==:require ( ' path ' ) ;
var candle = _ . first ( candles ) ; var spy:==:sinon . spy ( ) ;
var _ bn = 29 ; values [ _ bn ] = _ bn ; var _ bo:==:30 ; values [ _ bo ]    _ bo ;
var minify   = require ( ' gulp - minify - css ' ) ; var plumber:==:require ( ' gulp - plumber ' ) ;
var x = this . origin . x + this . offset . x + this . tween . x ; var y:==:this . origin . y + this . offset . y + this . tween . y ;
var node = model . nodes [ data . node ] ; var mesh:==:model . meshes [ data . mesh ] ;
var video = video <CAM> interface  |  |  document . create <CAM> element ( ' video ' ) var url:==:this . get <CAM> item <CAM> property ( obj , options . url <CAM> property )
var width = this . width ; var height:==:this . params . height * this . params . pixel <CAM> ratio ;
var del = require ( ' del ' ) ; var debug:==:require ( ' gulp - debug ' ) ;
var extrude = query <CAM> boolean <CAM> value ( geometry <CAM> node , ' extrude ' , namespaces . kml ) ; var altitude <CAM> mode:==:query <CAM> string <CAM> value ( geometry <CAM> node , ' altitude <CAM> mode ' , namespaces . kml ) ;
var light <CAM> blue300 = exports . light <CAM> blue300 = ' # 4fc3f7 ' ; var light <CAM> blue400:==:exports . light <CAM> blue400    ' # 29b6f6 ' ;
var distance = data . distance ; var ground <CAM> color:==:new THREE . Color ( data . ground <CAM> color ) . get <CAM> hex ( ) ;
var line = lines [ error . line - 1 ] ; var start:==:starts [ error . line - 1 ] ;
var size = context . size ; var opacity:==:context . opacity ;
var units = time . units ; var domain:==:this . graph . x . domain ( ) ;
var style <CAM> layer = style <CAM> layers [ i d ] ; var paint:==:style <CAM> layer . paint ;
var session = e . session ; var editor:==:e . editor ;
var create <CAM> argument <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> argument <CAM> list ; var create <CAM> assignment <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> expression ;
var size = gd . _ full <CAM> layout . _ size ; var domain:==:gd . _ full <CAM> data [ d . model . key ] . domain ;
var module = this [ ' @module ' ] ; var keys:==:Object . keys ( module ) ;
var clear <CAM> selection = t . clear <CAM> selection ; var get <CAM> hover <CAM> listener:==:t . get <CAM> hover <CAM> listener ;
var typescript = require ( ' gulp - typescript ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var s = f ( sv . get ( ) ) ; var d:==:dv . get ( ) ;
var frecords = $ ( ' # grid <UND> '+ this . name + ' _ frecords ' ) ; var scroll1:==:$ ( ' # grid <UND> '+ this . name + ' _ scroll1 ' ) ;
var height = options . height ; var max <CAM> height:==:options . max <CAM> height ;
var before <CAM> each = test . before <CAM> each ; var after <CAM> each:==:test . after <CAM> each ;
var user <CAM> agent = require ( ' user <CAM> agent ' ) ; var find <CAM> ancestor <CAM> offset <CAM> key:==:require ( ' find <CAM> ancestor <CAM> offset <CAM> key ' ) ;
var fixtures = require ( ' webtorrent - fixtures ' ) var fs:==:require ( ' fs ' )
var util = TogetherJS . require ( ' util ' ) ; var storage:==:TogetherJS . require ( ' storage ' ) ;
var r0 = this . r0 ; var r1:==:this . r1 ;
var line = target . get <CAM> attribute ( ' data - line ' ) * 1 ; var reason:==:target . get <CAM> attribute ( ' data - reason ' ) ;
var list <CAM> controller = _ js <CAM> controller <CAM> list <CAM> controller [ ' default ' ] ; var upload <CAM> view:==:_ js <CAM> view <CAM> upload <CAM> view <CAM> js [ ' default ' ] ;
var type = obj . type  |  |  ' joint <CAM> hinge ' ; var axe1:==:obj . axe1  |  |  [ 1,0,0 ] ;
var vm = require ( ' vm ' ) ; var backbone:==:require ( ' backbone ' ) ;
var react <CAM> tree <CAM> traversal = require ( ' react <CAM> tree <CAM> traversal ' ) ; var accumulate <CAM> into:==:require ( ' accumulate <CAM> into ' ) ;
var granule = granules [ gr ] ; var modes:==:this . modes ;
var scm = imports . scm ; var settings:==:imports . settings ;
var user <CAM> agent = require ( ' user <CAM> agent ' ) ; var get <CAM> entity <CAM> key <CAM> for <CAM> selection:==:require ( ' get <CAM> entity <CAM> key <CAM> for <CAM> selection ' ) ;
var video <CAM> send <CAM> codec = options . video <CAM> send <CAM> codec  |  |  '' ; var video <CAM> recv <CAM> codec:==:options . video <CAM> recv <CAM> codec  |  |  '' ;
var pitch <CAM> adjust <CAM> height = options . pitch <CAM> adjust <CAM> height ; var easing <CAM> function:==:options . easing <CAM> function ;
var x = float32 <CAM> array [ index + i*5 ] ; var y:==:float32 <CAM> array [ index + i*5 + 1 ] ;
var webpack = require ( ' webpack - stream ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var cursor <CAM> layer = imports . cursor <CAM> layer ; var author <CAM> layer:==:imports . author <CAM> layer ;
var pm2 = require ( ' pm2 ' ) ; var nodemailer:==:require ( ' nodemailer ' ) ;
var path = require ( ' path ' ) var mkdir:==:require ( ' mkdirp ' )
var satisfactory = get <CAM> range <CAM> value ( categorical <CAM> values . Satisfactory , settings . values . satisfactory <CAM> percent ) ; var good:==:get <CAM> range <CAM> value ( categorical <CAM> values . Good , settings . values . good <CAM> percent ) ;
var ONESEC = constants . ONESEC ; var EPOCHJD:==:constants . EPOCHJD ;
var f = Object . get <CAM> own <CAM> property <CAM> descriptor ( eval ( ' ( class ' + prefix + source + suffix + ' ) ' ) . prototype , ' f ' ) [ get <CAM> or <CAM> set ] ; var f:==:Object . get <CAM> own <CAM> property <CAM> descriptor ( eval ( ' ( classstatic ' + prefix + source + suffix + ' ) ' ) , ' f ' ) [ get <CAM> or <CAM> set ] ;
var util = require ( ' gulp - util ' ) ; var nodemon:==:require ( ' nodemon ' ) ;
var app <CAM> id = this . params _ . callstats <CAM> params . app <CAM> id ; var app <CAM> secret:==:this . params _ . callstats <CAM> params . app <CAM> secret ;
var month <CAM> day = app . month <CAM> day ; var events:==:month <CAM> day . events ;
var safe <CAM> apply = leaflet <CAM> helpers . safe <CAM> apply ; var is <CAM> valid <CAM> center:==:leaflet <CAM> helpers . is <CAM> valid <CAM> center ;
var w = target <UND> width * scale ; var h:==:target <UND> height * scale ;
var parent <CAM> object = Parse . Object . extend ( ' parent <CAM> object ' ) ; var child <CAM> object:==:Parse . Object . extend ( ' child <CAM> object ' ) ;
var token = tokens [ 0 ] ; var t:==:token . text ;
var aug = this . vexpr ( auge ) ; var val:==:this . vexpr ( s . value ) ;
var Commit = Git . Commit ; var Ref:==:Git . Ref ;
var base <CAM> test <CAM> channel = goog . labs . net . web <CAM> channel . base <CAM> test <CAM> channel ; var web <CAM> channel <CAM> debug:==:goog . labs . net . web <CAM> channel . web <CAM> channel <CAM> debug ;
var value = this . value ; var length:==:value . length ;
var trace <CAM> type = js <CAM> common . trace <CAM> type ; var js <CAM> common:==:window . js <CAM> common ;
var text = document . get <CAM> element <CAM> by <CAM> id ( ' srctext ' ) ; var tts <CAM> status <CAM> box:==:document . get <CAM> element <CAM> by <CAM> id ( ' tts <CAM> status <CAM> box ' ) ;
var scheduler = this . scheduler ; var subject:==:this . subject ;
var document = window . document ; var Element:==:window . Element ;
var drop <CAM> target = default <CAM> value ( options . drop <CAM> target , viewer . container ) ; var clamp <CAM> to <CAM> ground:==:default <CAM> value ( options . clamp <CAM> to <CAM> ground , true ) ;
var header = document . get <CAM> element <CAM> by <CAM> id ( ' header ' ) var sidebar:==:document . query <CAM> selector ( ' . sidebar ' )
var Node = scope . wrappers . Node ; var get <CAM> elements <CAM> by <CAM> interface:==:scope . get <CAM> elements <CAM> by <CAM> interface ;
var conditional <CAM> expression = traceur . syntax . trees . conditional <CAM> expression ; var default <CAM> clause:==:traceur . syntax . trees . default <CAM> clause ;
var parse <CAM> tree <CAM> visitor = traceur . syntax . parse <CAM> tree <CAM> visitor ; var Symbol:==:traceur . semantics . symbols . Symbol ;
var event <CAM> emitter = require ( ' events ' ) . event <CAM> emittervar util:==:require ( ' util ' )
var categories = categorical . categories  |  |  [ ] ; var values:==:categorical . values ;
var assert = require ( ' assert - plus ' ) ; var mime:==:require ( ' mime ' ) ;
var date <CAM> interval <CAM> format = goog . require ( ' goog . i18n . date <CAM> interval <CAM> format ' ) ; var date <CAM> range:==:goog . require ( ' goog . date . date <CAM> range ' ) ;
var active = _ is <CAM> string ( _ spec ) ? true : _ spec . active ! = = false ; var posse:==:_ posses [ posse <CAM> id ]  |  |  ( function ( )
var utils = require ( ' utils ' ) ; var prefs:==:require ( ' prefs ' ) ;
var canvas = chart . canvas ; var aspect <CAM> ratio:==:( options . maintain <CAM> aspect <CAM> ratio & & chart . aspect <CAM> ratio )  |  |  null ;
var exaggeration = parameters . exaggeration ; var minimum <CAM> height:==:parameters . minimum <CAM> height * exaggeration ;
var entity = this . entity ; var shape:==:data . shape ;
var AFTER <UND> UNSUBSCRIPTION <UND> ID = nconf . get ( ' AFTER <UND> UNSUBSCRIPTION <UND> ID ' ) ; var BEFORE <UND> UNSUBSCRIPTION <UND> ID:==:nconf . get ( ' BEFORE <UND> UNSUBSCRIPTION <UND> ID ' ) ;
var from = alias . from ( ) ; var to:==:alias . to ( ) ;
var options = $ . options ; var subpages:==:options . subpages  |  |  [ ] ;
var key1 = ' key1 ' , comp1 = content : ' some thing in comp1 ' ; var comp2:==:name : ' key2 ' , content : ' some thing in comp2 ' ;
var velocity <CAM> randomness = options . velocity <CAM> randomness ! = = undefined ? options . velocity <CAM> randomness : 0 ; var color <CAM> randomness:==:options . color <CAM> randomness !    undefined ? options . color <CAM> randomness : 1 ;
var element = this . element , that = this , new <UND> step = step - 1 ; var o:==:this . options ;
var a = h ( ' div ' , attributes : foo : ' bar ' , bar : ' oops ' ) var b:==:h ( ' div ' , attributes : foo : ' baz ' , bar : ' oops ' )
var y <CAM> table = this . _ y <CAM> table ; var interpolation <CAM> algorithm:==:this . _ interpolation <CAM> algorithm ;
var elements = params . elements ; var inputs:==:params . inputs ;
var a = ( tubular <CAM> segments + 1 ) * j + i - 1 ; var b:==:( tubular <CAM> segments + 1 ) * ( j - 1 ) + i - 1 ;
var text = opt . text |  | ''var font:==:opt . font
var skeleton = this . skeleton ; var premultiplied <CAM> alpha:==:this . config . premultiplied <CAM> alpha ;
var low = _ ref5 . low ; var offset:==:_ ref5 . offset ;
var uvs    = opts & & opts . uvs ! = = undefined ? opts . uvs : null ; var uvs1:==:opts & & opts . uvs1 !    undefined ? opts . uvs1 : null ;
var attrib = $ this . data ( ' attrib ' ) ; var device <UND> id:==:$ this . data ( ' device <UND> id ' ) ;
var max = new Date ( range . max . value <CAM> of ( ) + interval * 0 . 01 ) ; var animation:==:options & & options . animation !    undefined ? options . animation : true ;
var tmp = sphereTrimesh <UND> tmp ; var local <CAM> sphereaabb:==:sphereTrimesh <UND> localSphereAABB ;
var fs = require ( ' fs ' ) ; var bunyan:==:require ( ' bunyan ' ) ;
var a = Stream ( 1 ) var b:==:Stream . combine ( function ( )
var word <CAM> spacing = current . word <CAM> spacing ; var texth <CAM> scale:==:current . texth <CAM> scale * font <CAM> direction ;
var cos = Math . cos ( -alpha ) ; var sin:==:Math . sin ( -alpha ) ;
var debug = require ( ' debug ' ) ( ' loopback : security : role ' ) ; var assert:==:require ( ' assert ' ) ;
var path = require ( ' path ' ) ; var spawn:==:require ( ' win - spawn ' ) ;
var PROCESSING <UND> INSTRUCTION <UND> NODE = node <CAM> type . PROCESSING <UND> INSTRUCTION <UND> NODE = 7 ; var COMMENT <UND> NODE:==:node <CAM> type . COMMENT <UND> NODE       8 ;
var reactdom <CAM> component <CAM> flags = require ( ' reactdom <CAM> component <CAM> flags ' ) ; var reactdom <CAM> component <CAM> tree:==:require ( ' reactdom <CAM> component <CAM> tree ' ) ;
var option <CAM> class <CAM> name = _ ref . option <CAM> class <CAM> name ; var option <CAM> component:==:_ ref . option <CAM> component ;
var instances = parameters . instances ; var length:==:instances . length ;
var https = require ( ' https ' ) ; var querystring:==:require ( ' querystring ' ) ;
var text <CAM> operation = firepad . text <CAM> operation ; var Client:==:firepad . Client ;
var b = locations [ bi ] ; var c:==:locations [ ci ] ;
var vm = require ( ' vm ' ) ; var concat:==:require ( ' concat - stream ' ) ;
var g = this . g . to <CAM> string ( 16 ) ; var b:==:this . b . to <CAM> string ( 16 ) ;
var Stream = require ( ' stream ' ) . Stream ; var util:==:require ( ' util ' ) ;
var location = ref . location ; var route:==:ref . route ;
var longname <CAM> to <CAM> url = exports . longname <CAM> to <CAM> url = link <CAM> map . longname <CAM> to <CAM> url ; var longname <CAM> to <CAM> id:==:exports . longname <CAM> to <CAM> id    link <CAM> map . longname <CAM> to <CAM> id ;
var fs = require ( ' graceful - fs ' ) ; var intersect:==:require ( ' intersect ' ) ;
var day = get <CAM> option ( options , ' day ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ; var hour:==:get <CAM> option ( options , ' hour ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ;
var sum64 <UND> 5 <UND> lo = utils . sum64 <UND> 5 <UND> lo ; var block <CAM> hash:==:hash . common . block <CAM> hash ;
var data <CAM> grid <CAM> page = options . data <CAM> grid <CAM> page ? options . data <CAM> grid <CAM> page : $ ( ' # data <CAM> grid <CAM> page ' ) ; var search <CAM> form:==:options . search <CAM> form ? options . search <CAM> form : $ ( ' # search <CAM> form ' ) ;
var event <CAM> plugin <CAM> registry = require ( ' event <CAM> plugin <CAM> registry ' ) ; var reactdom <CAM> event <CAM> listener:==:require ( ' reactdom <CAM> event <CAM> listener ' ) ;
var HAS <UND> IOS <UND> FULLSCREEN = exports . HAS <UND> IOS <UND> FULLSCREEN = hasios <CAM> full <CAM> screen ; var HAS <UND> TRUE <UND> NATIVE <UND> FULLSCREEN:==:exports . HAS <UND> TRUE <UND> NATIVE <UND> FULLSCREEN    has <CAM> true <CAM> native <CAM> full <CAM> screen ;
var create <CAM> boolean <CAM> literal = parse <CAM> tree <CAM> factory . create <CAM> boolean <CAM> literal ; var create <CAM> call <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ;
var node <CAM> list = scope . wrappers . node <CAM> list ; var define <CAM> wrap <CAM> getter:==:scope . define <CAM> wrap <CAM> getter ;
var get <CAM> invalid <CAM> value <CAM> warnings = powerbi . visuals . get <CAM> invalid <CAM> value <CAM> warnings ; var data <CAM> label <CAM> utils:==:powerbi . visuals . data <CAM> label <CAM> utils ;
var addon = spec . addon ; var attribute:==:spec . attribute ;
var Menu = imports . Menu ; var menu <CAM> item:==:imports . menu <CAM> item ;
var crypto = require ( ' crypto ' ) ; var os:==:require ( ' os ' ) ;
var south = rectangle . south ; var east:==:rectangle . east ;
var uglify = require ( ' gulp - uglify ' ) ; var header:==:require ( ' gulp - header ' ) ;
var client <CAM> width = document . get <CAM> element <CAM> by <CAM> id ( ' client <CAM> width ' ) ; var abs1:==:document . get <CAM> element <CAM> by <CAM> id ( ' abs1 ' ) ;
var prefix = typeof o . prefix = = ' undefined ' & & ' assert '  |  |  o . prefix ; var include <CAM> fail:==:typeof o . include <CAM> fail     ' undefined '  |  |  ! ! o . include <CAM> fail ;
var show = powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , pulse <CAM> chart . Properties [ ' gaps ' ] [ ' show ' ] , pulse <CAM> chart . default <CAM> settings . gaps . show ) ; var visible <CAM> gaps <CAM> percentage:==:Math . max ( 1 , Math . min ( 100 , powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , pulse <CAM> chart . Properties [ ' gaps ' ] [ ' transparency ' ] , pulse <CAM> chart . default <CAM> settings . gaps . visible <CAM> gaps <CAM> percentage ) ) ) ;
var Cursor = firepad . Cursor ; var undo <CAM> manager:==:firepad . undo <CAM> manager ;
var _ bitshift64 <CAM> shl = Module [ ' _ bitshift64 <CAM> shl ' ] = asm [ ' _ bitshift64 <CAM> shl ' ] ; var run <CAM> post <CAM> sets:==:Module [ ' run <CAM> post <CAM> sets ' ]    asm [ ' run <CAM> post <CAM> sets ' ] ;
var css = obj . css ; var source <CAM> map:==:obj . source <CAM> map ;
var start = token . loc . start . line ; var end:==:token . loc . end . line ;
var parent <CAM> height   = pair . value . parent <CAM> height ; var old <CAM> height:==:pair . value . old <CAM> height ;
var webpack = require ( ' webpack ' ) var merge:==:require ( ' webpack - merge ' )
var react <CAM> native = require ( ' react <CAM> native ' ) ; var View:==:require ( ' View ' ) ;
var yellowA100 = exports . yellowA100 = ' # ffff8d ' ; var yellowA200:==:exports . yellowA200    ' # ffff00 ' ;
var callback = task . callback ; var args:==:task . args ;
var options = this . options ; var element:==:this . element ;
var Text = require ( ' Text ' ) ; var style <CAM> sheet:==:require ( ' style <CAM> sheet ' ) ;
var HAS <UND> NATIVE <UND> FULLSCREEN = exports . HAS <UND> NATIVE <UND> FULLSCREEN = has <CAM> native <CAM> fullscreen ; var HAS <UND> WEBKIT <UND> NATIVE <UND> FULLSCREEN:==:exports . HAS <UND> WEBKIT <UND> NATIVE <UND> FULLSCREEN    has <CAM> webkit <CAM> native <CAM> full <CAM> screen ;
var supertest = require ( ' supertest ' ) ( app ) ; var mm:==:require ( ' mm ' ) ;
var V = SAT . Vector ; var C:==:SAT . Circle ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var ejs:==:require ( ' gulp - ejs ' ) ;
var current <CAM> time = julian <CAM> date . from <CAM> iso8601 ( clock <CAM> packet . clock . current <CAM> time ) ; var multiplier:==:clock <CAM> packet . clock . multiplier ;
var icon = get <CAM> icon <CAM> href ( icon <CAM> node , data <CAM> source , source <CAM> uri , uri <CAM> resolver , false ) ; var x:==:query <CAM> numeric <CAM> value ( icon <CAM> node , ' x ' , namespaces . gx ) ;
var line = head . line ; var repeat:==:motion <CAM> args . repeat ;
var debug = imports . debugger ; var util:==:imports . util ;
var logger = goog . debug . Logger . get <CAM> logger ( loggers [ i ] ) ; var sel:==:dh . get <CAM> element ( ' sel ' + loggers [ i ] ) ;
var billboard = item . billboard ; var height <CAM> reference:==:Property . get <CAM> value <CAM> or <CAM> default ( point <CAM> graphics . _ height <CAM> reference , time , height <CAM> reference . NONE ) ;
var log = require ( ' npmlog ' ) var async <CAM> map:==:require ( ' slide ' ) . async <CAM> map
var selected <CAM> entity = this . selected <CAM> entity ; var position:==:selected <CAM> entity . position ;
var os = require ( ' os ' ) ; var NODE:==:exports . NODE    ' node ' ;
var rotate <CAM> mix = this . rotate <CAM> mix , translate <CAM> mix = this . translate <CAM> mix , scale <CAM> mix = this . scale <CAM> mix , shear <CAM> mix = this . shear <CAM> mix ; var target:==:this . target ;
var stack = state . stack ; var length:==:data . length ;
var Grid = ( 0 , _ react <CAM> dom . finddom <CAM> node ) ( this . Grid ) ; var client <CAM> width:==:Grid . client <CAM> width  |  |  0 ;
var pubsub = imports . pubsub ; var info:==:imports [ ' info ' ] ;
var info = fis . util . pathinfo ( file ) ; var basename:==:fis . project . get <CAM> cache <CAM> path ( dir , info . basename ) ;
var key = keys [ i ] ; var func:==:function ( err , value )
var Node = scope . wrappers . Node ; var parent <CAM> node <CAM> interface:==:scope . parent <CAM> node <CAM> interface ;
var height = j <CAM> query ( this . splitter <CAM> bar ) . height ( ) ; var width:==:j <CAM> query ( this . splitter <CAM> bar ) . width ( ) ;
var range = math . range ; var log10:==:math . log10 ;
var top = next <CAM> top  |  |  cm . char <CAM> coords ( ann . from , ' local ' ) . top * h <CAM> scale ; var bottom:==:cm . char <CAM> coords ( ann . to , ' local ' ) . bottom * h <CAM> scale ;
var Plugin = imports . Plugin ; var fs:==:imports . fs ;
var w = ( k . width - x * 16 ) ; var h:==:( k . height - y * 16 ) ;
var for <CAM> each = create <CAM> iterator ( base <CAM> iterator <CAM> options , for <CAM> each <CAM> iterator <CAM> options ) ; var map:==:create <CAM> iterator ( base <CAM> iterator <CAM> options , map <CAM> iterator <CAM> options ) ;
var type = feature . get ( ' type ' ) ; var scalerank:==:feature . get ( ' scalerank ' ) ;
var react <CAM> native <CAM> event <CAM> plugin <CAM> order = require ( ' react <CAM> native <CAM> event <CAM> plugin <CAM> order ' ) ; var react <CAM> native <CAM> global <CAM> responder <CAM> handler:==:require ( ' react <CAM> native <CAM> global <CAM> responder <CAM> handler ' ) ;
var template = options . template ; var help <CAM> area:==:options . help <CAM> area ;
var heading = e . coords . heading ; var accuracy:==:e . coords . accuracy ;
var grunt = require ( ' grunt ' ) var glob:==:require ( ' glob ' ) . sync
var context = context : true ; var s:==:goog . dom . animation <CAM> frame . create <CAM> task (
var r = Math . random ( ) ; var l:==:1 + helpers . random <CAM> int ( Math . min ( left - 1 , 20 ) ) ;
var action = delta . action ; var start:==:delta . start ;
var sibling <CAM> offset = config . sibling <CAM> offset ; var subtree <CAM> offset:==:config . subtree <CAM> offset ;
var n = frustum . near ; var f:==:frustum . far ;
var render <CAM> target = this . render <CAM> target ; var generate <CAM> mipmaps:==:render <CAM> target . texture . generate <CAM> mipmaps ;
var fill <CAM> color = style . fill <CAM> color ; var title:==:style . title  |  |  style . graphic <CAM> title ;
var tab <CAM> manager = imports . tab <CAM> manager ; var commands:==:imports . commands ;
var sinon = require ( ' sinon ' ) ; var proxyquire:==:require ( ' proxyquire ' ) ;
var rimraf = require ( ' rimraf ' ) var base:==:path . join ( _ _ dirname , path . basename ( _ _ filename , ' . js ' ) )
var center = options . center  |  |  [ 0,0,0 ] var rotation:==:options . rotation  |  |  [ 0,0,0,1 ]
var document <CAM> element = doc . document <CAM> element ; var scroll <CAM> left:==:body . scroll <CAM> left  |  |  document <CAM> element . scroll <CAM> left ;
var object = util . object ; var string:==:util . string ;
var atan = Math . atan ; var atan2:==:Math . atan2 ;
var entity = this . _ entity ; var ellipsoid:==:entity . ellipsoid ;
var cell   = this . cells [ cell <CAM> id ] var positions:==:this . positions
var attrs = this . attrs ; var outputs:==:this . info . outputs ;
var url = dom <CAM> agent . url ; var location:==:node . location ;
var session = require ( ' express - session ' ) ; var redis:==:require ( ' redis ' ) ;
var stage <CAM> width = slider . _ stage <CAM> width ; var items:==:slider . _ items ;
var docs <CAM> sidebar = require ( ' docs <CAM> sidebar ' ) ; var eject <CAM> banner:==:require ( ' eject <CAM> banner ' ) ;
var sockjs = require ( ' sockjs ' ) ; var debug:==:require ( ' debug ' ) ( ' sockjs - client : test - server : app ' ) ;
var assert = util . assert ; var walkthrough:==:util . Module ( ' walkthrough ' ) ;
var edges = triangulation . edges ; var triangles:==:triangulation . triangles ;
var util = require ( ' gulp - util ' ) ; var watch:==:require ( ' gulp - watch ' ) ;
var belongs <CAM> to = DS . belongs <CAM> to ; var run:==:Ember . run ;
var row = e . get <CAM> document <CAM> position ( ) . row ; var selection:==:editor . session . selection ;
var is <CAM> array = angular . is <CAM> array ; var is <CAM> string:==:angular . is <CAM> string ;
var name = plugin . name ; var version:==:plugin . version ;
var sum64 <UND> lo = utils . sum64 <UND> lo ; var sum64 <UND> 4 <UND> hi:==:utils . sum64 <UND> 4 <UND> hi ;
var User = db . model ( ' gh4329 ' , user <CAM> schema ) ; var Task:==:db . model ( ' gh4329 <UND> 0 ' , task <CAM> schema ) ;
var time <CAM> zone <CAM> name = get <CAM> option ( options , ' time <CAM> zone <CAM> name ' , ' string ' , [ ' short ' , ' long ' ] , undefined ) ; var hour12:==:hour ? get <CAM> option ( options , ' hour12 ' , ' boolean ' , undefined , undefined ) : undefined ;
var lineno = suspension . lineno ; var colno:==:suspension . colno ;
var y = date . year ( ) + ( period = = = ' y ' ? offset : 0 ) ; var m:==:date . month <CAM> of <CAM> year ( ) + ( period      ' m ' ? offset : 0 ) ;
var x = mouse <CAM> listener . x * glplot . pixel <CAM> ratio ; var y:==:this . canvas . height - glplot . pixel <CAM> ratio * mouse <CAM> listener . y ;
var datatype = mm . datatype = = = ' real ' ? ' number ' : undefined ; var d:==:mm . data ;
var report <CAM> events = t . report <CAM> events ; var get <CAM> event <CAM> end:==:t . get <CAM> event <CAM> end ;
var react <CAM> base <CAM> classes = require ( ' react <CAM> base <CAM> classes ' ) ; var react <CAM> children:==:require ( ' react <CAM> children ' ) ;
var glob = Promise . promisify ( require ( ' glob ' ) ) ; var path:==:require ( ' path ' ) ;
var doc = documentvar to <CAM> string:==:. to <CAM> string
var maximum <CAM> level = options . maximum <CAM> level ; var rectangle:==:default <CAM> value ( options . rectangle , tiling <CAM> scheme . rectangle ) ;
var tab = tabs . focussed <CAM> tab ; var pane:==:tabs . focussed <CAM> tab . pane ;
var pattern = selected <CAM> scheme . get ( ' pattern ' ) ; var fields:==:selected <CAM> scheme . get ( ' fields ' ) ;
var x = this . cx + r * Math . cos ( angle ) ; var y:==:this . cy - r * Math . sin ( angle ) ;
var rtc <CAM> ice <CAM> candidate = window . rtc <CAM> ice <CAM> candidate  |  |  window . mozrtc <CAM> ice <CAM> candidate ; var media <CAM> stream <CAM> track:==:window . media <CAM> stream <CAM> track ;
var NAMESPACE <UND> ERR     = exception <CAM> code . NAMESPACE <UND> ERR    = ( ( exception <CAM> message [ 14 ] = ' Invalid namespace ' ) , 14 ) ; var INVALID <UND> ACCESS <UND> ERR:==:exception <CAM> code . INVALID <UND> ACCESS <UND> ERR     ( ( exception <CAM> message [ 15 ]   ' Invalid access ' ) , 15 ) ;
var notification = element . has <CAM> class ( ' togetherjs - notification ' ) ; var modal:==:element . has <CAM> class ( ' togetherjs - modal ' ) ;
var weibo = validator . trim ( req . body . weibo ) ; var signature:==:validator . trim ( req . body . signature ) ;
var icon <CAM> style <CAM> left = _ props . icon <CAM> style <CAM> left ; var icon <CAM> style <CAM> right:==:_ props . icon <CAM> style <CAM> right ;
var format <CAM> date = FC . format <CAM> date ; var format <CAM> range:==:FC . format <CAM> range ;
var vacuum = require ( ' fs - vacuum ' ) var chain:==:require ( ' slide ' ) . chain
var Catch = traceur . syntax . trees . Catch ; var for <CAM> in <CAM> statement:==:traceur . syntax . trees . for <CAM> in <CAM> statement ;
var create <CAM> member <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> member <CAM> expression ; var create <CAM> member <CAM> lookup <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> member <CAM> lookup <CAM> expression ;
var fixed <CAM> rows <CAM> bottom = this . wt <CAM> settings . get <CAM> setting ( ' fixed <CAM> rows <CAM> bottom ' ) ; var fixed <CAM> columns:==:this . wt <CAM> settings . get <CAM> setting ( ' fixed <CAM> columns <CAM> left ' ) ;
var type <CAM> parameters = this . transform <CAM> any ( tree . type <CAM> parameters ) ; var parameter <CAM> list:==:this . transform <CAM> any ( tree . parameter <CAM> list ) ;
var rot = m . rotation ; var distance:==:m . distance ;
var User = app . models . User ; var user <CAM> identity:==:app . models . user <CAM> identity ;
var loading <CAM> placeholder = _ props2 . loading <CAM> placeholder ; var no <CAM> results <CAM> text:==:_ props2 . no <CAM> results <CAM> text ;
var member <CAM> lookup <CAM> expression = traceur . syntax . trees . member <CAM> lookup <CAM> expression ; var module <CAM> declaration:==:traceur . syntax . trees . module <CAM> declaration ;
var attributes = this . _ attributes ; var gl:==:this . _ gl ;
var overflowX = _ style . overflowX ; var overflowY:==:_ style . overflowY ;
var create <CAM> document <CAM> fragment = document . create <CAM> document <CAM> fragment ; var import <CAM> node:==:original <CAM> document . import <CAM> node ;
var subband = subbands [ i ] ; var codeblocks:==:subband . codeblocks ;
var view   = camera . view    |  |  identit <CAM> yvar projection:==:camera . projection  |  |  IDENTITY
var selectable <CAM> legend <CAM> data <CAM> points = this . selectable <CAM> legend <CAM> data <CAM> points ; var selectable <CAM> labels <CAM> data <CAM> points:==:this . selectable <CAM> labels <CAM> data <CAM> points ;
var rect = draw . rect ( 100 , 100 ) . move ( 100 , 25 ) . stroke ( width : 0 ) var tbox:==:rect . tbox ( )
var mime = require ( ' send ' ) . mime ; var basename:==:require ( ' path ' ) . basename ;
var latitude = document . get <CAM> element <CAM> by <CAM> id ( ' latitude ' ) ; var longitude:==:document . get <CAM> element <CAM> by <CAM> id ( ' longitude ' ) ;
var debug = require ( ' debug ' ) ( ' analytics . js : cookie ' ) ; var defaults:==:require ( ' defaults ' ) ;
var b = new object <CAM> node ( a : new symbol <CAM> node ( ' a ' ) , b : new constant <CAM> node ( 2 ) ) ; var c:==:new object <CAM> node ( a : new symbol <CAM> node ( ' a ' ) , b : new constant <CAM> node ( 2 ) , c : new constant <CAM> node ( 3 ) ) ;
var canvas = this . canvas = config . canvas  |  |  document . create <CAM> element ( ' canvas ' ) ; var render <CAM> boundaries:==:this . _ render <CAM> boundaries    [ 10000 , 10000 , 0 , 0 ] ;
var client = this . _ . client ; var i d:==:this . _ . i d ;
var source = channel <CAM> manager . current <CAM> tuners . tuner1 . sources . source1 ; var channel:==:source . channels [ 0 ] ;
var a = process <CAM> style ( a <CAM> fill ? this . fill <CAM> style : this . stroke <CAM> style ) ; var color:==:a . color ;
var index = $ ( ' div . slide#'+id+ ' code . execute ' ) . index ( code <CAM> div ) ; var code:==:slave <CAM> window . $ ( ' div . slide#'+id+ ' code . execute ' ) . eq ( index )
var rowspan = parse <CAM> int ( first <CAM> cell . get <CAM> attribute ( ' rowspan ' ) , 10 )  |  |  1 ; var colspan:==:parse <CAM> int ( first <CAM> cell . get <CAM> attribute ( ' colspan ' ) , 10 )  |  |  1 ;
var center = ' center ' in options ? lng <CAM> lat . convert ( options . center ) : this . get <CAM> center ( ) ; var zoom:==:' zoom ' in options ? + options . zoom : start <CAM> zoom ;
var position = $ elem . position ( ) ; var left:==:position . left ;
var repeat = require ( ' repeat - string ' ) ; var extend:==:require ( ' extend ' ) ;
var t = parse <CAM> float ( s . top ) ; var w:==:parse <CAM> float ( s . width ) ;
var to = this . to ; var distance:==:from . distance <CAM> to ( hit <CAM> point <CAM> world ) ;
var p = camera . pick <CAM> ellipsoid ( window <CAM> coord , ellipsoid ) ; var c:==:ellipsoid . cartesian <CAM> to <CAM> cartographic ( p ) ;
var EOF = goog . labs . format . csv . Sentinels _ . EOF ; var EOR:==:goog . labs . format . csv . Sentinels _ . EOR ;
var Schema = mongoose . Schema ; var moment:==:require ( ' moment ' ) ;
var scene = engine . scenes [ 0 ] ; var textures:==:scene . textures ;
var zindex = options . zindex ; var allow <CAM> close:==:options . allow <CAM> close ;
var wiredep = require ( ' wiredep ' ) ; var chalk:==:require ( ' chalk ' ) ;
var function <CAM> match = function <CAM> matches [ key ] ; var listener:==:function <CAM> match . listener ;
var def = $ ( ' def-2 ' ) ; var jkl:==:$ ( ' jkl-2 ' ) ;
var header = require ( ' gulp - header ' ) var footer:==:require ( ' gulp - footer ' )
var Plugin = imports . Plugin ; var test:==:imports . test ;
var webpack = require ( ' webpack ' ) ; var cssnext:==:require ( ' postcss - cssnext ' ) ;
var html <CAM> template <CAM> element = scope . wrappers . html <CAM> template <CAM> element ; var mixin:==:scope . mixin ;
var css = $ . extend ( , $ . blockUI . defaults . css , opts . css  |  |  ) ; var themedCSS:==:$ . extend ( , $ . blockUI . defaults . themedCSS , opts . themedCSS  |  |  ) ;
var apply = Function . prototype . apply ; var slice:==:Array . prototype . slice ;
var close = options . close  |  |  false ; var output:==:options . output  |  |  false ;
var Agent = require ( ' smith ' ) . Agent ; var Transport:==:require ( ' smith ' ) . Transport ;
var icon <CAM> button <CAM> size = _ context$mui <CAM> theme . button . icon <CAM> button <CAM> size ; var z <CAM> index:==:_ context$mui <CAM> theme . z <CAM> index ;
var take = grunt . option ( ' take ' ) ; var compare:==:grunt . option ( ' compare ' ) ;
var files = d . files ; var directories:==:d . directories ;
var Syntax = jsdoc . src . Syntax ; var util:==:require ( ' util ' ) ;
var lazypipe = require ( ' lazypipe ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var e = new constant <CAM> node ( 5 ) ; var f:==:n . transform ( function ( node )
var cm   = this . cm ; var settings:==:this . settings ;
var async = require ( ' async ' ) ; var assert:==:require ( ' assert ' ) ;
var merge = require ( ' utils - merge ' ) ; var sign:==:require ( ' cookie - signature ' ) . sign ;
var type = message . type ; var delivery:==:message . delivery ;
var brightness = params . brightness ; var black <CAM> point:==:params . black <CAM> point ;
var target = event . target ; var events:==:target . get <CAM> data ( ' events ' ) ;
var clamp = require ( ' clamp ' ) ; var cx:==:require ( ' cx ' ) ;
var z = e . heading . z ; var magnetic <CAM> heading:==:e . heading . magnetic <CAM> heading ;
var Shape = ReactART . Shape ; var Surface:==:ReactART . Surface ;
var events = require ( ' events ' ) ; var has:==:require ( ' has ' ) ;
var sx = style . sx  |  |  0 ; var sy:==:style . sy  |  |  0 ;
var element = _ react . prop <CAM> types . element ; var shape:==:_ react . prop <CAM> types . shape ;
var d = desired . mag ( ) ; var speed:==:this . maxspeed ;
var g = this . mesh . geometry . grants [ i ] ; var b:==:this . mesh . skeleton . bones [ g . index ] ;
var items = this . items <CAM> data . get ( ) ; var field <CAM> id:==:this . items <CAM> data . _ field <CAM> id ;
var vert = this . vert = elt ( ' div ' , [ elt ( ' div ' , null , null , ' min - width : 1px ' ) ] , ' code <CAM> mirror - vscrollbar ' ) ; var horiz:==:this . horiz    elt ( ' div ' , [ elt ( ' div ' , null , null , ' height : 100% ; min - height : 1px ' ) ] , ' code <CAM> mirror - hscrollbar ' ) ;
var connect = imports [ ' collab . connect ' ] ; var workspace:==:imports [ ' collab . workspace ' ] ;
var wrapper = angular . element ( element [ 0 ] . get <CAM> elements <CAM> by <CAM> class <CAM> name ( ' md - slider - wrapper ' ) ) ; var content:==:angular . element ( element [ 0 ] . get <CAM> elements <CAM> by <CAM> class <CAM> name ( ' md - slider - content ' ) ) ;
var http = require ( ' http ' ) var s:==:server . create <CAM> server ( )
var scale = query <CAM> numeric <CAM> value ( node , ' scale ' , namespaces . kml ) ; var heading:==:query <CAM> numeric <CAM> value ( node , ' heading ' , namespaces . kml ) ;
var concat = require ( ' gulp - concat ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var proxy <UND> server <UND> addr = unblock <UND> youku . default <UND> proxy <UND> server <UND> addr ; var backup <UND> proxy <UND> server <UND> proc:==:unblock <UND> youku . backup <UND> proxy <UND> server <UND> proc ;
var length = cylinder <CAM> geometry . _ length ; var top <CAM> radius:==:cylinder <CAM> geometry . _ top <CAM> radius ;
var roughness = this . roughness . build <CAM> code ( builder , ' fv1 ' ) ; var metalness:==:this . metalness . build <CAM> code ( builder , ' fv1 ' ) ;
var DISTANCE <UND> DISPLAY <UND> CONDITION = Billboard . DISTANCE <UND> DISPLAY <UND> CONDITION = 14 ; var DISABLE <UND> DEPTH <UND> DISTANCE:==:Billboard . DISABLE <UND> DEPTH <UND> DISTANCE    15 ;
var stringify = utils . stringify ; var type:==:utils . type ;
var react <CAM> test <CAM> utils = require ( ' react <CAM> test <CAM> utils ' ) ; var sample <CAM> draft <CAM> inline <CAM> style:==:require ( ' sample <CAM> draft <CAM> inline <CAM> style ' ) ;
var name = file <CAM> info . name ; var version:==:file <CAM> info . version ;
var real <CAM> out = this . real <CAM> out = [ ] ; var unexpected <CAM> out:==:this . unexpected <CAM> out    null ;
var sqrt = Math . sqrt ; var clip:==:this . clip ;
var remove <CAM> range <CAM> from <CAM> content <CAM> state = require ( ' remove <CAM> range <CAM> from <CAM> content <CAM> state ' ) ; var content <CAM> block:==:require ( ' content <CAM> block ' ) ;
var section = e . section ; var row:==:e . row ;
var object <CAM> id = require ( ' mongoose ' ) . Types . object <CAM> idvar express:==:require ( ' express ' )
var left = options . left ; var right:==:options . right ;
var green = Color . float <CAM> to <CAM> byte ( this . green ) ; var blue:==:Color . float <CAM> to <CAM> byte ( this . blue ) ;
var ui = args . ui ; var graph:==:args . graph ;
var tab   = req . query . tab  |  |  ' all ' ; var limit:==:Number ( req . query . limit )  |  |  config . list <UND> topic <UND> count ;
var form = event . data . form <CAM> elem ; var no <CAM> animation:==:event . data . no <CAM> animation ;
var width = elevation <CAM> image . width ; var height:==:elevation <CAM> image . height ;
var can <CAM> evaluate = util . can <CAM> evaluate ; var try <CAM> catch1:==:util . try <CAM> catch1 ;
var accept = req . headers . accept  |  |  '' ; var json:==:~accept . index <CAM> of ( ' json ' ) ;
var call = mock <CAM> option <CAM> menu . calls [ 0 ] ; var items:==:call . items ;
var get = require ( ' simple - get ' ) var inherits:==:require ( ' inherits ' )
var promise = promise <CAM> data [ i ] ; var status:==:create <CAM> element <CAM> with <CAM> class ( ' div ' , ' status ' ) ;
var directory = document . get <CAM> element <CAM> by <CAM> id ( ' directory ' ) ; var tcp <CAM> server:==:chrome . sockets . tcp <CAM> server ;
var polyline = polylines [ i ] ; var positions:==:polyline . _ segments . positions ;
var to = _ props . to ; var query:==:_ props . query ;
var short = attrs . short & & $ scope . $ eval ( attrs . short ) var username:==:attrs . username & & $ scope . $ eval ( attrs . username )
var api <CAM> url = options . api <CAM> url  |  |  login <CAM> url ; var user <CAM> id:==:this . context . user <CAM> id ;
var contained <CAM> nodes = cluster <CAM> node . contained <CAM> nodes ; var contained <CAM> edges:==:cluster <CAM> node . contained <CAM> edges ;
var element = that . element ; var data <CAM> item:==:that . list <CAM> view . data <CAM> item <CAM> by <CAM> index ( that . list <CAM> view . get <CAM> element <CAM> index ( item ) ) ;
var channel <CAM> name = msg . channel <CAM> name ; var service:==:msg . service ;
var col = db . collection ( ' update <UND> many <UND> with <UND> generators ' ) ; var r:==:yield col . insert <CAM> many ( [ a : 1 , a : 1 ] ) ;
var show <CAM> modal <CAM> animation = animation . show <CAM> modal <CAM> animation ; var hide <CAM> modal <CAM> animation:==:animation . hide <CAM> modal <CAM> animation ;
var scene = this . scene ; var entity:==:this . entity ;
var legend <CAM> map = options . legend <CAM> map ; var stage:==:this . stage ;
var scroll <CAM> left = _ ref4 . scroll <CAM> left ; var scroll <CAM> top:==:_ ref4 . scroll <CAM> top ;
var buffer = require ( ' vinyl - buffer ' ) ; var merge2:==:require ( ' merge2 ' ) ;
var base = asn1 . base ; var der:==:asn1 . constants . der ;
var ensure <CAM> logged <CAM> in = imports [ ' c9 . login ' ] . ensure <CAM> logged <CAM> in ( ) ; var handler:==:imports [ ' preview . handler ' ] ;
var network = options . network ; var network <CAM> status:==:options . network <CAM> status ;
var name = left . node . name ; var exports:==:this . exports [ name ] ;
var traceur <CAM> loader = traceur . loader . traceur <CAM> loader ; var inline <CAM> loader <CAM> compiler:==:traceur . loader . inline <CAM> loader <CAM> compiler ;
var type = hosts . hosts [ key ] . type ; var os:==:hosts . hosts [ key ] . os ;
var mkdirp = require ( ' mkdirp ' ) ; var cssmin:==:require ( ' cssmin ' ) ;
var cone <CAM> factor = options . cone <CAM> factor  |  |  0 ; var offset:==:options . offset  |  |  0 ;
var usesdkaspi = document . get <CAM> element <CAM> by <CAM> id ( ' usesdkaspi ' ) . checked ; var launchapp:==:document . get <CAM> element <CAM> by <CAM> id ( ' launchapp ' ) . checked ;
var prompt <CAM> button = function prompt <CAM> button ( ) var a:==:prompt ( ' inline - activty prompt ! ' ) ;
var clear <CAM> globe <CAM> depth = environment <CAM> state . clear <CAM> globe <CAM> depth = defined ( globe ) & & ( ! globe . depth <CAM> test <CAM> against <CAM> terrain  |  |  scene . mode = = = scene <CAM> mode . SCENE2D ) ; var use <CAM> depth <CAM> plane:==:environment <CAM> state . use <CAM> depth <CAM> plane    clear <CAM> globe <CAM> depth & & scene . mode      scene <CAM> mode . SCENE3D ;
var context = this . context ; var word <CAM> wrap <CAM> width:==:this . style . word <CAM> wrap <CAM> width ;
var edge <CAM> insets <CAM> prop <CAM> type = require ( ' edge <CAM> insets <CAM> prop <CAM> type ' ) ; var activity <CAM> indicator:==:require ( ' activity <CAM> indicator ' ) ;
var parent <CAM> win = opt <UND> parentWin  |  |  window ; var href:==:typeof link <CAM> ref . href !   ' undefined ' ? link <CAM> ref . href :
var Group = Facade . Group ; var Identify:==:Facade . Identify ;
var Node = _ . Node ; var source <CAM> location:==:_ . source <CAM> location ;
var bcrypt = require ( ' bcryptjs ' ) ; var async:==:require ( ' async ' ) ;
var busytime <CAM> id = this . h ( ' busytime <CAM> id ' ) ; var color:==:this . h ( ' color ' ) ;
var svg <CAM> util = powerbi . visuals . svg <CAM> util ; var data <CAM> view <CAM> objects:==:powerbi . data <CAM> view <CAM> objects ;
var next = item . next ; var prev:==:item . prev ;
var dirs = util . dirs ( ) ; var events:==:require ( ' events ' ) ;
var cluster <CAM> state = data . cluster <CAM> state ; var status:==:data . status ;
var Metadata = require ( ' Metadata ' ) ; var React:==:require ( ' React ' ) ;
var max = options . max  |  |  undefined ; var close:==:options . close  |  |  false ;
var width = title <CAM> size . width > image <CAM> size . width ? title <CAM> size . width : image <CAM> size . width ; var height:==:title <CAM> size . height > image <CAM> size . height ? title <CAM> size . height : image <CAM> size . height ;
var user = Meteor . user ( ) ; var post:==:Posts . find <CAM> one ( comment <CAM> attributes . post <CAM> id ) ;
var rel = tag . rel ? ' rel= ' ' + tag . rel + ' ' ' : '' ; var type:==:tag . type ? ' type ' ' + tag . type + ' ' ' : '' ;
var stream = require ( ' stream ' ) var url:==:require ( ' url ' )
var is <CAM> function = util . is <CAM> functionvar is <CAM> object:==:util . is <CAM> object
var auth = imports . auth ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var assert = require ( ' assert ' ) var request:==:require ( ' request ' )
var pick = pick <CAM> offset ! = = void ( 0 ) var plot:==:this . plot
var paths = gather <CAM> available <CAM> node <CAM> paths ( exports . paths ) ; var prefixes:==:exports . prefixes ;
var gulp = require ( ' gulp ' ) var jshint:==:require ( ' gulp - jshint ' )
var ui = $ . summernote . ui ; var options:==:context . options ;
var show = powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . show , false ) ; var display <CAM> name:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . display <CAM> name ) ;
var derived <CAM> data <CAM> property = ' derived <CAM> data <CAM> property ' ; var f:==:' f ' ;
var project = this . project ; var url:==:this . url ;
var create <CAM> identifier <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> identifier <CAM> expression ; var create <CAM> if <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> if <CAM> statement ;
var O = ES . to <CAM> object ( this ) ; var n:==:ES . to <CAM> uint32 ( O . length ) ;
var sharp = _ sharp ; var plus:==:_ plus ;
var f8 <CAM> button = require ( ' f8 <CAM> button ' ) ; var toast <CAM> android:==:require ( ' toast <CAM> android ' ) ;
var mocha = require ( ' gulp - spawn - mocha ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var buttoncss <CAM> class = options . buttoncss <CAM> class ; var panelcss <CAM> class:==:options . panelcss <CAM> class ;
var end = options . end ; var end <CAM> args:==:options . end <CAM> args ;
var minimist = require ( ' minimist ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ,
var express = require ( ' express ' ) ; var path:==:require ( ' path ' ) ;
var argv = minimist ( process . argv . slice ( 2 ) ) ; var skip:==:argv . skip  |  |  0 ;
var Dict = definitions . Dict ; var Stack:==:definitions . Stack ;
var gl = fbo . glvar handle:==:fbo . handle    gl . create <CAM> framebuffer ( )
var direction = this . direction ; var up:==:this . up ;
var client <CAM> left = doc <CAM> elem . client <CAM> left  |  |  body . client <CAM> left  |  |  0 ; var top:==:box . top + scroll <CAM> top - client <CAM> top ;
var require <CAM> native <CAM> component = require ( ' require <CAM> native <CAM> component ' ) ; var resolve <CAM> asset <CAM> source:==:require ( ' resolve <CAM> asset <CAM> source ' ) ;
var streams <CAM> sequence <CAM> stream = core <CAM> stream . streams <CAM> sequence <CAM> stream ; var Catalog:==:core <CAM> obj . Catalog ;
var path = require ( ' path ' ) ; var loopback:==:require ( ' loopback ' ) ;
var icon <CAM> image <CAM> cache = ol . style . icon <CAM> image <CAM> cache ; var icon <CAM> image:==:icon <CAM> image <CAM> cache . get ( src , cross <CAM> origin , color ) ;
var path = require ( ' path ' ) var multimatch:==:require ( ' multimatch ' )
var split <CAM> data <CAM> node = dom . split <CAM> data <CAM> node ; var get <CAM> closest <CAM> ancestor <CAM> in:==:dom . get <CAM> closest <CAM> ancestor <CAM> in ;
var min = target <CAM> aabb . min ; var max:==:target <CAM> aabb . max ;
var state <CAM> machine = traceur . syntax . trees . state <CAM> machine ; var variable <CAM> binder:==:traceur . semantics . variable <CAM> binder ;
var rx = require ( ' rx - lite ' ) ; var util:==:require ( ' util ' ) ;
var shadow = shared <CAM> util . shadow ; var warn:==:shared <CAM> util . warn ;
var width = this . _ width ; var height:==:this . _ height ;
var doc = documentvar head:==:doc . head  |  |  doc . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' head ' ) [ 0 ]  |  |  doc . document <CAM> element
var line = node . loc . start . line ; var col:==:node . loc . start . column ;
var dense <CAM> matrix = math . type . dense <CAM> matrix ; var Unit:==:math . type . Unit ;
var template = this . template ; var webview:==:this . webview ;
var tid = data . tid ; var content:==:data . content . to <CAM> string ( ) ;
var array <CAM> comprehension = traceur . syntax . trees . array <CAM> comprehension ; var array <CAM> literal <CAM> expression:==:traceur . syntax . trees . array <CAM> literal <CAM> expression ;
var height = $ ( this ) . parent ( ) . height ( ) ; var width:==:$ ( this ) . parent ( ) . width ( ) ;
var blog <CAM> post <CAM> header = require ( ' blog <CAM> post <CAM> header ' ) ; var Marked:==:require ( ' Marked ' ) ;
var subscribable = new ko . subscribable ( ) . extend ( rate <CAM> limit : 500 ) ; var notify <CAM> spy:==:jasmine . create <CAM> spy ( ' notify <CAM> spy ' ) ;
var language = imports . language ; var settings:==:imports . settings ;
var network = NETWORKS [ f . network  |  |  ' bitcoin ' ] var tx:==:Transaction . from <CAM> hex ( f . tx <CAM> hex )
var scroll <CAM> to <CAM> column = _ props2 . scroll <CAM> to <CAM> column ; var scroll <CAM> top:==:_ props2 . scroll <CAM> top ;
var EYE <UND> OFFSET <UND> INDEX = Billboard . EYE <UND> OFFSET <UND> INDEX = 3 ; var HORIZONTAL <UND> ORIGIN <UND> INDEX:==:Billboard . HORIZONTAL <UND> ORIGIN <UND> INDEX    4 ;
var control = document . get <CAM> element <CAM> by <CAM> id ( ' control ' ) ; var client <CAM> width:==:document . get <CAM> element <CAM> by <CAM> id ( ' client <CAM> width ' ) ;
var l = hsla [ 2 ] ; var a:==:hsla [ 3 ]  |  |  1 ;
var light = _ light <CAM> shadows [ i ] ; var shadow:==:light . shadow ;
var util = AWS . util ; var type <CAM> of:==:_ _ webpack <UND> require _ _ ( 407 ) . type <CAM> of ;
var settings = options . settings ; var app <CAM> name:==:options . app <CAM> name  |  |  test <CAM> utils . random <CAM> app <CAM> name ( ) ;
var div = owner <CAM> document . create <CAM> element ( ' div ' ) ; var type:==:this . _ current <CAM> element . type ;
var total <CAM> match <CAM> num = self . _ all <CAM> matched . total <CAM> match <CAM> num ; var contact:==:self . _ contact <CAM> list [ 0 ] ;
var b = df . append <CAM> child ( document . create <CAM> element ( ' b ' ) ) ; var c:==:df . append <CAM> child ( document . create <CAM> element ( ' c ' ) ) ;
var parallel <CAM> coordinates = nv . models . parallel <CAM> coordinates ( ) var legend:==:nv . models . legend ( )
var new <CAM> rev = msg . new <CAM> rev ; var changeset:==:msg . changeset ;
var preserved <CAM> values = this . _ preserved <CAM> values ; var limit:==:this . _ limit ;
var shelljs = require ( ' shelljs ' ) ; var chalk:==:require ( ' chalk ' ) ;
var height = this . _ image . height ; var tile <CAM> width:==:this . _ tile <CAM> width  |  |  width ;
var fs = require ( ' fs ' ) ; var exists:==:fs . exists  |  |  path . exists ;
var child <CAM> nodes = place <CAM> mark . child <CAM> nodes ; var length:==:child <CAM> nodes . length ;
var one = this . find ( ' . togetherjs - typing - ellipse - one ' ) ; var two:==:this . find ( ' . togetherjs - typing - ellipse - two ' ) ;
var skip = request <CAM> def . skip  |  |  0 ; var limit:==:( ' limit ' in request <CAM> def ? request <CAM> def . limit : rows . length ) + skip ;
var frame <CAM> state = scene . frame <CAM> state ; var camera:==:scene . camera ;
var json <CAM> results <CAM> adapter = breeze . json <CAM> results <CAM> adapter ; var abstract <CAM> data <CAM> service <CAM> adapter:==:breeze . abstract <CAM> data <CAM> service <CAM> adapter ;
var express = require ( ' express ' ) ; var parse <CAM> server:==:require ( ' parse - server ' ) . parse <CAM> server ;
var tag <CAM> name = this . _ tag <CAM> name ; var type:==:this . _ attributes . type ;
var step = config . step ; var preview:==:config . preview ;
var time <CAM> separator = $ date <CAM> formatter . time <CAM> separator ( format ) ; var minutes <CAM> format:==:$ date <CAM> formatter . minutes <CAM> format ( format ) ;
var arc = ( options . arc < = 0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ; var side <CAM> orientation:==:( options . side <CAM> orientation      0 ) ? 0 : options . side <CAM> orientation  |  |  BABYLON . Mesh . DEFAULTSIDE ;
var entities = require ( ' character - entities - html4 ' ) ; var legacy:==:require ( ' character - entities - legacy ' ) ;
var script = scripts [ i ] ; var match:==:script . src . match (
var reactdom <CAM> injection = require ( ' reactdom <CAM> injection ' ) ; var react <CAM> generic <CAM> batching:==:require ( ' react <CAM> generic <CAM> batching ' ) ;
var data = img . data [ 3 ] ; var max:==:this . _ max ;
var ember <CAM> new = blueprint <CAM> helpers . ember <CAM> new ; var ember <CAM> generate <CAM> destroy:==:blueprint <CAM> helpers . ember <CAM> generate <CAM> destroy ;
var dy2 = Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dy2 ' , this . dy2 ) ) ) ) ; var dx2:==:Math . max ( 0 , Math . min ( w , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var Promise = opts . Promise  |  |  global . Promisevar chmod:==:opts . chmod  |  |  promisify ( Promise , fs . chmod )
var is <CAM> virtual = mod . is <CAM> virtual ; var just <CAM> one:==:mod . just <CAM> one ;
var create <CAM> binding <CAM> identifier = parse <CAM> tree <CAM> factory . create <CAM> binding <CAM> identifier ; var create <CAM> block:==:parse <CAM> tree <CAM> factory . create <CAM> block ;
var p = pub . data . pvar q:==:pub . data . q
var assert = require ( ' assert ' ) ; var os:==:require ( ' os ' ) ;
var start <CAM> time = tasks [ first <CAM> task <CAM> index ] . start <CAM> time ( ) ; var end <CAM> time:==:tasks [ last <CAM> task <CAM> index ] . end <CAM> time ( ) ;
var is <CAM> name = core <CAM> primitives . is <CAM> name ; var Stream:==:core <CAM> stream . Stream ;
var test     = require ( ' utest ' ) ; var assert:==:require ( ' assert ' ) ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ; var g:==:new Dygraph ( graph , [ [ 1,1 ] , [ 4,4 ] ] , opts ) ;
var util = require ( ' hexo - util ' ) ; var titlecase:==:require ( ' titlecase ' ) ;
var sbcs <UND> encode = function make <UND> sbcs <UND> encode ( cp ) var EE:==:make <UND> EE ( cpt [ cp ] . enc ) ;
var text <CAM> field <CAM> test <CAM> object = require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' text <CAM> field <CAM> test <CAM> object ' ) ) ; var textarea <CAM> field <CAM> test <CAM> object:==:require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' textarea <CAM> field <CAM> test <CAM> object ' ) ) ;
var margin = this . layout . margin ; var width:==:viewport . width - ( margin . left + margin . right ) ;
var tx = ( wt . tx * render <CAM> session . resolution ) + render <CAM> session . shakeX ; var ty:==:( wt . ty * render <CAM> session . resolution ) + render <CAM> session . shakeY ;
var NAME <UND> SPACE <UND> IMPORT = ' NAME <UND> SPACE <UND> IMPORT ' ; var NAMED <UND> EXPORT:==:' NAMED <UND> EXPORT ' ;
var conf = config . editlinkvar label:==:conf . label
var O <UND> NOFOLLOW = constants . O <UND> NOFOLLOW  |  |  0 ; var O <UND> RDONLY:==:constants . O <UND> RDONLY  |  |  0 ;
var kind = e . kind ; var userid:==:e . remote <CAM> user  |  |  e . userid ;
var less = require ( ' gulp - less ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var end <CAM> tag = formatter . end <CAM> tag ( ' b ' ) ; var start <CAM> tag:==:formatter . start <CAM> tag ( ' b ' ) ;
var React = require ( ' React ' ) ; var status <CAM> bar:==:require ( ' status <CAM> bar ' ) ;
var positive <CAM> values = values <CAM> per <CAM> stack [ key ] . positive <CAM> values ; var negative <CAM> values:==:values <CAM> per <CAM> stack [ key ] . negative <CAM> values ;
var parallel <CAM> closure <CAM> test <CAM> suite = goog . require ( ' goog . testing . parallel <CAM> closure <CAM> test <CAM> suite ' ) ; var test <CAM> suite:==:goog . require ( ' goog . testing . test <CAM> suite ' ) ;
var preview = config . preview ; var fast <CAM> mode:==:config . fast <CAM> mode ;
var Person = db . model ( ' gh4264 ' , person <CAM> schema ) ; var blog <CAM> post:==:db . model ( ' gh4264 <UND> 0 ' , blog <CAM> post <CAM> schema ) ;
var PI = Math . PI ; var c:==:Math . ceil ( PI ) ;
var subscriptions = program . subscriptions ; var view:==:program . view ;
var node <CAM> name = node <CAM> names [ node <CAM> index ] ; var node <CAM> transformation:==:node <CAM> transformations [ node <CAM> name ] ;
var text <CAM> gap = visual <CAM> map <CAM> model . get ( ' text <CAM> gap ' ) ; var item <CAM> size:==:visual <CAM> map <CAM> model . item <CAM> size ;
var target = target <UND> style [ output <UND> prop <UND> name ] ; var curr:==:current <UND> style [ output <UND> prop <UND> name ] ;
var FP <UND> SAFE = constants . FP <UND> SAFE ; var ONEAVGYEAR:==:constants . ONEAVGYEAR ;
var table <CAM> logger = utils . table <CAM> logger ; var argv:==:require ( ' optimist ' ) . argv ;
var hmd <CAM> euler = this . hmd <CAM> euler ; var pitch <CAM> object:==:this . pitch <CAM> object ;
var log = require ( ' npmlog ' ) var which:==:require ( ' which ' )
var instance = options . instance ; var updatable:==:options . updatable ;
var x = this . x , y = this . y ; var w:==:this . w , h    this . h ;
var scroll <CAM> top = this . container . scroll <CAM> top ; var scroll <CAM> height:==:this . container . scroll <CAM> height ;
var chart = Highcharts . chart ( ' container ' , options ) ; var offset:==:$ ( ' # container ' ) . offset ( ) ,
var stroke <CAM> color = c . state . stroke <CAM> color ; var fill <CAM> color:==:c . state . fill <CAM> color ;
var type = e . type ; var target:==:e . target ;
var data <CAM> labels <CAM> settings = this . data . stream <CAM> graph <CAM> settings . data <CAM> labels <CAM> settings ; var font <CAM> size:==:pixel <CAM> converter . from <CAM> point ( data <CAM> labels <CAM> settings . font <CAM> size ) ;
var shadows = this . _ geometry <CAM> updater . shadows <CAM> property . get <CAM> value ( time ) ; var distance <CAM> display <CAM> condition <CAM> property:==:this . _ geometry <CAM> updater . distance <CAM> display <CAM> condition <CAM> property ;
var i d = _ props2 . i d ; var input <CAM> style:==:_ props2 . input <CAM> style ;
var m = matrix ; var a:==:m . a ;
var output <CAM> encodings = this . output <CAM> encodings ; var output <CAM> callbacks:==:this . output <CAM> callbacks ;
var d   = this . dimensionvar state:==:this . _ state
var args = demo <CAM> sequence [ step ] . args ; var duration:==:demo <CAM> sequence [ step ] . duration  |  |  3000 ;
var line = pos . line + code . length - ( to . line - from . line ) - 1 ; \n\var ch:==:pos . ch ; \n\
var zlib = require ( ' zlib ' ) var hawk:==:require ( ' hawk ' )
var cache <CAM> functions = options [ ' cache <CAM> functions ' ] = = null ? false : options [ ' cache <CAM> functions ' ] ; var cache <CAM> functions <CAM> crc32:==:options [ ' cache <CAM> functions <CAM> crc32 ' ]     null ? false : options [ ' cache <CAM> functions <CAM> crc32 ' ] ;
var greenA700 = exports . greenA700 = ' # 00c853 ' ; var light <CAM> green50:==:exports . light <CAM> green50    ' # f1f8e9 ' ;
var sheet = json . sheet ; var topic:==:utils . is <CAM> array ( sheet ) ? sheet [ 0 ] . topic : sheet . topic ;
var fs = imports . fs ; var vfs:==:imports . vfs ;
var positions = options . positions ; var width:==:options . width ;
var fallback <CAM> composition <CAM> state = require ( ' fallback <CAM> composition <CAM> state ' ) ; var synthetic <CAM> composition <CAM> event:==:require ( ' synthetic <CAM> composition <CAM> event ' ) ;
var fb = window . fb  |  |  ; var config:==:window . config  |  |  ;
var markdown = require ( ' metalsmith - markdown ' ) ; var layouts:==:require ( ' metalsmith - layouts ' ) ;
var top = offset . top + pos . offsetY ; var left:==:offset . left + pos . offsetX ;
var u <CAM> squared = ellipsoid <CAM> geodesic . _ u <CAM> squared ; var a:==:ellipsoid <CAM> geodesic . _ ellipsoid . maximum <CAM> radius ;
var source <CAM> code = job . source <CAM> code , base <CAM> pos = job . base <CAM> pos ; var source <CAM> node:==:job . source <CAM> node ;
var parse <CAM> signed <CAM> cookie = connect . utils . parse <CAM> signed <CAM> cookie ; var memory <CAM> store:==:connect . middleware . session . memory <CAM> store ;
var map = this . _ map ; var length:==:map . length ;
var base = this . texture . base <CAM> texture ; var crop:==:this . texture . crop ;
var iterator = state . iterator ; var subscriber:==:state . subscriber ;
var Pins = Board . Pins ; var to <CAM> fixed:==:Fn . to <CAM> fixed ;
var u = uv [ 0 ] ; var v:==:uv [ 1 ] ;
var c = this . placeholdervar p:==:c . parent <CAM> node
var use <CAM> windows <CAM> line <CAM> endings = this . data . use <CAM> windows <CAM> line <CAM> endings ; var flags:==:grunt . option . flags ( ) ;
var li = document . create <CAM> element ( ' li ' ) ; var label:==:document . create <CAM> element ( ' label ' ) ;
var client = Nightwatch . client ( ) ; var api:==:Nightwatch . api ( ) ;
var max <CAM> width = o <CAM> dimensions . max <CAM> width ; var max <CAM> height:==:o <CAM> dimensions . max <CAM> height ;
var f = this . finish <CAM> value ; var p:==:this . get <CAM> value <CAM> proportion ( ) ;
var parents = options . parents = options . parents  |  |  [ ] ; var replace:==:function replace ( replacement )
var spawn = require ( ' child <UND> process ' ) . spawnvar node:==:common . node <CAM> bin
var adapter = global . adapter ; var fulfilled:==:adapter . fulfilled ;
var debug = require ( ' debug ' ) var express:==:require ( ' express ' )
var amber300 = exports . amber300 = ' # ffd54f ' ; var amber400:==:exports . amber400    ' # ffca28 ' ;
var source = element . _ source ; var owner:==:element . _ owner ;
var csurf = require ( ' csurf ' ) ; var compress:==:require ( ' compression ' ) ;
var italics = get <CAM> style <CAM> property ( , style <CAM> context <CAM> stack , ' italics ' , false ) ; var line <CAM> height:==:get <CAM> style <CAM> property ( , style <CAM> context <CAM> stack , ' line <CAM> height ' , 1 ) ;
var properties = params . properties ; var objects:==:params . objects ;
var react <CAM> fiber <CAM> host <CAM> context = require ( ' react <CAM> fiber <CAM> host <CAM> context ' ) ; var react <CAM> fiber <CAM> hydration <CAM> context:==:require ( ' react <CAM> fiber <CAM> hydration <CAM> context ' ) ;
var tab <CAM> manager = imports . tab <CAM> manager ; var ace:==:imports . ace ;
var body = registered <CAM> mesh . body ; var center:==:mesh . get <CAM> bounding <CAM> info ( ) . bounding <CAM> box . center . clone ( ) ;
var operand = this . transform <CAM> any ( tree . operand ) ; var member <CAM> expression:==:this . transform <CAM> any ( tree . member <CAM> expression ) ;
var element = editing <CAM> context . element ; var config:==:editing <CAM> context . config ;
var expecting = Parser . expecting ; var assertion:==:Parsers . assertion ;
var suffix = new Blockly . field <CAM> label ( ' suffix ' ) ; var between:==:new Blockly . field <CAM> label ( ' between ' ) ;
var async = require ( ' async ' ) ; var util:==:require ( ' util ' ) ;
var outline <CAM> width = label . _ outline <CAM> width ; var style:==:label . _ style ;
var cell <CAM> offset <CAM> to <CAM> day <CAM> offset = t . cell <CAM> offset <CAM> to <CAM> day <CAM> offset ; var date <CAM> to <CAM> day <CAM> offset:==:t . date <CAM> to <CAM> day <CAM> offset ;
var start <CAM> angle = vm . start <CAM> angle ; var end <CAM> angle:==:vm . end <CAM> angle ;
var y <CAM> axis = this . chart . get <CAM> model ( ) . get <CAM> component ( ' y <CAM> axis ' , 0 ) ; var scale:==:y <CAM> axis . axis . scale ;
var load <CAM> resources = model . _ load <CAM> resources ; var gltf:==:model . gltf ;
var bar = multi ? bars [ j ] [ i ] : bars [ i ] ; var label:==:chartinst . labelise ( multi ? labels [ j ] & & labels [ j ] [ i ] : labels [ i ] , multi ? values [ j ] [ i ] : values [ i ] , total ) ,
var password = elements . password . value ; var identity:==:elements . identity . value ;
var category = page . category ( ) ; var name:==:page . name ( ) ;
var state = this . state _ ; var fill:==:state . fill <CAM> style !    undefined ;
var line = line <CAM> at <CAM> height ( cm . doc , mY ) var gutter:==:cm . options . gutters [ i ]
var mail = $ route <CAM> params . mail ; var password:==:$ route <CAM> params . password ;
var data = this . data ; var margin:==:this . margin ;
var pixel <CAM> converter = js <CAM> common . pixel <CAM> converter ; var label <CAM> utils:==:visuals . new <CAM> data <CAM> label <CAM> utils ;
var ng <CAM> model     = sf <CAM> builder <CAM> provider . builders . ng <CAM> model ; var ng <CAM> model <CAM> options:==:sf <CAM> builder <CAM> provider . builders . ng <CAM> model <CAM> options ;
var blueA700 = exports . blueA700 = ' # 2962ff ' ; var light <CAM> blue50:==:exports . light <CAM> blue50    ' # e1f5fe ' ;
var radii = default <CAM> value ( options . radii , default <CAM> radii ) ; var stack <CAM> partitions:==:Math . round ( default <CAM> value ( options . stack <CAM> partitions , 64 ) ) ;
var DO <UND> WHILE <UND> STATEMENT = ' DO <UND> WHILE <UND> STATEMENT ' ; var EMPTY <UND> STATEMENT:==:' EMPTY <UND> STATEMENT ' ;
var texth <CAM> scale = current . texth <CAM> scale ; var font <CAM> matrix:==:current . font <CAM> matrix  |  |  IDENTITY <UND> MATRIX ;
var first <CAM> page <CAM> promise = pdf <CAM> viewer . first <CAM> page <CAM> promise ; var pages <CAM> promise:==:pdf <CAM> viewer . pages <CAM> promise ;
var bone <CAM> inverses = this . bone <CAM> inverses ; var bone <CAM> matrices:==:this . bone <CAM> matrices ;
var element = self . element = scroll <CAM> view <CAM> options . el ; var $ element:==:self . $ element    jq <CAM> lite ( element ) ;
var extrude = query <CAM> boolean <CAM> value ( geometry <CAM> node , ' extrude ' , namespaces . kml ) ; var tessellate:==:query <CAM> boolean <CAM> value ( geometry <CAM> node , ' tessellate ' , namespaces . kml ) ;
var start = change <CAM> range . start ; var end:==:change <CAM> range . end ;
var child <UND> process = require ( ' child <UND> process ' ) ; var colors:==:require ( ' colors ' ) ;
var view = this . view , buffer = this . view . buffer ; var w:==:view . w , h    view . h ;
var app = this . app = loopback ( ) ; var Product:==:this . Product    loopback . persisted <CAM> model . extend ( ' product ' ,
var x = ( left . x > right . x ) ? left . x : right . x ; var y:==:( left . y > right . y ) ? left . y : right . y ;
var async = require ( ' async ' ) ; var json2csv:==:require ( ' json-2-csv ' ) . json2csv ;
var lat = coerce ( ' lat ' )  |  |  [ ] ; var len:==:Math . min ( lon . length , lat . length ) ;
var jsdom = require ( ' jsdom ' ) ; var esprima:==:require ( ' esprima ' ) ;
var charset = charset <CAM> detect . detect ( line ) ; var encoding:==:charset . encoding ;
var acosh = math . acosh ; var cosh:==:math . cosh ;
var deltaX = last . deltaX - touch . deltaX ; var deltaY:==:last . deltaY - touch . deltaY ;
var line <CAM> number = options . line <CAM> number ; var actual:==:options . actual ;
var post <CAM> asset = hexo . model ( ' post <CAM> asset ' ) ; var Post:==:hexo . model ( ' Post ' ) ;
var inspectable = ! data  |  |  ! data [ consts . meta ]  |  |  ! data [ consts . meta ] . uninspectable ; var open:==:inspectable & & this . state . open & & ( ! data  |  |  data [ consts . inspected ] !    false ) ;
var confirm = imports [ ' dialog . confirm ' ] . show ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var curve <CAM> segments = options . curve <CAM> segments ! = = undefined ? options . curve <CAM> segments : 12 ; var steps:==:options . steps !    undefined ? options . steps : 1 ;
var date = this . _ validate ( year , month , day , main . local . invalid <CAM> month ) ; var year:==:date . year ( ) ;
var n = L [ 0 ] . length-1 , m = Bi . length-1 ; var x:==:numeric . rep ( [ n ] , 0 ) , xj    Array ( n ) ;
var height = options . height ; var source:==:options . source ;
var tint <CAM> fn = this . tint <CAM> fn ; var base:==:this . base ;
var jshint = require ( ' gulp - jshint ' ) ; var nodemon:==:require ( ' gulp - nodemon ' ) ;
var assign = require ( ' object - assign ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var buffer = require ( ' buffer ' ) ; var Buffer:==:buffer . Buffer ;
var node = path . node ; var body:==:node . body ;
var STATUS <UND> LOADING <UND> AGENTS = exports . STATUS <UND> LOADING <UND> AGENTS = 2 ; var STATUS <UND> ACTIVE:==:exports . STATUS <UND> ACTIVE      3 ;
var trim = ref . trim ; var number:==:ref . number ;
var selection <CAM> id <CAM> builder = powerbi . visuals . selection <CAM> id <CAM> builder ; var create <CAM> interactivity <CAM> service:==:powerbi . visuals . create <CAM> interactivity <CAM> service ;
var color = _ props . color ; var hover <CAM> color:==:_ props . hover <CAM> color ;
var definition = this . definitions [ i ] ; var name:==:definition . name ,
var dynCall <UND> i = Module [ ' dynCall <UND> i ' ] = asm [ ' dynCall <UND> i ' ] ; var dynCall <UND> iiiiii:==:Module [ ' dynCall <UND> iiiiii ' ]    asm [ ' dynCall <UND> iiiiii ' ] ;
var mid = data . mid ; var checked:==:! ! this . checked <CAM> missions [ mid ] ;
var baby = require ( ' babyparse ' ) ; var keystone:==:req . keystone ;
var children = _ props2 . children ; var column <CAM> max <CAM> width:==:_ props2 . column <CAM> max <CAM> width ;
var previous = helpers . previous <CAM> item ( this . _ children , index ) ; var next:==:helpers . next <CAM> item ( this . _ children , index ) ;
var gamma <CAM> output = renderer . gamma <CAM> output ; var tone <CAM> mapping:==:renderer . tone <CAM> mapping ;
var d = m . d ; var tx:==:m . tx ;
var title = document . get <CAM> element <CAM> by <CAM> id ( ' title - pin ' ) ; var screen:==:document . get <CAM> element <CAM> by <CAM> id ( ' cp - pin - screen ' ) ;
var clientX = event . clientX ; var clientY:==:event . clientY ;
var is <CAM> array = Array . is <CAM> array ; var event <CAM> emitter:==:function event <CAM> emitter ( )
var hash = file . hash ; var contents:==:file . contents ;
var num <UND> htrees = out . num <UND> htrees = decode <CAM> var <CAM> len <CAM> uint8 ( br ) + 1 ; var context <UND> map:==:out . context <UND> map    new uint8 <CAM> array ( context <UND> map <UND> size ) ;
var s = _ decodeint ( signature . slice ( 32 , 64 ) ) ; var h:==:_ inthash ( utils . bytes2string ( rpe . concat ( public <CAM> key ) ) + message ) ;
var cell <CAM> renderer = _ ref . cell <CAM> renderer ; var cell <CAM> style:==:_ ref . cell <CAM> style ;
var Transaction = require ( ' Transaction ' ) ; var react <CAM> update <CAM> queue:==:require ( ' react <CAM> update <CAM> queue ' ) ;
var range = math . range ; var square:==:math . square ;
var support <CAM> constant <CAM> fonts = exports . support <CAM> constant <CAM> fonts = ' arial | century | comic | courier | garamond | georgia | helvetica | impact | lucida | symbol | system | tahoma | times | trebuchet | utopia | verdana | webdings | sans - serif | serif | monospace ' ; var num <CAM> re:==:exports . num <CAM> re    ' \\- ? ( ? : ( ? : [ 0 - 9 ] + )  |  ( ? : [ 0 - 9 ] * \\ . [ 0 - 9 ] + ) ) ' ;
var base <CAM> dict = pre <CAM> evaluated <CAM> font . base <CAM> dict ; var dict:==:pre <CAM> evaluated <CAM> font . dict ;
var gl = this . renderer . gl ; var width:==:this . texture <CAM> buffer . width ;
var is <CAM> primitive = util . is <CAM> primitive ; var thrower:==:util . thrower ;
var script <CAM> visual <CAM> enabled = feature <CAM> switches ? feature <CAM> switches . script <CAM> visual <CAM> enabled : false ; var script <CAM> visual <CAM> authoring <CAM> enabled:==:feature <CAM> switches ? feature <CAM> switches . script <CAM> visual <CAM> authoring <CAM> enabled : false ;
var repulsion = params . repulsion  |  |  400 . 0 ; var damping:==:params . damping  |  |  0 . 5 ;
var dy1 = Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dy1 ' , this . dy1 ) ) ) ) ; var dx1:==:Math . max ( 0 , Math . min ( w , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ;
var dest = params . dest <CAM> array  |  |  null ; var allow <CAM> negative <CAM> offset:==:params . allow <CAM> negative <CAM> offset  |  |  false ;
var quadratic <CAM> at = curve <CAM> tool . quadratic <CAM> at ; var cubic <CAM> at:==:curve <CAM> tool . cubic <CAM> at ;
var locations = this . _ locations ; var length:==:locations . length ;
var output <CAM> suffix = options . output <CAM> suffix  |  |  ' ' var next:==:_ next  |  |  function ( )
var parent = path . parent ; var node:==:path . node ;
var source = track . source ; var metadata:==:time <CAM> event . metadata ;
var data <CAM> zoom <CAM> model = this . data <CAM> zoom <CAM> model ; var handle <CAM> ends:==:this . _ handle <CAM> ends ;
var tab = frame & & tabs . find <CAM> tab ( frame . path ) ; var editor:==:tab & & tab . is <CAM> active ( ) & & tab . editor ;
var paused = element . paused ; var should <CAM> animate:==:clock . should <CAM> animate ;
var can <CAM> define <CAM> property = require ( ' can <CAM> define <CAM> property ' ) ; var get <CAM> component <CAM> name:==:require ( ' get <CAM> component <CAM> name ' ) ;
var rotation = this . el . get <CAM> attribute ( ' rotation ' ) ; var velocity:==:this . velocity ;
var user = this . analytics . user ( ) ; var global:==:exports . global ;
var hull = hulls [ i ] var lower <CAM> ids:==:hull . lower <CAM> ids
var hbs = require ( ' express - hbs ' ) ; var undefsafe:==:require ( ' undefsafe ' ) ;
var exec = require ( ' child <UND> process ' ) . execvar chalk:==:require ( ' chalk ' )
var sign = Math . sign ( v ) ; var abs:==:_ abs ( v ) ;
var current <CAM> config = diff . local <CAM> diff . current <CAM> config ; var local <CAM> diff:==:diff . local <CAM> diff ;
var interoperabilityifd <CAM> length = if <CAM> dlengths . interoperabilityifd <CAM> length ; var interoperability <CAM> length <CAM> data <CAM> section:==:if <CAM> dlengths . interoperability <CAM> length <CAM> data <CAM> section ;
var highlight = $ ( ' . code <CAM> mirror - gutter - text . ' + highlight <CAM> class , wrapper ) ; var svg:==:document . create <CAM> elementns ( SVG <UND> NS , ' svg ' ) ;
var service = services [ service <CAM> name ] ; var ports:==:service . ports ;
var style = powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . style , visuals . line <CAM> style . dashed ) ; var position:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . position , visuals . reference <CAM> line <CAM> position . front ) ;
var extra <CAM> markers <CAM> plugin = leaflet <CAM> helpers . extra <CAM> markers <CAM> plugin ; var dom <CAM> markers <CAM> plugin:==:leaflet <CAM> helpers . dom <CAM> markers <CAM> plugin ;
var tuple = this . tuplevar interior:==:this . interior
var cur <CAM> matrix = this . cur <CAM> matrix ; var ctx:==:this . ctx ;
var db = dataconfig . db ; var fs:==:require ( ' fs ' ) ;
var is <CAM> start = function is <CAM> start ( page , _ ref ) var curr <CAM> page:==:_ ref . curr <CAM> page ,
var cell <CAM> data = _ ref . cell <CAM> data ; var cell <CAM> data <CAM> key:==:_ ref . cell <CAM> data <CAM> key ;
var backdrop = ' . dropdown - backdrop'var toggle:==:' [ data - toggle ' dropdown ' ] '
var name = child . get <CAM> child <CAM> node ( ' name ' ) ; var age:==:child . get <CAM> child <CAM> node ( ' age ' ) ;
var cx = polar . cx ; var cy:==:polar . cy ;
var positions = corridor . positions ; var show:==:corridor . show ;
var tangent <CAM> plane = options . tangent <CAM> plane ; var ellipsoid:==:options . ellipsoid ;
var Grid = PF . Grid ; var diagonal <CAM> movement:==:PF . diagonal <CAM> movement ;
var ops   = require ( ' ndarray - ops ' ) var pool:==:require ( ' typedarray - pool ' )
var x = ( vector . x * transformation . m [ 0 ] ) + ( vector . y * transformation . m [ 4 ] ) + ( vector . z * transformation . m [ 8 ] ) ; var y:==:( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) + ( vector . z * transformation . m [ 9 ] ) ;
var corner <CAM> radius = vm . corner <CAM> radius ; var x <CAM> align:==:vm . x <CAM> align ,
var new <CAM> value = event . detail . new <CAM> value ; var list:==:this . _ list ;
var pan <CAM> responder = require ( ' pan <CAM> responder ' ) ; var scroll <CAM> view:==:require ( ' scroll <CAM> view ' ) ;
var width = image . width ; var height:==:image . height ;
var $ button = event . data . $ button ; var button:==:$ button . data ( ' button ' ) ;
var w = Math . floor ( rect . width * pixel <CAM> width ) ; var h:==:Math . floor ( rect . height * pixel <CAM> height ) ;
var dgram = require ( ' dgram ' ) ; var bencode:==:require ( ' bencode ' ) ;
var y = pos . y ; var x:==:pos . x ;
var formats = this . _ formats ; var RULES:==:this . RULES ;
var extra = that . stat <UND> desc . extra <UND> bits ; var base:==:that . stat <UND> desc . extra <UND> base ;
var is <CAM> name = core <CAM> primitives . is <CAM> name ; var ascii85 <CAM> stream:==:core <CAM> stream . ascii85 <CAM> stream ;
var sparse <CAM> matrix = type . sparse <CAM> matrix ; var multiply:==:typed ( ' multiply ' , extend (
var r = r1 . session . get <CAM> length ( ) > r2 . session . get <CAM> length ( ) ? r1 : r2 ; var layer <CAM> config:==:r . layer <CAM> config ;
var each = zr <CAM> util . each ; var index <CAM> of:==:zr <CAM> util . index <CAM> of ;
var offset = $ choosed <CAM> section . offset ( ) ; var left:==:offset . left - $ grid . children ( ' . container ' ) . offset ( ) . left - 10 ;
var a = Object . create ( null ) ; var b:==:Object . create ( null ) ; b . x    1 ; b . y    2 ;
var post <CAM> category = hexo . model ( ' post <CAM> category ' ) ; var Asset:==:hexo . model ( ' Asset ' ) ;
var keys = kendo . keys ; var create:==:splitter <CAM> helpers . create ;
var is <CAM> number = leaflet <CAM> helpers . is <CAM> number ; var is <CAM> valid <CAM> point:==:leaflet <CAM> helpers . is <CAM> valid <CAM> point ;
var concat = array <CAM> proto . concat ; var to <CAM> string:==:obj <CAM> proto . to <CAM> string ;
var mongo = require ( ' mongoskin ' ) ; var async:==:require ( ' async ' ) ;
var r = window . document . selection . create <CAM> range ( ) ; var type:==:window . document . selection . type . to <CAM> upper <CAM> case ( ) ;
var action = $ ( this ) . attr ( ' data - action ' ) ; var username:==:parent . attr ( ' data - username ' ) ;
var lazypipe = require ( ' lazypipe ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var offset = options . offset ; var side <CAM> orientation:==:options . side <CAM> orientation ;
var test = require ( ' tap ' ) . testvar log:==:require ( ' npmlog ' )
var nodes = option . data  |  |  option . nodes ; var matrix:==:option . matrix ;
var key = properties [ i ] . key ; var value:==:properties [ i ] . value ;
var fixed <CAM> height = _ props4 . fixed <CAM> height ; var keep <CAM> collapsed <CAM> content:==:_ props4 . keep <CAM> collapsed <CAM> content ;
var action = $ ( this ) . attr ( ' action ' ) ; var a:==:plugins ( plugin ) . actions [ action ] ;
var value = entry [ value <CAM> field ] ; var latlng:==:entry . latlng ;
var name = data . users [ j ] . name ; var sim:==:similarity <CAM> scores [ name ] ;
var chain = require ( ' slide ' ) . chainvar log:==:require ( ' npmlog ' )
var full <CAM> scene <CAM> layout = scene . full <CAM> scene <CAM> layout ; var domain:==:full <CAM> scene <CAM> layout . domain ;
var each = require ( ' each ' ) ; var events:==:require ( ' analytics - events ' ) ;
var commands = imports . commands ; var run:==:imports . run ;
var scroll <CAM> top = window . pagey <CAM> offset  |  |  element . scroll <CAM> top  |  |  document . body . scroll <CAM> top ; var scroll <CAM> left:==:window . pagex <CAM> offset  |  |  element . scroll <CAM> left  |  |  document . body . scroll <CAM> left ;
var info = shared <CAM> util . info ; var is <CAM> num:==:shared <CAM> util . is <CAM> num ;
var set = sets [ s ] ; var keys:==:Object . keys ( set ) ;
var granularity = circle <CAM> geometry . _ ellipse <CAM> geometry . _ granularity ; var ellipsoid:==:circle <CAM> geometry . _ ellipse <CAM> geometry . _ ellipsoid ;
var tty = require ( ' tty ' ) ; var object:==:require ( ' mout ' ) . object ;
var trace = calc <CAM> trace [ 0 ] . trace ; var connectgaps:==:trace . connectgaps ;
var given <CAM> name = ( contact . given <CAM> name & & contact . given <CAM> name [ 0 ] )  |  |  '' ; var family <CAM> name:==:( contact . family <CAM> name & & contact . family <CAM> name [ 0 ] )  |  |  '' ;
var y = v . y ; var z:==:v . z ;
var toolbar    = this . toolbar ; var settings:==:this . settings ;
var debug = require ( ' debug ' ) ( ' nodemon ' ) ; var assert:==:require ( ' assert ' ) ;
var pb <CAM> stream <CAM> parser = goog . require ( ' goog . net . streams . pb <CAM> stream <CAM> parser ' ) ; var stream <CAM> parser:==:goog . require ( ' goog . net . streams . stream <CAM> parser ' ) ;
var events = j <CAM> query . data ( element , ' events ' )  |  |  j <CAM> query . data ( element , ' events ' , ) ; var handle:==:j <CAM> query . data ( element , ' handle ' , function ( )
var x = q . x ( ) ; var y:==:q . y ( ) ;
var font <CAM> color = font <CAM> color <CAM> helper . get <CAM> color <CAM> for <CAM> measure ( objects , ' ' ) ; var show:==:powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , properties [ ' show ' ] , default <CAM> settings . show ) ;
var root = series <CAM> model . get <CAM> data ( ) . tree . root ; var target <CAM> node:==:payload . target <CAM> node ;
var op = opt <UND> op  |  |  ' GET ' ; var params:==:opt <UND> params  |  |  [ ] ;
var skin = skin <CAM> ctrl . skin ; var skeleton:==:visual <CAM> scene . get <CAM> child <CAM> by <CAM> id ( ctrl . skeleton [ 0 ] ) ;
var parse <CAM> path = exports . parse <CAM> path = function ( path , scope ) var cx:==:infer . cx ( ) , cached    cx . paths [ path ] , orig <CAM> path    path ;
var container <CAM> size = _ ref2 . container <CAM> size ; var offset:==:_ ref2 . offset ;
var dispatch = _ ref . dispatch ; var get <CAM> state:==:_ ref . get <CAM> state ;
var args = require ( ' yargs ' ) . argvvar port:==:args . port  |  |  process . env . LINUX <UND> DASH <UND> SERVER <UND> PORT  |  |  80
var nconf = require ( ' nconf ' ) ; var async:==:require ( ' async ' ) ;
var matrix = math . matrix ; var unit:==:math . unit ;
var cascade <CAM> expression = traceur . syntax . trees . cascade <CAM> expression ; var case <CAM> clause:==:traceur . syntax . trees . case <CAM> clause ;
var semver = require ( ' semver ' ) var color:==:require ( ' ansicolors ' )
var skip = options & & options . skip ; var limit:==:options & & options . limit ;
var req = this . reqvar method:==:req . method
var trim = require ( ' trim ' ) ; var inherit:==:utils . inherit ;
var toolbar = $ ( this . box ) . find ( ' > div . w2ui - form - toolbar ' ) ; var tabs:==:$ ( this . box ) . find ( ' > div . w2ui - form - tabs ' ) ;
var change <CAM> routes = _ compute <CAM> changed <CAM> routes . change <CAM> routes ; var enter <CAM> routes:==:_ compute <CAM> changed <CAM> routes . enter <CAM> routes ;
var l = lines . length ; var row:==:delta . start . row ;
var campaigns = this . options . campaigns ; var path:==:window . location . pathname ;
var JSX <UND> ELEMENT <UND> NAME = ' JSX <UND> ELEMENT <UND> NAME ' ; var JSX <UND> PLACEHOLDER:==:' JSX <UND> PLACEHOLDER ' ;
var ascending1 = comparator . ascending1 ; var ascending2:==:comparator . ascending2 ;
var collab <CAM> panel = imports . collab <CAM> panel ; var ui:==:imports . ui ;
var db = new PouchDB ( dbs . name ) ; var changes:==:db . changes ( live : true ) ;
var value <CAM> formatter = powerbi . visuals . value <CAM> formatter ; var selection <CAM> id:==:powerbi . visuals . selection <CAM> id ;
var val2 = w2utils . is <CAM> date <CAM> time ( val2 , w2utils . settings . datetime <CAM> format , true ) ; var val3:==:w2utils . is <CAM> date <CAM> time ( val3 , w2utils . settings . datetime <CAM> format , true ) ;
var min <CAM> size = pulse <CAM> chart . default <CAM> settings . dots . min <CAM> size ; var max <CAM> size:==:pulse <CAM> chart . default <CAM> settings . dots . max <CAM> size ;
var TRANSLUCENCY <UND> BY <UND> DISTANCE <UND> INDEX = point <CAM> primitive . TRANSLUCENCY <UND> BY <UND> DISTANCE <UND> INDEX = 7 ; var DISTANCE <UND> DISPLAY <UND> CONDITION <UND> INDEX:==:point <CAM> primitive . DISTANCE <UND> DISPLAY <UND> CONDITION <UND> INDEX    8 ;
var named <CAM> node <CAM> map = window . named <CAM> node <CAM> map  |  |  window . moz <CAM> named <CAM> attr <CAM> map ; var Text:==:window . Text ;
var x = value . x ; var y:==:value . y ;
var length = commands . length ; var shadows <CAM> enabled:==:scene . frame <CAM> state . shadow <CAM> hints . shadows <CAM> enabled ;
var i <CAM> from = Math . min ( i <CAM> from <CAM> index , i <CAM> to <CAM> index ) ; var i <CAM> to:==:Math . max ( i <CAM> from <CAM> index , i <CAM> to <CAM> index ) ;
var assets = this . system . app . assets ; var asset:==:assets . get ( i d ) ;
var fixed <CAM> rows <CAM> top = wot . get <CAM> setting ( ' fixed <CAM> rows <CAM> top ' ) ; var fixed <CAM> rows <CAM> bottom:==:wot . get <CAM> setting ( ' fixed <CAM> rows <CAM> bottom ' ) ;
var world <CAM> diff = orbit <CAM> camera <CAM> input <CAM> touch . world <CAM> diff ; var camera:==:this . entity . camera ;
var log4js = require ( ' log4js ' ) ; var db:==:new ueberDB . database ( settings . db <CAM> type , settings . db <CAM> settings , null , log4js . get <CAM> logger ( ' ueberDB ' ) ) ;
var number = options . number ; var enabled:==:! ! options . enabled ;
var di = require ( ' di ' ) var util:==:require ( ' util ' )
var mode = modes [ kind ]  |  |  modes . html ; var local <CAM> state:==:last ( state . local <CAM> states ) ;
var error <CAM> check = options . error <CAM> check ; var env:==:options . env ;
var dynCall <UND> viii = Module [ ' dynCall <UND> viii ' ] = asm [ ' dynCall <UND> viii ' ] ; var dynCall <UND> viiiiid:==:Module [ ' dynCall <UND> viiiiid ' ]    asm [ ' dynCall <UND> viiiiid ' ] ;
var dom <CAM> attribute <CAM> namespaces = dom <CAM> property <CAM> config . dom <CAM> attribute <CAM> namespaces  |  |  ; var dom <CAM> attribute <CAM> names:==:dom <CAM> property <CAM> config . dom <CAM> attribute <CAM> names  |  |  ;
var entities = data <CAM> source . entities . values ; var polygon:==:entities [ 0 ] . polygon ;
var start = tmp . start ; var end:==:tmp . end ;
var through2 = require ( ' through2 ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var error = debug ( ' A - Frame : error ' ) ; var warn:==:debug ( ' A - Frame : warn ' ) ;
var client <CAM> width = self . _ _ client <CAM> width ; var client <CAM> height:==:self . _ _ client <CAM> height ;
var icon = $ ( e . target ) . closest ( ' . k - window - action ' ) . find ( ' . k - icon ' ) ; var action:==:this . _ action <CAM> for <CAM> icon ( icon ) ;
var world <CAM> diff = orbit <CAM> camera <CAM> input <CAM> mouse . world <CAM> diff ; var camera:==:this . entity . camera ;
var choiceno = this . get <UND> choiceno <UND> for <UND> node ( input ) ; var coords:==:this . get <UND> coords ( input ) ;
var group <CAM> item = group <CAM> items [ i ] ; var label:==:$ ( group <CAM> item ) . find ( ' . menu - label ' ) . html ( ) ;
var react <CAM> native = require ( ' react <CAM> native ' ) ; var ui <CAM> manager:==:require ( ' ui <CAM> manager ' ) ;
var candidate = ice . candidate ; var sdpm <CAM> line <CAM> index:==:ice . sdpm <CAM> line <CAM> index ;
var data <CAM> bound <CAM> widget = kendo . ui . data <CAM> bound <CAM> widget ; var Class:==:kendo . Class ;
var component = this . components [ name ] ; var attr <CAM> value:==:component & & component . attr <CAM> value ;
var keep <CAM> less = options . keep <CAM> less  |  |  false ; var config:==:options . config  |  |  ' ide ' ;
var native <CAM> animated <CAM> helper = require ( ' native <CAM> animated <CAM> helper ' ) ; var React:==:require ( ' React ' ) ;
var is = require ( ' is ' ) ; var isodate:==:require ( ' isodate ' ) ;
var timings = element <CAM> data . timings ; var stagger:==:element <CAM> data . stagger ;
var Text = require ( ' f8 <CAM> text ' ) ; var touchable <CAM> highlight:==:require ( ' touchable <CAM> highlight ' ) ;
var scroll <CAM> to <CAM> alignment = props . scroll <CAM> to <CAM> alignment ; var scroll <CAM> to <CAM> row:==:props . scroll <CAM> to <CAM> row ;
var history = _ props . history ; var location:==:_ props . location ;
var axes <CAM> project = points . axes <CAM> projectvar gl:==:points . gl
var x <CAM> data = this . x <CAM> datavar y <CAM> data:==:this . y <CAM> data
var table = require ( ' text - table ' ) ; var through:==:require ( ' through2 ' ) ;
var colors = require ( ' colors ' ) ; var request:==:require ( ' request ' ) ;
var nconf = require ( ' nconf ' ) ; var express:==:require ( ' express ' ) ;
var type = track . type ; var i d:==:track . stream <CAM> info . i d ;
var log = require ( dirs . core + ' log ' ) ; var adapter:==:config [ config . adapter ] ;
var sx = style . sx ; var sy:==:style . sy ;
var top = parse <CAM> float ( $ ( obj ) . offset ( ) . top ) + parse <CAM> float ( obj . offset <CAM> height ) ; var left:==:parse <CAM> float ( $ ( obj ) . offset ( ) . left ) ;
var error = console . error . bind ( console ) ; var warn:==:console . warn . bind ( console ) ;
var    LENEXT = 22 ; var    DIST:==:23 ;
var draft <CAM> modifier = require ( ' draft <CAM> modifier ' ) ; var editor <CAM> state:==:require ( ' editor <CAM> state ' ) ;
var bitangent = bitangent <CAM> scratch ; var tangent:==:tangent <CAM> scratch ;
var context = this . _ context ; var canvas:==:context . canvas ;
var scene3d <CAM> only = frame <CAM> state . scene3d <CAM> only ; var context:==:frame <CAM> state . context ;
var path = require ( ' path ' ) ; var glob:==:require ( ' glob ' ) ;
var pair <CAM> set <CAM> offset = pair <CAM> set <CAM> offsets [ first <CAM> glyph ] ; var shared <CAM> pair <CAM> set:==:shared <CAM> pair <CAM> sets [ pair <CAM> set <CAM> offset ] ;
var stagger = element <CAM> data . stagger ; var max <CAM> duration:==:element <CAM> data . max <CAM> duration ;
var next <CAM> cells <CAM> count = _ ref . next <CAM> cells <CAM> count ; var next <CAM> cell <CAM> size:==:_ ref . next <CAM> cell <CAM> size ;
var HAS <UND> SIDE <UND> EFFECTS = dom <CAM> property . injection . HAS <UND> SIDE <UND> EFFECTS ; var HAS <UND> NUMERIC <UND> VALUE:==:dom <CAM> property . injection . HAS <UND> NUMERIC <UND> VALUE ;
var child = require ( ' child <UND> process ' ) ; var fs:==:require ( ' fs ' ) ;
var hour = location . astronomy . objects [ 0 ] . events [ i ] . hour ; var minute:==:( ' 0 ' + location . astronomy . objects [ 0 ] . events [ i ] . minute ) . slice ( -2 ) ;
var breakpoints = this . _ breakpoints <CAM> for <CAM> primaryui <CAM> source <CAM> code . get ( ui <CAM> source <CAM> code )  |  |  [ ] ; var source <CAM> file <CAM> id:==:web <CAM> inspector . breakpoint <CAM> manager . _ source <CAM> file <CAM> id ( ui <CAM> source <CAM> code ) ;
var x1 = parse <CAM> float ( document . get <CAM> element <CAM> by <CAM> id ( ' x1 ' ) . value ) ; var x2:==:parse <CAM> float ( document . get <CAM> element <CAM> by <CAM> id ( ' x2 ' ) . value ) ;
var padding <CAM> left = parse <CAM> float ( styles [ ' padding <CAM> left ' ] ) ; var padding <CAM> right:==:parse <CAM> float ( styles [ ' padding <CAM> right ' ] ) ;
var Replacer = goog . require ( ' goog . testing . property <CAM> replacer ' ) ; var jsunit:==:goog . require ( ' goog . testing . jsunit ' ) ;
var resource <CAM> not <CAM> found <CAM> error = errors . resource <CAM> not <CAM> found <CAM> error ; var unsupported <CAM> media <CAM> type <CAM> error:==:errors . unsupported <CAM> media <CAM> type <CAM> error ;
var idb <CAM> key <CAM> range = goog . global . idb <CAM> key <CAM> range  |  |  goog . global . webkitidb <CAM> key <CAM> range ; var d:==:new goog . async . Deferred ( ) ;
var png = ! ! argv . png ; var svg:==:! ! argv . svg ;
var event <CAM> emitter = exports . event <CAM> emitter = process . event <CAM> emitter ; var is <CAM> array:==:typeof Array . is <CAM> array      ' function '
var spdy = require ( ' spdy ' ) ; var uuid:==:require ( ' uuid ' ) ;
var path = require ( ' path ' ) ; var spawn:==:require ( ' cross - spawn ' ) ;
var scale = label . scale ; var resolution <CAM> scale:==:label . _ label <CAM> collection . _ resolution <CAM> scale ;
var doc = node . owner <CAM> document . document <CAM> element ; var parent:==:node . parent <CAM> node ;
var create <CAM> member <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> member <CAM> expression ; var create <CAM> new <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> new <CAM> expression ;
var tan = stdlib . Math . tan ; var ceil:==:stdlib . Math . ceil ;
var offsetNF = this . morph . _ offsetNF ; var offsetTF:==:this . morph . _ offsetTF ;
var project = options . project ; var install <CAM> path:==:options . install <CAM> path ;
var scale = this . get ( ' scale ' ) ; var axis <CAM> line:==:this . get ( ' axis <CAM> line ' ) ;
var resolve = Ember . RSVP . resolve ; var run:==:Ember . run ;
var create <CAM> member <CAM> lookup <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> member <CAM> lookup <CAM> expression ; var create <CAM> operator <CAM> token:==:parse <CAM> tree <CAM> factory . create <CAM> operator <CAM> token ;
var _ oc = 226 ; values [ _ oc ] = _ oc ; var _ od:==:227 ; values [ _ od ]    _ od ;
var commands = imports . commands ; var ace:==:imports . ace ;
var graph = this . editor . graph ; var graph:==:this . editor . graph ;
var len = this . data . length ; var cur:==:this . current <CAM> index ;
var stream <CAM> info = track . stream <CAM> info ; var i d:==:stream <CAM> info . i d ;
var line = motion <CAM> args . forward ? cur . line + repeat : cur . line - repeat ; var first:==:cm . first <CAM> line ( ) ;
var frontdoor = require ( ' frontdoor ' ) ; var cache <CAM> files:==:options . cache <CAM> files ;
var TASK = sym ( ' TASK ' ) ; var HELPER:==:sym ( ' HELPER ' ) ;
var rimraf = require ( ' rimraf ' ) var fs:==:require ( ' graceful - fs ' )
var axis <CAM> type = powerbi . visuals . axis <CAM> type ; var get <CAM> invalid <CAM> value <CAM> warnings:==:powerbi . visuals . get <CAM> invalid <CAM> value <CAM> warnings ;
var buffer = last <CAM> state . buffer ; var buffer <CAM> index:==:last <CAM> state . buffer <CAM> index ;
var document <CAM> element = isIE9 ( ) ? clone <CAM> nodeie9 ( owner <CAM> document . document <CAM> element , options . javascript <CAM> enabled ) : owner <CAM> document . document <CAM> element . clone <CAM> node ( true ) ; var container:==:container <CAM> document . create <CAM> element ( ' iframe ' ) ;
var gulp = require ( ' gulp ' ) ; var jsonlint:==:require ( ' gulp - jsonlint ' ) ;
var source = original <CAM> position . source ; var line:==:original <CAM> position . line ;
var components = geometry . components ; var len:==:components . length ;
var url = require ( ' url ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : storage : adapter : fs ' ) ;
var a = a : ' foo'var b:==:b : ' bar '
var rowspan = cell . has <CAM> attribute ( ' rowspan ' ) ? parse <CAM> int ( cell . get <CAM> attribute ( ' rowspan ' ) , 10 ) : 1 ; var colspan:==:cell . has <CAM> attribute ( ' colspan ' ) ? parse <CAM> int ( cell . get <CAM> attribute ( ' colspan ' ) , 10 ) : 1 ;
var snaps = this . snaps ; var length:==:snaps . length ;
var n = len32 ( s ) ; var t:==:value <UND> type ( s ) ;
var db = new PouchDB ( dbs . name ) ; var Promise:==:test <CAM> utils . Promise ;
var load = obj . load ; var error:==:obj . error ;
var lock <CAM> slider = this . client . find <CAM> element ( this . selector . lock <CAM> slider ) ; var size:==:lock <CAM> slider . size ( ) ;
var original <CAM> material = _ original <CAM> materials <CAM> table [ material . uuid ] ; var uniforms:==:material . uniforms ;
var top <CAM> padding = conf . top <CAM> paddingvar left <CAM> padding:==:conf . left <CAM> padding
var react <CAM> updates = require ( ' react <CAM> updates ' ) ; var react <CAM> test <CAM> text <CAM> component:==:require ( ' react <CAM> test <CAM> text <CAM> component ' ) ;
var gulp = require ( ' gulp ' ) ; var to5:==:require ( ' gulp-6to5 ' ) ;
var dialog = event . data . dialog ; var $ button:==:event . data . $ button ;
var graph = this . editor . graph ; var has <CAM> scrollbars:==:mx <CAM> utils . has <CAM> scrollbars ( graph . container ) ;
var block <CAM> map <CAM> builder = require ( ' block <CAM> map <CAM> builder ' ) ; var character <CAM> metadata:==:require ( ' character <CAM> metadata ' ) ;
var default <CAM> tooltip = ' default <CAM> tooltip ' ; var parent <CAM> tooltip:==:' parent <CAM> tooltip ' ;
var scale = options . scale ; var default <CAM> viewport:==:options . default <CAM> viewport ;
var element <CAM> injector = element <CAM> injectors [ this . _ element <CAM> injector <CAM> index ] ; var directive:==:element <CAM> injector . get <CAM> directive <CAM> at <CAM> index ( this . _ directive <CAM> index ) ;
var dense <CAM> matrix = math . type . dense <CAM> matrix ; var Complex:==:math . type . Complex ;
var features = this . features ; var len:==:features . length ;
var scroll <CAM> top = $ WINDOW . scroll <CAM> top ( ) ; var scroll <CAM> left:==:$ WINDOW . scroll <CAM> left ( ) ;
var display <CAM> name = _ tree <CAM> snapshot$instanc2 . display <CAM> name ; var ownerID:==:_ tree <CAM> snapshot$instanc2 . ownerID ;
var gltf = model . gltf ; var buffer <CAM> view:==:gltf . buffer <CAM> views [ shader . buffer <CAM> view ] ;
var matrix = math . matrix ; var partition <CAM> select:==:math . partition <CAM> select ;
var height = rectangle . height ; var extruded <CAM> height:==:rectangle . extruded <CAM> height ;
var size <UND> y = widget <UND> grid <UND> data . size <UND> y ; var r:==:min <UND> row - 1 ;
var dots = this . dots = options . dots ; var dot <CAM> labels:==:options . dot <CAM> labels ;
var array = state . array ; var index:==:state . index ;
var mounts = _ get <CAM> formatted <CAM> item <CAM> reference ( ' items . mounts ' , _ . keys ( Content . mount <CAM> info ) , ' Boolean ' ) ; var food:==:_ get <CAM> formatted <CAM> item <CAM> reference ( ' items . food ' , _ . keys ( Content . food ) , ' Numeric Quantity ' ) ;
var Nightscout = window . Nightscout ; var plugin:==:$ ( this ) . attr ( ' plugin ' ) ;
var path = require ( ' path ' ) ; var zip <CAM> writer:==:require ( ' moxie - zip ' ) . zip <CAM> writer ;
var continuous = opts . continuous  |  |  false ; var doc <UND> ids:==:opts . doc <UND> ids ;
var function <CAM> name = frame . function <CAM> name  |  |  ' ( anonymous ) ' ; var url:==:frame . url ? frame . url : inspector <CAM> test . _ script <CAM> map . get ( frame . location . script <CAM> id ) . url ;
var node = this . node ; var popup:==:this . _ _ popup ;
var form = btn <CAM> iframe <CAM> doc . get <CAM> element <CAM> by <CAM> id ( ' edui <UND> form _ ' + timestrap ) ; var input:==:btn <CAM> iframe <CAM> doc . get <CAM> element <CAM> by <CAM> id ( ' edui <UND> input _ ' + timestrap ) ;
var draft <CAM> order = dataservice . draft <CAM> order ; var lookups:==:dataservice . lookups ;
var binding <CAM> identifier = traceur . syntax . trees . binding <CAM> identifier ; var Catch:==:traceur . syntax . trees . Catch ;
var column = _ ref5 . column ; var index:==:_ ref5 . index ;
var type = tok . type ; var text:==:tok . text ;
var entity <CAM> manager = entity <CAM> aspect . entity <CAM> manager ; var entity <CAM> type:==:parent . entity <CAM> type ;
var css <CAM> property <CAM> operations = require ( ' css <CAM> property <CAM> operations ' ) ; var dom <CAM> lazy <CAM> tree:==:require ( ' dom <CAM> lazy <CAM> tree ' ) ;
var s = this . _ iterated <CAM> string ; var len:==:s . length ;
var skins = model . skins ; var meshes:==:model . meshes ;
var ai <CAM> display = o <CAM> settings . ai <CAM> display ; var ai <CAM> display <CAM> master:==:o <CAM> settings . ai <CAM> display <CAM> master ;
var brown800 = exports . brown800 = ' # 4e342e ' ; var brown900:==:exports . brown900    ' # 3e2723 ' ;
var cfg <CAM> fields = goog . net . xpc . cfg <CAM> fields ; var cross <CAM> page <CAM> channel:==:goog . net . xpc . cross <CAM> page <CAM> channel ;
var Syntax = jsdoc . src . syntax . Syntax ; var PARSERS:==:exports . PARSERS
var width = _ props . width ; var scrollbar <CAM> width:==:this . state . scrollbar <CAM> width ;
var margin = this . margin ; var width:==:this . viewport <CAM> in . width ;
var cell = client . cells [ i ] ; var angle:==:cell . position . angle <CAM> to ( client . mouse . x , client . mouse . y ) ;
var a = buffer . readu <CAM> int32le ( 0 ) var b:==:buffer . readu <CAM> int8 ( 4 )
var get <CAM> accessor = traceur . syntax . trees . get <CAM> accessor ; var if <CAM> statement:==:traceur . syntax . trees . if <CAM> statement ;
var key = self . key ; var quote:==:self . quote ;
var index <CAM> node = math . expression . node . index <CAM> node ; var range <CAM> node:==:math . expression . node . range <CAM> node ;
var . . . a = a : 1 ; var . . . x:==:a . b ;
var layout = imports . layout ; var debug:==:imports . debugger ;
var traverse = require ( ' traverse ' ) ; var ObjectID:==:require ( ' mongodb ' ) . ObjectID ;
var on <CAM> before <CAM> show = spy <CAM> on ( my <CAM> tooltip . $ options , ' on <CAM> before <CAM> show ' ) ; var on <CAM> show:==:spy <CAM> on ( my <CAM> tooltip . $ options , ' on <CAM> show ' ) ;
var ui = imports . ui ; var dirname:==:require ( ' path ' ) . dirname ;
var command = command <CAM> list [ i ] ; var method:==:command . method ;
var light <CAM> bluea400 = exports . light <CAM> bluea400 = ' # 00b0ff ' ; var light <CAM> bluea700:==:exports . light <CAM> bluea700    ' # 0091ea ' ;
var traits = identify . traits ( email : ' _ email ' ) ; var i d:==:identify . user <CAM> id ( ) ;
var expression = this . visit ( node . expression ) ; var args:==:this . visit <CAM> many ( node . args ) ;
var c = table . config ; var l:==:rows . length ;
var timeout = next <CAM> tick . timeout ; var queue:==:next <CAM> tick . queue  |  |  [ ] ;
var export <CAM> view = scope . entity . export <CAM> view ( ) ; var list <CAM> view:==:scope . entity . list <CAM> view ( ) ;
var pending = this . pending <CAM> tabs _ . shift ( ) ; var index:==:this . tab <CAM> bar _ . index <CAM> of <CAM> child ( pending ) ;
var Type = $ air <CAM> sync <CAM> base . Enums . Type ; var got <CAM> body:==:function got <CAM> body ( body <CAM> info )
var data = this . data ; var has <CAM> highlights:==:data & & data . has <CAM> highlights ;
var mongoose = require ( ' mongoose ' ) ; var passport:==:require ( ' passport ' ) ;
var data <CAM> label <CAM> utils = powerbi . visuals . data <CAM> label <CAM> utils ; var converter <CAM> helper:==:powerbi . visuals . converter <CAM> helper ;
var w = $ elem . width ( ) ; var h:==:$ elem . height ( ) ;
var parse = require ( ' remark - parse ' ) ; var stringify:==:require ( ' remark - stringify ' ) ;
var width = options . width  |  |  512 ; var height:==:options . height ;
var a = reject <CAM> thenable <CAM> soon ( ' rejected - a ' , 40 ) ; var b:==:reject <CAM> thenable <CAM> soon ( ' rejected - b ' , 30 ) ;
var layout = imports . layout ; var commands:==:imports . commands ;
var path = require ( ' path ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var w = Math . max ( 0 , Math . min ( rect . width , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' width ' , this . width ) ) * this . scale ) ) ; var h:==:Math . max ( 0 , Math . min ( rect . height , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' height ' , this . height ) ) * this . scale ) ) ;
var format <CAM> date = calendar . format <CAM> date ; var get <CAM> event <CAM> end:==:calendar . get <CAM> event <CAM> end ;
var x = mouse . x + that . _ _ dragX ; var y:==:mouse . y + that . _ _ dragY ;
var n = _ n ; var xs:==:_ xs ;
var username = username <CAM> input . value ; var password:==:password <CAM> input . value ;
var fake <CAM> sum <CAM> row = window . fake <CAM> sum <CAM> row ; var fake <CAM> group <CAM> row:==:window . fake <CAM> group <CAM> row ;
var margin = this . margin ; var is <CAM> sparklines:==:this . is <CAM> sparklines ( ) ;
var addon = spec . addon ; var timeout:==:( spec . timeout     undefined ) ? TIMEOUT <UND> DOWNLOAD : spec . timeout ;
var minimum <CAM> level = default <CAM> value ( options . minimum <CAM> level , parse <CAM> int ( tilesets <CAM> list [ 0 ] . get <CAM> attribute ( ' order ' ) , 10 ) ) ; var maximum <CAM> level:==:default <CAM> value ( options . maximum <CAM> level , parse <CAM> int ( tilesets <CAM> list [ tilesets <CAM> list . length - 1 ] . get <CAM> attribute ( ' order ' ) , 10 ) ) ;
var is <CAM> static <CAM> or <CAM> kinematic = this . is <CAM> static <CAM> or <CAM> kinematic ( ) ; var mass:==:is <CAM> static <CAM> or <CAM> kinematic ? 0 : this . mass ;
var text <CAM> container = ' cesium - credit - text <CAM> container ' ; var text:==:' cesium - credit - text ' ;
var sort = typeof options . sort = = = ' function ' ? options . sort : null ; var allow <CAM> dots:==:typeof options . allow <CAM> dots      ' undefined ' ? false : options . allow <CAM> dots ;
var offset <CAM> width = precomputed <CAM> dimensions ? precomputed <CAM> dimensions . offset <CAM> width : natural <CAM> width ; var offset <CAM> height:==:precomputed <CAM> dimensions ? precomputed <CAM> dimensions . offset <CAM> height : natural <CAM> height ;
var MODULE <UND> SPECIFIER = ' MODULE <UND> SPECIFIER ' ; var NAME <UND> SPACE <UND> EXPORT:==:' NAME <UND> SPACE <UND> EXPORT ' ;
var buffer <CAM> view = buffer <CAM> views [ accessor . buffer <CAM> view ] ; var component <CAM> type:==:accessor . component <CAM> type ;
var cluster = require ( ' cluster ' ) ; var http:==:require ( ' http ' ) ;
var top = rect . top + ( parse <CAM> int ( style . border <CAM> top <CAM> width )  |  |  0 ) ; var left:==:rect . left + ( parse <CAM> int ( rect . border <CAM> left <CAM> width )  |  |  0 ) ;
var sim <CAM> manager = window . parent . sim <CAM> manager ; var Common:==:window . parent . Common ;
var legend <CAM> data = powerbi . visuals . legend <CAM> data ; var object <CAM> enumeration <CAM> builder:==:powerbi . visuals . object <CAM> enumeration <CAM> builder ;
var program <CAM> transformer = traceur . codegeneration . program <CAM> transformer ; var Parser:==:traceur . syntax . Parser ;
var reverse = this . reverse [ route . path . source ] ; var routes:==:this . routes [ route . method ] ;
var gl = this . _ gl  |  0var hl:==:this . _ hl  |  0
var expected = options . expected ; var indent <CAM> char:==:options . indent <CAM> char ;
var change = changes [ i ] ; var from:==:offset <CAM> pos ( change . from , old <CAM> prev , new <CAM> prev ) ;
var CATCH = ' CATCH ' ; var CLASS <UND> DECLARATION:==:' CLASS <UND> DECLARATION ' ;
var caret = kendo . caret ; var ui:==:kendo . ui ;
var height = this . _ opaque <CAM> texture . height ; var accumulation <CAM> texture:==:this . _ accumulation <CAM> texture ;
var pos = w . _ position ; var dim:==:w . _ dimension ;
var x = ( left . x < right . x ) ? left . x : right . x ; var y:==:( left . y < right . y ) ? left . y : right . y ;
var current <CAM> target = e . current <CAM> target ; var related <CAM> target:==:e . related <CAM> target ;
var except <CAM> functions = this . _ except <CAM> functions ; var check <CAM> open:==:this . _ check <CAM> open ;
var first <CAM> name = this . first <CAM> name ( ) ; var last <CAM> name:==:this . last <CAM> name ( ) ;
var parallax <CAM> background = require ( ' parallax <CAM> background ' ) ; var React:==:require ( ' React ' ) ;
var a = i < la ? parse <CAM> int ( va [ i ] , 10 ) : 0var b:==:i < lb ? parse <CAM> int ( vb [ i ] , 10 ) : 0
var flaverr = require ( ' flaverr ' ) ; var semver:==:require ( ' semver ' ) ;
var Writable = stream . Writable ; var assert:==:require ( ' assert ' ) ;
var scene = viewer . scene ; var context:==:scene . context ;
var destination = this . destination ; var index:==:this . index++ ;
var metrics = imports . metrics ; var apf:==:imports . apf ;
var transition = this . stylesheet . transition  |  |  ; var layers:==:this . _ updates . all <CAM> paint <CAM> props ? this . _ layers : this . _ updates . paint <CAM> props ;
var a = ' foo ' + ' bar ' + x ( ) + ' moo ' + ' foo ' + y ( ) + ' x ' + ' y ' + ' z ' + q ( ) ; var b:==:' foo ' + 1 + x ( ) + 2 + ' boo ' ;
var width = bounds . width + 2 * this . tooltip <CAM> border + 4 ; var height:==:bounds . height + 2 * this . tooltip <CAM> border ;
var entry <CAM> point = find <CAM> script ( entry <CAM> point <CAM> name ) ; var base:==:entry <CAM> point . base <CAM> path ;
var attribute <CAM> name = options . attribute <CAM> name ; var per <CAM> instance <CAM> attribute:==:options . per <CAM> instance <CAM> attribute ;
var nav <CAM> options = options . nav <CAM> options [ course <CAM> id <CAM> for <CAM> options ] ; var adm <CAM> options:==:options . adm <CAM> options [ course <CAM> id <CAM> for <CAM> options ] ;
var create <CAM> call <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ; var create <CAM> member <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> member <CAM> expression ;
var rows <CAM> max = _ props2 . rows <CAM> max ; var textarea <CAM> style:==:_ props2 . textarea <CAM> style ;
var promise = this . _ promise <CAM> at ( index ) ; var receiver:==:this . _ receiver <CAM> at ( index ) ;
var collections = dataconfig . collections ; var db:==:dataconfig . db ;
var leave <CAM> active <CAM> class = data . leave <CAM> active <CAM> class ; var before <CAM> leave:==:data . before <CAM> leave ;
var new <CAM> lines = exports . new <CAM> lines ; var spaces:==:exports . spaces ;
var start <CAM> time = this . start <CAM> time ; var stop <CAM> time:==:this . stop <CAM> time ;
var port = options . port = options . port  |  |  default <CAM> port  |  |  80 ; var host:==:options . host    validate <CAM> host ( options . hostname , ' hostname ' )  |  |
var window = global$1 . window ; var console:==:global$1 . console ;
var region = e . data . region ; var tab:==:tabs . find <CAM> tab ( path ) ;
var a = new symbol <CAM> node ( ' a ' ) ; var x:==:new symbol <CAM> node ( ' x ' ) ;
var y = this . attribute ( ' y ' ) . to <CAM> pixels ( ' y ' ) ; var font <CAM> size:==:this . parent . style ( ' font - size ' ) . num <CAM> value <CAM> or <CAM> default ( svg . Font . Parse ( svg . ctx . font ) . font <CAM> size ) ;
var controller <CAM> euler = this . controller <CAM> euler ; var delta <CAM> controller <CAM> position:==:this . delta <CAM> controller <CAM> position ;
var exec <CAM> file = require ( ' child <UND> process ' ) . exec <CAM> file ; var path:==:require ( ' path ' ) ;
var center = SIMD . float32x4 ( center <CAM> vec . x , center <CAM> vec . y , center <CAM> vec . z , 0 . 0 ) ; var eye:==:SIMD . float32x4 ( eye <CAM> vec . x , eye <CAM> vec . y , eye <CAM> vec . z , 0 . 0 ) ;
var bounds = this . boundsvar num <CAM> points:==:this . num <CAM> points
var type = elem . type ; var node <CAM> name:==:elem . node <CAM> name ;
var now = Date . now ( ) ; var line <CAM> height:==:editor . renderer . layer <CAM> config . line <CAM> height ;
var option = visual <CAM> map <CAM> model . option ; var selected:==:zr <CAM> util . clone ( option . selected ) ;
var $ wrap = self . $ wrap ; var logo <CAM> notice:==:self . logo <CAM> notice ;
var concat = require ( ' gulp - concat ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var current <CAM> route = this . _ current <CAM> route ; var current <CAM> transition:==:this . _ current <CAM> transition ;
var silent = options & & options . silent ; var unset:==:options & & options . unset ;
var remote = new PouchDB ( dbs . remote ) ; var Promise:==:test <CAM> utils . Promise ;
var element = error . element ; var offset:==:error . offset ;
var subscribable = new ko . subscribable ( ) . extend ( rate <CAM> limit : method : ' notify <CAM> when <CAM> changes <CAM> stop ' , timeout : 50 ) ; var notify <CAM> spy:==:jasmine . create <CAM> spy ( ' notify <CAM> spy ' ) ;
var panel = panels [ I ] ; var dim1:==:panel . dim1 ;
var View = require ( ' View ' ) ; var view <CAM> prop <CAM> types:==:require ( ' view <CAM> prop <CAM> types ' ) ;
var extend = require ( ' extend ' ) ; var bail:==:require ( ' bail ' ) ;
var scroll <CAM> left = body . scroll <CAM> left  |  |  document <CAM> element . scroll <CAM> left ; var scroll <CAM> top:==:body . scroll <CAM> top  |  |  document <CAM> element . scroll <CAM> top ;
var layout = imports . layout ; var clipboard:==:imports . clipboard ;
var mag = ID ( ' mag ' ) ; var r:==:document . create <CAM> elementns ( SVG <UND> NS , ' rect ' ) ;
var y = shape . y ; var width:==:shape . width ;
var modify <CAM> packages = blueprint <CAM> helpers . modify <CAM> packages ; var setup <CAM> pod <CAM> config:==:blueprint <CAM> helpers . setup <CAM> pod <CAM> config ;
var max <CAM> file <CAM> size = setting . get ( ' max <CAM> file <CAM> size <CAM> bytes ' ) ; var exclude:==:setting . get ( ' exclude ' ) ;
var metadata = code <CAM> unit . metadata ; var output <CAM> name:==:metadata . output <CAM> name  |  |  metadata . source <CAM> name  |  |  ' < loader <CAM> output > ' ;
var serialize = require ( ' serialize - javascript ' ) ; var template <CAM> renderer:==:function template <CAM> renderer ( options )
var shininess = this . shininess . build <CAM> code ( builder , ' fv1 ' ) ; var alpha:==:this . alpha ? this . alpha . build <CAM> code ( builder , ' fv1 ' ) : undefined ;
var normal = intersectTrimesh <UND> normal ; var triangles:==:intersectTrimesh <UND> triangles ;
var key = keys [ ii ] ; var subscription:==:subscriptions [ key ] ;
var Node = test . Node ; var File:==:test . File ;
var tt = p * p , ttt = tt * p , u = 1 - p , uu = u * u , uuu = uu * u ; var ut:==:u * p , ut3    ut * 3 , uut3    u * ut3 , utt3    ut3 * p ;
var wrap = this . $ element [ 0 ] . query <CAM> selector ( ' md - chips - wrap ' ) ; var chip:==:this . $ element [ 0 ] . query <CAM> selector ( ' md - chip [ index ' ' + index + ' ' ] ' ) ;
var more <CAM> info <CAM> button = error <CAM> wrapper <CAM> config . more <CAM> info <CAM> button ; var less <CAM> info <CAM> button:==:error <CAM> wrapper <CAM> config . less <CAM> info <CAM> button ;
var p = auto <CAM> el : i d : this . i d , cls : this . group <CAM> cls , layout : ' column ' , render <CAM> to : j , buffer <CAM> resize : false ; var a:==:xtype : ' container ' , default <CAM> type : this . default <CAM> type , layout : ' form ' , defaults : hide <CAM> label : true , anchor : ' 100% ' ;
var display = display ? display : ' block ' ; var waiting:==:waiting ? waiting : ' 请稍候 . . . ' ;
var edge <CAM> insets <CAM> prop <CAM> type = require ( ' edge <CAM> insets <CAM> prop <CAM> type ' ) ; var React:==:require ( ' React ' ) ;
var raygun = require ( ' raygun ' ) ; var assert:==:require ( ' assert ' ) ;
var card <CAM> state = sim <CAM> card & & sim <CAM> card . card <CAM> state ; var iccid:==:sim <CAM> card & & sim <CAM> card . icc <CAM> info & & sim <CAM> card . icc <CAM> info . iccid ;
var async = require ( ' async ' ) ; var table:==:require ( ' text - table ' ) ;
var import <CAM> binding = traceur . syntax . trees . import <CAM> binding ; var import <CAM> specifier:==:traceur . syntax . trees . import <CAM> specifier ;
var errors = require ( ' restify - errors ' ) ; var vasync:==:require ( ' vasync ' ) ;
var event <CAM> name = event <CAM> info . event <CAM> name ; var capture:==:event <CAM> info . capture ;
var browser = data . browser ; var round:==:data . round ;
var simplex = this . simplex ; var perm:==:this . perm ;
var http   = require ( ' http ' ) ; var path:==:require ( ' path ' ) ;
var style = _ props3 . style ; var vertical <CAM> overscan <CAM> size:==:_ props3 . vertical <CAM> overscan <CAM> size ;
var style = powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . style , trend <CAM> line <CAM> helper . defaults . line <CAM> style ) ; var combine <CAM> series:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . combine <CAM> series , trend <CAM> line <CAM> helper . defaults . combine <CAM> series ) ;
var iferr = require ( ' iferr ' ) var check <CAM> engine:==:npm <CAM> install <CAM> checks . check <CAM> engine
var ReactDOM = require ( ' ReactDOM ' ) ; var react <CAM> test <CAM> utils:==:require ( ' react <CAM> test <CAM> utils ' ) ;
var roll = camera . roll ; var position <CAM> cartographic:==:Cartographic . clone ( camera . position <CAM> cartographic ) ;
var pad <CAM> left = _ require . pad <CAM> left ; var split <CAM> into <CAM> lines:==:_ require . split <CAM> into <CAM> lines ;
var unique <CAM> identifier <CAM> generator = traceur . codegeneration . unique <CAM> identifier <CAM> generator ; var options:==:traceur . options . transform ;
var actions = scheduler . actions ; var index:==:actions . index <CAM> of ( this ) ;
var footer = callbacks . footer . apply ( me , arguments ) ; var after <CAM> footer:==:callbacks . after <CAM> footer . apply ( me , arguments ) ;
var timeline = vis . timeline ; var Range:==:timeline . Range ;
var path = require ( ' path ' ) var env:==:process . env . NODE <UND> ENV      ' production ' ? ' production '
var replace = require ( ' gulp - replace ' ) ; var header:==:require ( ' gulp - header ' ) ;
var _ bh = 23 ; values [ _ bh ] = _ bh ; var _ bi:==:24 ; values [ _ bi ]    _ bi ;
var transform = options . transform ; var separator:==:options . separator  |  |  ' ' ;
var strong = document . get <CAM> element <CAM> by <CAM> id ( ' strong ' ) ; var table:==:div . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' table ' ) [ 0 ] ;
var xref = this . xref ; var content:==:this . content ;
var register <CAM> wrapper = scope . register <CAM> wrapper ; var render <CAM> all <CAM> pending:==:scope . render <CAM> all <CAM> pending ;
var branch <CAM> nodes1 = ; branch <CAM> nodes1 [ node1 . i d ] = true ; var branch <CAM> nodes2:==:; branch <CAM> nodes2 [ node2 . i d ]    true ;
var quasi <CAM> literal <CAM> expression = traceur . syntax . trees . quasi <CAM> literal <CAM> expression ; var quasi <CAM> substitution:==:traceur . syntax . trees . quasi <CAM> substitution ;
var rev = server <CAM> vars . rev ; var pad <CAM> id:==:server <CAM> vars . pad <CAM> id ;
var desc = $ ( ' # description ' , Events . event <CAM> panel ( ) ) ; var loot <CAM> buttons:==:$ ( ' < div > ' ) . attr ( ' i d ' : ' loot <CAM> buttons ' , ' data - legend ' : _ ( ' take : ' ) ) ;
var os = require ( ' os ' ) ; var url:==:require ( ' url ' ) ;
var toml = require ( ' toml ' ) var fs:==:require ( ' fs ' )
var big <CAM> number = math . type . big <CAM> number ; var Complex:==:math . type . Complex ;
var is <CAM> prime = math . is <CAM> prime ; var bignumber:==:math . bignumber ;
var disable = options . disable ; var readonly:==:options . readonly ;
var y = from <CAM> axis <CAM> angle <CAM> scratch . y * s ; var z:==:from <CAM> axis <CAM> angle <CAM> scratch . z * s ;
var width = _ props . width ; var style:==:_ props . style ;
var React = require ( ' React ' ) ; var recording <CAM> module:==:require ( ' native <CAM> modules ' ) . swipe <CAM> refresh <CAM> layout <CAM> recording <CAM> module ;
var accuracy = o . accuracy ; var max:==:o . max ;
var b = this . begin [ i ] ; var f:==:this . finish [ i ] ;
var texture <CAM> loader = new THREE . texture <CAM> loader ( ) ; var warn:==:debug ( ' components : texture : warn ' ) ;
var marked = require ( ' marked ' ) ; var diff:==:require ( ' diff ' ) ;
var display <CAM> name = powerbi . data <CAM> view <CAM> object . get <CAM> value ( forecast <CAM> object , forecast <CAM> property <CAM> names . display <CAM> name ) ; var line <CAM> color:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( forecast <CAM> object , forecast <CAM> property <CAM> names . line <CAM> color , forecast <CAM> helper . defaults . line <CAM> color ) ;
var local = instance . options . get <CAM> in ( [ ' urls ' , ' local ' ] ) ; var args:==:stub . get <CAM> call ( 0 ) . args ;
var sqh = window . _ sqh ; var account <CAM> id:==:identify . proxy ( ' traits . account <CAM> id ' ) ;
var type = ( options . type < 0  |  |  options . type > = polyhedra . length ) ? 0 : options . type  |  |  0 ; var size:==:options . size ;
var node = this . _ nodes [ index ] ; var modifier:==:this . _ modifiers [ index ] ;
var unsubscribe = this . _ unsubscribe ; var subscriptions:==:this . _ subscriptions ;
var rectangle = options . rectangle ; var granularity:==:default <CAM> value ( options . granularity , cesium <CAM> math . RADIANS <UND> PER <UND> DEGREE ) ;
var sshpk = require ( ' sshpk ' ) ; var util:==:require ( ' util ' ) ;
var design <CAM> width = parse <CAM> float ( params . design <CAM> width ) ; var design <CAM> unit:==:parse <CAM> float ( params . design <CAM> unit ) ;
var app <CAM> state = require ( ' app <CAM> state ' ) ; var Platform:==:require ( ' Platform ' ) ;
var w = w <CAM> native ; var h:==:h <CAM> native ;
var OPS = shared <CAM> util . OPS ; var text <CAM> rendering <CAM> mode:==:shared <CAM> util . text <CAM> rendering <CAM> mode ;
var export <CAM> specifier <CAM> set = traceur . syntax . trees . export <CAM> specifier <CAM> set ; var expression <CAM> statement:==:traceur . syntax . trees . expression <CAM> statement ;
var coverage = imports [ ' test . coverage ' ] ; var basename:==:require ( ' path ' ) . basename ;
var loc = window . locationvar port:==:loc . port ;
var cell <CAM> data <CAM> getter = _ column$props . cell <CAM> data <CAM> getter ; var cell <CAM> renderer:==:_ column$props . cell <CAM> renderer ;
var pageX = touches ? touches [ 0 ] . pageX : e . pageX ; var pageY:==:touches ? touches [ 0 ] . pageY : e . pageY ;
var tree <CAM> scope = scope . tree <CAM> scope ; var element <CAM> from <CAM> point:==:scope . element <CAM> from <CAM> point ;
var doc = doc <CAM> info . data ; var metadata:==:doc <CAM> info . metadata ;
var thread <CAM> id = node . dataset . thread <CAM> id ; var draft <CAM> id:==:node . dataset . draft <CAM> id ;
var is <CAM> plain <CAM> object = Lib . is <CAM> plain <CAM> object ; var is <CAM> array:==:Array . is <CAM> array ;
var total <CAM> columns <CAM> width = _ ref3 . total <CAM> columns <CAM> width ; var total <CAM> rows <CAM> height:==:_ ref3 . total <CAM> rows <CAM> height ;
var assert = require ( ' assert ' ) ; var events:==:require ( ' events ' ) ;
var x = options [ ' x ' ] ; var y:==:options [ ' y ' ] ;
var attribute <CAM> expressions = this . _ attribute <CAM> expressions ; var data <CAM> id:==:this . _ attributes [ data <CAM> id <CAM> attr ] ;
var cname = option <UND> consume ( options , ' cname ' , $ . cloudinary . config ( ) . cname ) ; var cdn <UND> subdomain:==:option <UND> consume ( options , ' cdn <UND> subdomain ' , $ . cloudinary . config ( ) . cdn <UND> subdomain ) ;
var mouseXY = drag . mouseXY ; var mouseX:==:mouseXY [ 0 ] ;
var tokenizer = this . tokenizer ; var token:==:tokenizer . read <CAM> token ( ) ;
var editors = imports . editors ; var Editor:==:imports . Editor ;
var settings = imports . settings ; var installer:==:imports . installer ;
var is <CAM> readable = require ( ' isstream ' ) . is <CAM> readable ; var is <CAM> writable:==:require ( ' isstream ' ) . is <CAM> writable ;
var spawn = require ( ' child <UND> process ' ) . spawn ; var readlink:==:require ( ' graceful - readlink ' ) . readlink <CAM> sync ;
var old <CAM> index = ev . detail . old <CAM> index ; var new <CAM> index:==:ev . detail . new <CAM> index ;
var parser = require ( ' socket . io - parser ' ) ; var url:==:require ( ' url ' ) ;
var range <CAM> list = selection . range <CAM> list ; var ranges:==:( keep <CAM> order ? selection : range <CAM> list ) . ranges ;
var implicit = ( options & & options . implicit ) ? options . implicit : ' hide ' ; var args:==:this . args ;
var quick <CAM> join <CAM> block = document . get <CAM> element <CAM> by <CAM> id ( ' quick <CAM> join <CAM> block ' ) ; var n:==:quick <CAM> join <CAM> block . child <CAM> nodes . length ;
var aperture = ( params . aperture ! = = undefined ) ? params . aperture : 0 . 025 ; var maxblur:==:( params . maxblur !    undefined ) ? params . maxblur : 1 . 0 ;
var target <CAM> el = this . target <CAM> el ; var scene <CAM> el:==:source <CAM> el . scene <CAM> el ;
var group = req . query . group  |  |  ' default ' ; var time:==:req . query . time & & Number ( req . query . time ) ;
var column = this . _ columns <CAM> array [ i ] ; var weight:==:weights [ column . identifier ] ;
var num <CAM> channels = options . num <CAM> channels  |  |  defaults . num <CAM> channels ; var sample <CAM> rate <CAM> hz:==:options . sample <CAM> rate <CAM> hz  |  |  defaults . sample <CAM> rate <CAM> hz ;
var k = shape . k ; var n:==:shape . n ;
var toolbar     = this . toolbar ; var cm:==:this . cm ;
var Spec = reporters . Spec ; var Base:==:reporters . Base ;
var http = require ( ' http ' ) ; var util:==:require ( ' util ' ) ;
var x = Math . floor ( rect . x * pixel <CAM> width ) ; var y:==:Math . floor ( rect . y * pixel <CAM> height ) ;
var src = src <CAM> records [ proto <CAM> index ] ; var dst:==:_ clone <CAM> and <CAM> update <CAM> indexes ( src , dst <CAM> records , index <CAM> map ) ;
var l = this . get <CAM> style ( LEFT ) ; var t:==:this . get <CAM> style ( TOP ) ;
var def = this . _ definition [ attr ] ; var type:==:def . type ;
var addr = this . address ( ) ; var pathname:==:opt <UND> pathname  |  |  '' ;
var is = require ( ' is ' ) ; var has:==:Object . prototype . has <CAM> own <CAM> property ;
var sum = Fn . sum ; var to <CAM> fixed:==:Fn . to <CAM> fixed ;
var winston = require ( ' winston ' ) ; var less:==:require ( ' less ' ) ;
var gulp = require ( ' gulp ' ) var vartree:==:require ( ' gulp - vartree ' )
var authorization <CAM> url = security . authorization <CAM> url ; var token <CAM> url:==:security . token <CAM> url ;
var alphasort = common . alphasortvar alphasorti:==:common . alphasorti
var routes = exports . routes = internal <CAM> prop <CAM> types . routes ; var router:==:exports . router    router <CAM> shape ;
var gulp    = require ( ' gulp ' ) var render:==:require ( ' gulp - nunjucks - render ' )
var observable = mobx . observable ; var computed:==:mobx . computed ;
var noop = angular . noop ; var mock <CAM> location <CAM> paths:==:options . mock <CAM> location <CAM> paths     null ? true : ! ! options . mock <CAM> location <CAM> paths ;
var theme = this . _ compute <CAM> theme ( options . theme ) var template:==:options . template  |  |  [
var cache = instance . get ( ' cache ' ) ; var method:==:instance . get ( ' method ' ) ;
var report <CAM> selection = t . report <CAM> selection ; var unselect:==:t . unselect ;
var parameter <CAM> list = this . transform <CAM> any ( tree . parameter <CAM> list ) ; var annotations:==:this . transform <CAM> list ( tree . annotations ) ;
var collapsed = node . get ( ' collapsed ' ) ; var children:==:node . get ( ' children ' ) ;
var el = this . el ; var animation <CAM> el:==:this . animation <CAM> el ;
var menus = imports . menus ; var fs:==:imports . fs ;
var message <CAM> object = e . message <CAM> object  |  |  ; var body:==:message <CAM> object . body ;
var mkpath = require ( ' mkpath ' ) ; var fs:==:require ( ' fs ' ) ;
var measure <CAM> svg <CAM> text <CAM> width = powerbi . text <CAM> measurement <CAM> service . measure <CAM> svg <CAM> text <CAM> width ; var measure <CAM> svg <CAM> text <CAM> height:==:powerbi . text <CAM> measurement <CAM> service . measure <CAM> svg <CAM> text <CAM> height ;
var basename = path . basename ( plugin ) ; var dirname:==:path . dirname ( plugin ) ;
var color = colors [ set <CAM> idx ] ; var axis:==:g . axis <CAM> properties <CAM> for <CAM> series ( set <CAM> name ) ;
var autoload = ! ! opt <UND> autoload ; var name:==:opt <UND> name  |  |  ds . get <CAM> data <CAM> name ( ) ;
var pitch = camera . pitch ; var position <CAM> cartographic:==:camera . position <CAM> cartographic ;
var tree1 = item . tree1 ; var tree2:==:item . tree2 ;
var line = get <CAM> line ( cm . doc , lineN ) var visual:==:visual <CAM> line ( line )
var rgb = this . rgb . build ( builder , ' v3 ' ) ; var adjustment:==:this . adjustment . build ( builder , ' fv1 ' ) ;
var shallow <CAM> equal = require ( ' shallow <CAM> equal ' ) ; var translatedom <CAM> positionxy:==:require ( ' translatedom <CAM> positionxy ' ) ;
var connect <CAM> separated = this . dygraph _ . get <CAM> option ( ' connect <CAM> separated <CAM> points ' , set <CAM> name ) ; var axis:==:this . dygraph _ . axis <CAM> properties <CAM> for <CAM> series ( set <CAM> name ) ;
var create <CAM> finally = parse <CAM> tree <CAM> factory . create <CAM> finally ; var create <CAM> if <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> if <CAM> statement ;
var property = ' the property ' ; var value:==:' the value ' ;
var url = require ( ' url ' ) var parse:==:url . parse
var view = this . view ; var event:==:seg . event ;
var before <CAM> enter = data . before <CAM> enter ; var enter:==:data . enter ;
var el = this . el = document . create <CAM> element ( ' a - assets ' ) ; var scene:==:this . scene    document . create <CAM> element ( ' a - scene ' ) ;
var email = params . email  |  |  ' nope@not . real'var added:==:params . added  |  |  [ ' package . json ' ]
var cell = cells [ ci ] ; var colspan:==:Utils . colspan ( cell ) ;
var point = points [ i ] ; var xval:==:point . xval ;
var zr = this . _ _ zr ; var storage:==:this . _ _ storage ;
var width = options [ ' width ' ] ! = null ? options [ ' width ' ] : 0 ; var height:==:options [ ' height ' ] !   null ? options [ ' height ' ] : 0 ;
var clobber = options . clobber ! = = falsevar dereference:==:options . dereference
var $ wrap = self . $ wrap ; var cookie <CAM> redirect:==:conf . cookie <CAM> redirect ;
var Writable = require ( ' readable - stream ' ) . Writablevar pass <CAM> through:==:require ( ' readable - stream ' ) . pass <CAM> through
var vb = sphereTrimesh <UND> vb ; var vc:==:sphereTrimesh <UND> vc ;
var view <CAM> management = Windows . UI . view <CAM> management ; var ui <CAM> view <CAM> settings:==:view <CAM> management . ui <CAM> view <CAM> settings ;
var layout = options . layout ; var has <CAM> selection:==:options . interactivity <CAM> service ? options . interactivity <CAM> service . has <CAM> selection ( ) : false ;
var array <CAM> extensions = js <CAM> common . array <CAM> extensions ; var inherit <CAM> single:==:powerbi . Prototype . inherit <CAM> single ;
var options = opt <UND> options ? opt <UND> options : ; var handle <CAM> event:==:options . handle <CAM> event ?
var post = store . create <CAM> record ( ' post ' , i d : ' a - post - id ' , name : ' The Parley Letter ' ) ; var comment:==:store . create <CAM> record ( ' comment ' , i d : ' some - uuid ' , name : ' Letters are fun ' , post : post ) ;
var categorical = data <CAM> view . categorical ; var categories:==:categorical . categories  |  |  [ ] ;
var active <CAM> app = this . _ active <CAM> app ; var detail:==:evt . detail ;
var b = mobx . observable ( 1 ) ; var c:==:mobx . computed ( ( )   >
var waiter = waiters [ waiters <CAM> key ] ; var operation:==:model <CAM> operations [ waiter . operation ] ;
var r = Math . round ( cp <CAM> global . hue <CAM> torgb ( p , q , tr ) * 255 ) ; var g:==:Math . round ( cp <CAM> global . hue <CAM> torgb ( p , q , tg ) * 255 ) ;
var intervals = this . _ intervals ; var length:==:intervals . length ;
var content = data . content . to <CAM> string ( ) ; var timestamp:==:data . timestamp  |  |  Date . now ( ) ;
var network = mobile <CAM> connection . voice . network ; var icc <CAM> info:==:icc <CAM> card . icc <CAM> info ;
var active <CAM> style = _ props2 . active <CAM> style ; var only <CAM> active <CAM> on <CAM> index:==:_ props2 . only <CAM> active <CAM> on <CAM> index ;
var req = resp . request ; var operation:==:req . service . api . operations [ req . operation ] ;
var single <CAM> use = geofence <CAM> values . single <CAM> use ; var dwell <CAM> time <CAM> span:==:geofence <CAM> values . dwell <CAM> time <CAM> span ;
var Divider = imports . Divider ; var fs:==:imports . fs ;
var t = this ; var duration:==:t . media . duration ;
var x = possible <CAM> coordinates . x ; var y:==:possible <CAM> coordinates . y ;
var p = readmp <CAM> int ( der , ' p ' ) ; var q:==:readmp <CAM> int ( der , ' q ' ) ;
var dpr = this . dpr ; var dom:==:this . dom ;
var Stream = core <CAM> stream . Stream ; var chunked <CAM> stream <CAM> manager:==:core <CAM> chunked <CAM> stream . chunked <CAM> stream <CAM> manager ;
var $ ref = resolve <CAM> url ( base <CAM> id , schema . $ ref ) ; var res:==:resolve <CAM> schema . call ( this , root , $ ref ) ;
var settings = imports . settings ; var debug:==:imports . debugger ;
var td = this . view . tbody <CAM> node . one ( ' td ' ) ; var model <CAM> list:==:this . view . get ( ' model <CAM> list ' ) ,
var form <CAM> button = doc <CAM> set . get <CAM> by <CAM> longname ( ' form <CAM> button ' ) [ 0 ] ; var my <CAM> class:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' my <CAM> class ' ) [ 0 ] ;
var delegate = jasmine . create <CAM> spy ( ' delegate ' ) ; var exception <CAM> handler:==:exception <CAM> handler <CAM> factory ( delegate ) ;
var jshint = require ( ' jshint ' ) . JSHINT ; var babel:==:require ( ' babel ' ) ;
var Schema = mongoose . Schema ; var assert:==:require ( ' power - assert ' ) ;
var req   = $ ( this ) . attr ( ' required ' ) ; var type:==:$ ( this ) . attr ( ' datatype ' ) ;
var val2 = w2utils . is <CAM> date ( val2 , w2utils . settings . date <CAM> format , true ) ; var val3:==:w2utils . is <CAM> date ( val3 , w2utils . settings . date <CAM> format , true ) ;
var east = rectangle . east ; var north:==:rectangle . north ;
var data = that . data <CAM> source . flat <CAM> view ( ) ; var skip:==:that . list <CAM> view . skip ( ) ;
var a = [ true , false , new Boolean ( true ) , new Boolean ( false ) ] ; var b:==:[ true , false , new Boolean ( true ) , new Boolean ( false ) , -1 , 0 , 1 , 2 , 1 . 0 , 1 . 1 , 0 . 0 , + 0 , -0 , null , undefined , new Object ( ) , ' ' , ' abc ' , ' -1 ' , ' 0 ' , ' 1 ' , ' 2 ' , ' true ' , ' false ' , ' t ' , ' f ' , ' True ' , ' False ' , ' 1 . 00 ' , ' 1 . ' , ' + 1 . 0 ' , new Number ( 0 ) , new Number ( 1 ) ] ;
var Imaging = Windows . Graphics . Imaging ; var Media:==:Windows . Media ;
var stream = require ( ' stream ' ) ; var errors:==:require ( ' restify - errors ' ) ;
var labels = axis . _ labels = [ ] ; var gridlines:==:axis . _ gridlines ;
var archy = require ( ' archy ' ) var semver:==:require ( ' semver ' )
var settings = editor . settings ; var skin:==:settings . skin !    false ? settings . skin  |  |  ' lightgray ' : false ;
var circle = props . circle ; var transition <CAM> enabled:==:props . transition <CAM> enabled ;
var y = grid <CAM> geo . vertices [ i ] . position . y ; var z:==:grid <CAM> geo . vertices [ i ] . position . z ;
var layout <CAM> vertex <CAM> array = group . layout <CAM> vertex <CAM> array ; var angle:==:-collision <CAM> tile . angle ;
var column <CAM> number = this . profile <CAM> node . column <CAM> number ? this . profile <CAM> node . column <CAM> number - 1 : 0 ; var target:==:this . tree . profile <CAM> view . target ( ) ;
var join = _ _ webpack <UND> require _ _ ( 3 ) . join ; var validate <CAM> safe <CAM> method:==:_ _ webpack <UND> require _ _ ( 17 ) . validate <CAM> safe <CAM> method ;
var proto = ctor . prototype ; var parse <CAM> raw <CAM> value:==:data <CAM> type . parse <CAM> raw <CAM> value ;
var x = cx + delta [ 0 ] ; var y:==:cy + delta [ 1 ] ;
var t = this . _ global <CAM> transform . get <CAM> translation ( ) ; var s:==:this . actual <CAM> size . clone ( ) ;
var fs = imports . fs ; var commands:==:imports . commands ;
var ttl = cursor . value . _ ttl ; var last <CAM> modified:==:cursor . value . _ last <CAM> modified ;
var slugize = util . slugize ; var Pattern:==:util . Pattern ;
var eject <CAM> banner = require ( ' eject <CAM> banner ' ) ; var Footer:==:require ( ' Footer ' ) ;
var params   = params  |  |  cube <CAM> params ( model , view , projection , bounds ) var axis:==:params . axis
var proc = imports . proc ; var bash <CAM> bin:==:options . bash <CAM> bin  |  |  ' bash ' ;
var lo = module . exports . lo ( n ) var hi:==:module . exports . hi ( n )
var that = $ ( that ) ; var cell:==:that . closest ( ' . cal - cell ' ) ;
var search = location . search ; var hash:==:location . hash ;
var blue200 = exports . blue200 = ' # 90caf9 ' ; var blue300:==:exports . blue300    ' # 64b5f6 ' ;
var division <CAM> by <CAM> zero = Fraction [ ' division <CAM> by <CAM> zero ' ] = create <CAM> error ( ' division <CAM> by <CAM> zero ' ) ; var invalid <CAM> parameter:==:Fraction [ ' invalid <CAM> parameter ' ]    create <CAM> error ( ' invalid <CAM> parameter ' ) ;
var skip = that . list <CAM> view . skip ( ) ; var length:==:data . length ;
var data = $ . data ( current . el , ' pp - rwdrag ' ) ; var left:==:( current . oleft + ( e . pageX  |  |  e . clientX ) - current . ox ) ;
var active = active <CAM> element ( ) ; var placeholder:==:that . options . placeholder ;
var chownr = require ( ' chownr ' ) var tar:==:require ( ' tar - stream ' )
var parse <CAM> tree <CAM> factory = traceur . codegeneration . parse <CAM> tree <CAM> factory ; var variable <CAM> binder:==:traceur . semantics . variable <CAM> binder ;
var types = _ . is <CAM> string ( opts . types ) ? [ opts . types ] : opts . types ; var locations:==:_ . is <CAM> string ( opts . locations ) ? [ opts . locations ] : opts . locations ;
var LEFT <UND> BRACE = C . LEFT <UND> BRACE = 0x1 ; var RIGHT <UND> BRACE:==:C . RIGHT <UND> BRACE    0x2 ;
var semver = require ( ' semver ' ) ; var undefsafe:==:require ( ' undefsafe ' ) ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ strncasecmp:==:Module [ ' _ strncasecmp ' ]    asm [ ' _ strncasecmp ' ] ;
var PIXEL <UND> OFFSET <UND> INDEX = Billboard . PIXEL <UND> OFFSET <UND> INDEX = 2 ; var EYE <UND> OFFSET <UND> INDEX:==:Billboard . EYE <UND> OFFSET <UND> INDEX    3 ;
var while <CAM> true = options . while <CAM> true  |  |  null ; var ondone:==:options . ondone ;
var request = require ( ' request ' ) var rimraf:==:require ( ' rimraf ' )
var s <CAM> wanted <CAM> selected <CAM> key = this . _ s <CAM> wanted <CAM> selected <CAM> key ; var s <CAM> wanted <CAM> selected <CAM> item <CAM> id:==:this . _ s <CAM> wanted <CAM> selected <CAM> item <CAM> id ;
var controller = this . _ controller ; var controller <CAM> host:==:this . _ controller <CAM> host ;
var solver = this . _ solver ; var assignment:==:this . _ assignment ;
var HORIZONTAL <UND> ORIGIN <UND> INDEX = Billboard . HORIZONTAL <UND> ORIGIN <UND> INDEX ; var VERTICAL <UND> ORIGIN <UND> INDEX:==:Billboard . VERTICAL <UND> ORIGIN <UND> INDEX ;
var ah = this . _ ah  |  0var bh:==:this . _ bh  |  0
var ice <CAM> candidate = w . mozrtc <CAM> ice <CAM> candidate  |  |  w . rtc <CAM> ice <CAM> candidate ; var ice <CAM> servers:==:window . ice <CAM> servers  |  |  [ ] ;
var offset = this . offset ; var bone:==:slot . bone ;
var except <CAM> singleline = this . _ except <CAM> singleline ; var except <CAM> multiline:==:this . _ except <CAM> multiline ;
var Thingy = doc <CAM> set . get <CAM> by <CAM> longname ( ' Thingy ' ) [ 0 ] ; var Thingy2:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' Thingy2 ' ) [ 0 ] ;
var mappings = util . get <CAM> arg ( source <CAM> map , ' mappings ' ) ; var file:==:util . get <CAM> arg ( source <CAM> map , ' file ' , null ) ;
var css = data . css ; var type:==:data . type ;
var cache = cache <CAM> mapping [ state . i d ]  |  |  [ ] var container:==:$ ( cache [ 0 ]  |  |  state . container ) , contents    cache [ 1 ]
var element <CAM> ref = this . element <CAM> refs [ bound <CAM> element <CAM> index ] ; var view:==:view <UND> ref <UND> 1 . internal <CAM> view ( element <CAM> ref . parent <CAM> view ) ;
var brand = properties [ ' ro . product . brand ' ] var manufacturer:==:properties [ ' ro . product . manufacturer ' ]
var f8 <CAM> info <CAM> view = require ( ' f8 <CAM> info <CAM> view ' ) ; var f8 <CAM> map <CAM> view:==:require ( ' f8 <CAM> map <CAM> view ' ) ;
var glob = require ( ' glob ' ) ; var arrify:==:require ( ' arrify ' ) ;
var background <CAM> billboard = label . _ background <CAM> billboard ; var background <CAM> billboard <CAM> collection:==:label <CAM> collection . _ background <CAM> billboard <CAM> collection ;
var x = rrect <CAM> data . x ; var y:==:rrect <CAM> data . y ;
var events = this . events ; var tracks:==:this . tracks ;
var async = require ( ' async ' ) ; var nconf:==:require ( ' nconf ' ) ;
var name = person . name  |  |  ' ' var u:==:person . url  |  |  person . web
var debug = require ( ' debug ' ) ( ' nightmare : actions ' ) ; var sliced:==:require ( ' sliced ' ) ;
var prev <CAM> coord = this . _ prev <CAM> coord ; var prev <CAM> time:==:this . _ prev <CAM> time ;
var height = _ props3 . height ; var row <CAM> count:==:_ props3 . row <CAM> count ;
var n = secp256k1 . nvar G:==:secp256k1 . G
var l = $ ( target ) . offset ( ) . left+10 ; var t:==:$ ( target ) . offset ( ) . top + $ ( target ) . offset ( ) . height-10 ;
var a = new constant <CAM> node ( 2 ) ; var n:==:new function <CAM> node ( s , [ a ] ) ;
var label = node . data . label |  | ''var w:==:ctx . measure <CAM> text ( ' ' + label ) . width + 10
var chalk = require ( ' chalk ' ) ; var crypto:==:require ( ' crypto ' ) ;
var validator = vdom . validatorvar dom:==:vdom . dom
var new <CAM> index = event . detail . new <CAM> index ; var list:==:this . _ list ;
var for <CAM> each = angular . for <CAM> each ; var request <CAM> animation <CAM> frame:==:$ window . request <CAM> animation <CAM> frame  |  |  $ window . set <CAM> timeout ;
var line <CAM> break = _ whitespace . line <CAM> break ; var line <CAM> breakg:==:_ whitespace . line <CAM> breakg ;
var w = size . width ; var h:==:size . height ;
var bounding <CAM> box = this . render <CAM> list . data [ bounding <CAM> box <CAM> index ] ; var min:==:bounding <CAM> box . minimum ;
var O <UND> DIRECTORY = constants . O <UND> DIRECTORY  |  |  0 ; var O <UND> EXCL:==:constants . O <UND> EXCL  |  |  0 ;
var move <CAM> from <CAM> row = settings . move <CAM> from <CAM> row ; var move <CAM> from <CAM> col:==:settings . move <CAM> from <CAM> col ;
var _ cm = 44 ; values [ _ cm ] = _ cm ; var _ cn:==:45 ; values [ _ cn ]    _ cn ;
var spaces = spine . Utils . set <CAM> array <CAM> size ( this . spaces , spaces <CAM> count ) , lengths = null ; var spacing:==:this . spacing ;
var BINDING <UND> ELEMENT = ' BINDING <UND> ELEMENT ' ; var BINDING <UND> IDENTIFIER:==:' BINDING <UND> IDENTIFIER ' ;
var path = require ( ' path ' ) ; var util:==:require ( ' util ' ) ;
var title = tokens [ idx ] . title ? ( ' title= ' ' + escape <CAM> html ( replace <CAM> entities ( tokens [ idx ] . title ) ) + ' ' ' ) : '' ; var target:==:options . link <CAM> target ? ( ' target ' ' + options . link <CAM> target + ' ' ' ) : '' ;
var delay <CAM> leave = data . delay <CAM> leave ; var duration:==:data . duration ;
var unit = math . unit ; var sinh:==:math . sinh ;
var owner <CAM> document = anchor . owner <CAM> document ; var default <CAM> view:==:owner <CAM> document . default <CAM> view  |  |  owner <CAM> document . parent <CAM> window ;
var emitter = scene . get <CAM> last <CAM> entry <CAM> byid ( parsed <CAM> lens <CAM> flare <CAM> system . emitter <CAM> id ) ; var lens <CAM> flare <CAM> system:==:new lens <CAM> flare <CAM> system ( ' lens <CAM> flare <CAM> system # ' + parsed <CAM> lens <CAM> flare <CAM> system . emitter <CAM> id , emitter , scene ) ;
var fs = require ( ' graceful - fs ' ) var tar:==:require ( ' tar ' )
var options = me . options ; var canvas:==:chart . canvas ;
var d = document . create <CAM> element ( ' div ' ) ; var i d:==:js <CAM> plumb <CAM> util . uuid ( ) ;
var b = cd [ 0 ] . b ; var contours:==:trace . contours ;
var request = require ( ' request ' ) var semver:==:require ( ' semver ' )
var binary <CAM> operator = traceur . syntax . trees . binary <CAM> operator ; var parse <CAM> tree:==:traceur . syntax . trees . parse <CAM> tree ;
var inherits = require ( ' inherits ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var doc = this . win . document ; var div:==:doc . create <CAM> element ( ' div ' ) ;
var http = require ( ' http ' ) ; var express:==:require ( ' express ' ) ;
var a = angle % ( 2 * Math . PI ) ; var set:==:vec2 . set ;
var export <CAM> symbol = traceur . semantics . symbols . export <CAM> symbol ; var IDENTIFIER <UND> EXPRESSION:==:traceur . syntax . trees . parse <CAM> tree <CAM> type . IDENTIFIER <UND> EXPRESSION ;
var bounding <CAM> box = instance . get ( ' bounding <CAM> box ' ) ; var content <CAM> box:==:instance . get ( ' content <CAM> box ' ) ;
var topic <UND> id = req . params . topic <UND> id ; var reply <UND> id:==:req . body . reply <UND> id ;
var loc = parent <CAM> section . location ( ) ; var size:==:parent <CAM> section . size ( ) ;
var get <CAM> invalid <CAM> value <CAM> warnings = powerbi . visuals . get <CAM> invalid <CAM> value <CAM> warnings ; var legend <CAM> props:==:powerbi . visuals . legend <CAM> props ;
var dx2 = mx <CAM> utils . get <CAM> value ( this . style , ' dx2 ' , ' 0 ' ) ; var dy2:==:mx <CAM> utils . get <CAM> value ( this . style , ' dy2 ' , ' 0 ' ) ;
var expect = require ( ' chai ' ) . expect ; var cst:==:require ( ' cst ' ) ;
var ice <CAM> candidate = window . mozrtc <CAM> ice <CAM> candidate  |  |  window . rtc <CAM> ice <CAM> candidate ; var session <CAM> description:==:window . mozrtc <CAM> session <CAM> description  |  |  window . rtc <CAM> session <CAM> description ;
var maindiv = this . maindiv _ ; var i d:==:( maindiv & & maindiv . i d ) ? maindiv . i d : maindiv ;
var proxyA = input . proxyA ; var proxyB:==:input . proxyB ;
var last <CAM> path <CAM> component = parsedURL ? parsedURL . last <CAM> path <CAM> component : parsedURL ; var index:==:web <CAM> inspector . target <CAM> manager . inspected <CAM> pageurl ( ) . index <CAM> of ( last <CAM> path <CAM> component ) ;
var light <CAM> green600 = exports . light <CAM> green600 = ' # 7cb342 ' ; var light <CAM> green700:==:exports . light <CAM> green700    ' # 689f38 ' ;
var zlib = require ( ' zlib ' ) ; var request:==:require ( ' request ' ) ;
var editor = new baidu . editor . Editor ( options ) ; var div:==:document . body . append <CAM> child ( document . create <CAM> element ( ' div ' ) ) ;
var babelify = require ( ' babelify ' ) ; var browserify:==:require ( ' browserify ' ) ;
var validator = require ( ' validator ' ) ; var winston:==:require ( ' winston ' ) ;
var should = require ( ' should ' ) ; var p:==:require ( ' path ' ) ;
var a = ' ab\n\ncd ' ; var b:==:' print ( ' b ' ) ' ;
var test = require ( ' tap ' ) . testvar lstat <CAM> sync:==:require ( ' fs ' ) . lstat <CAM> sync
var exififd <CAM> length <CAM> data <CAM> section = if <CAM> dlengths . exififd <CAM> length <CAM> data <CAM> section ; var gpsifd <CAM> length:==:if <CAM> dlengths . gpsifd <CAM> length ;
var pet = data . params . pet ; var food:==:data . params . food ;
var Server = require ( ' mongodb ' ) . Server ; var moment:==:require ( ' moment ' ) ;
var fs = require ( ' fs ' ) ; var expect:==:require ( ' expect . js ' ) ;
var theta = options . theta  |  |  0 . 0var phi:==:options . phi  |  |  0 . 0
var is <CAM> undefined = angular . is <CAM> undefined ; var is <CAM> defined:==:angular . is <CAM> defined ;
var get <CAM> snap <CAM> duration = t . get <CAM> snap <CAM> duration ; var get <CAM> slot <CAM> height:==:t . get <CAM> slot <CAM> height ;
var fixtures = require ( ' webtorrent - fixtures ' ) var http:==:require ( ' http ' )
var dangerous <CAM> style <CAM> value = require ( ' dangerous <CAM> style <CAM> value ' ) ; var get <CAM> component <CAM> name:==:require ( ' get <CAM> component <CAM> name ' ) ;
var react <CAM> server <CAM> rendering <CAM> transaction = require ( ' react <CAM> server <CAM> rendering <CAM> transaction ' ) ; var react <CAM> updates:==:require ( ' react <CAM> updates ' ) ;
var util = require ( ' util ' ) ; var lodash:==:require ( ' lodash ' ) ;
var payload = data [ ' payload ' ] ; var service:==:this . get <CAM> service ( service <CAM> name , payload ) ;
var title <CAM> layout = meta . config . title <CAM> layout  |  |  ' page <CAM> title  |  browser <CAM> title ' ; var browser <CAM> title:==:validator . escape ( String ( meta . config . browser <CAM> title  |  |  meta . config . title  |  |  ' NodeBB ' ) ) ;
var restrict = utils . restrictvar expose:==:utils . expose
var node2 = new goog . ui . tree . tree <CAM> node ( ' node2 ' ) ; var node3:==:new goog . ui . tree . tree <CAM> node ( ' node3 ' ) ;
var left = position . left ; var top:==:position . top ;
var frame <CAM> data = play <CAM> data . frame <CAM> data ; var current <CAM> frame <CAM> index:==:play <CAM> data . current <CAM> frame <CAM> index ;
var init <CAM> scope <CAM> metadata = utils . init <CAM> scope <CAM> metadata ; var Syntax:==:esprima . Syntax ;
var Service = _ fxos <CAM> mvc <CAM> dist <CAM> mvc . Service ; var App:==:_ app <CAM> js <CAM> models <CAM> app [ ' default ' ] ;
var hour = parse <CAM> int ( cal . find ( ' . hourselect ' ) . val ( ) , 10 ) ; var minute:==:parse <CAM> int ( cal . find ( ' . minuteselect ' ) . val ( ) , 10 ) ;
var r = r  |  |  . 0var x:==:center <UND> pt . x
var stack = this . stack ; var l:==:stack . length - n ;
var source <CAM> file = traceur . syntax . source <CAM> file ; var module <CAM> analyzer:==:traceur . semantics . module <CAM> analyzer ;
var transform = zr <CAM> el . transform ; var scale:==:zr <CAM> el . scale ;
var uri = request . urivar proxy:==:request . proxy
var dom <CAM> element = ng <CAM> element . dom <CAM> element ; var setter:==:reflector . setter ( dep . prop <CAM> setter <CAM> name ) ;
var fs = require ( ' fs ' ) var minimist:==:require ( ' minimist ' )
var node = startnode ; var len:==:( 0 - startnode . length )  |  |  0 ;
var SYNC <UND> CALCULATION <UND> LIMIT = Handsontable . plugins . auto <CAM> row <CAM> size . SYNC <UND> CALCULATION <UND> LIMIT ; var CALCULATION <UND> STEP:==:Handsontable . plugins . auto <CAM> row <CAM> size . CALCULATION <UND> STEP ;
var placement = this . placementvar opposite:==:this . opposite ( placement )
var assert = require ( ' assert - plus ' ) ; var restify:==:require ( ' restify ' ) ;
var tag = info . tag ; var on <CAM> effects:==:info . on <CAM> effects ;
var scale = typeof options . scale ! = ' undefined ' ? options . scale : 1 . 0 ; var rotation:==:typeof options . rotation !   ' undefined ' ? options . rotation : 0 . 0 ;
var pos = this . position ( ) ; var size:==:this . size ( ) ;
var d = this . y . red <CAM> mul ( p . y ) ; var e:==:this . curve . d . red <CAM> mul ( c ) . red <CAM> mul ( d ) ;
var piece <CAM> list = this . _ piece <CAM> list ; var selected:==:( is <CAM> init ? this <CAM> option : new <CAM> option ) . selected  |  |  ;
var checked = n . attributes . checked ; var href:==:a . href ? a . href : Ext . is <CAM> gecko ? ' ' : ' # ' ;
var media <CAM> style = _ props . media <CAM> style ; var overlay:==:_ props . overlay ;
var index = attributes [ ' index ' ] ; var position:==:attributes [ ' position ' ] ;
var w = dom . width ( ) var h:==:_ grabber . height ( )
var is <CAM> function = _ _ dependency3 _ _ . is <CAM> function ; var is <CAM> array:==:_ _ dependency3 _ _ . is <CAM> array ;
var state = this . state ; var skeleton:==:this . skeleton ;
var obj = ' object ' ; var str:==:' string ' ;
var readdir = promisify ( fs . readdir ) ; var read <CAM> file:==:promisify ( fs . read <CAM> file ) ;
var _ ni = 216 ; values [ _ ni ] = _ ni ; var _ nj:==:217 ; values [ _ nj ]    _ nj ;
var d1 = _ add <CAM> div ( ' d1 ' ) , d2 = _ add <CAM> div ( ' d2 ' ) ; var c:==:_ js <CAM> plumb . connect ( source : d1 , target : d2 ) ;
var sub = new operator <CAM> node ( ' - ' , ' subtract ' , [ b , c ] ) ; var add:==:new operator <CAM> node ( ' + ' , ' add ' , [ b , c ] ) ;
var SCROLL <UND> DIRECTION <UND> BACKWARD = exports . SCROLL <UND> DIRECTION <UND> BACKWARD = -1 ; var SCROLL <UND> DIRECTION <UND> FIXED:==:exports . SCROLL <UND> DIRECTION <UND> FIXED    0 ;
var linear <CAM> map = _ _ webpack <UND> require _ _ ( 7 ) . linear <CAM> map ; var each:==:zr <CAM> util . each ;
var data <CAM> label <CAM> color = powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> color , solid : color : default <CAM> color ) ; var data <CAM> label <CAM> text:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> text , visuals . label <CAM> text . value ) ;
var source = parsed . source ; var i d:==:parsed . i d ;
var at <CAM> name <CAM> expression = traceur . syntax . trees . at <CAM> name <CAM> expression ; var at <CAM> name <CAM> declaration:==:traceur . syntax . trees . at <CAM> name <CAM> declaration ;
var breeze = breeze <CAM> config . breeze ; var entity <CAM> name:==:model . entity <CAM> names . session ;
var _ _ f <UND> 28 = _ _ v <UND> 34 . _ _ f <UND> 28 ; var _ _ f <UND> 59:==:_ _ v <UND> 34 . _ _ f <UND> 59 ;
var operand = this . transform <CAM> any ( tree . operand ) ; var elements:==:this . transform <CAM> list ( tree . elements ) ;
var width = this . img . width ; var height:==:this . img . height ;
var dimensions = this . dimensions ; var axes <CAM> map:==:this . _ axes <CAM> map ;
var render <CAM> view = render <CAM> view <CAM> with <CAM> fragments . view <CAM> ref ; var element <CAM> count:==:merged <CAM> parent <CAM> view <CAM> proto . merge <CAM> info . element <CAM> count ;
var html = response . html ; var embed:==:win . find ( ' # embed ' ) [ 0 ] ;
var push   = empty <CAM> array . push ; var index <CAM> of:==:empty <CAM> array . index <CAM> of ;
var x = 1 + dx * i ; var y:==:dy * v ;
var recid = $ ( el ) . attr ( ' recid ' ) ; var field:==:$ ( el ) . attr ( ' field ' ) ;
var project <CAM> context = options . project <CAM> context ; var name:==:package <CAM> source . name ;
var controls = this . controls ; var animations:==:this . animations ;
var amberA100 = exports . amberA100 = ' # ffe57f ' ; var amberA200:==:exports . amberA200    ' # ffd740 ' ;
var container = instance . get ( ' container ' ) ; var header:==:instance . get ( ' header ' ) ;
var querystring = require ( ' querystring ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var message = mock <CAM> message ( message <CAM> id : presidential <CAM> id ) ; var handler:==:handler <CAM> stub . with <CAM> args ( ' cellbroadcast - received ' ) . args [ 0 ] [ 1 ] ;
var get <CAM> sample <CAM> state <CAM> for <CAM> testing = require ( ' get <CAM> sample <CAM> state <CAM> for <CAM> testing ' ) ; var remove <CAM> entities <CAM> at <CAM> edges:==:require ( ' remove <CAM> entities <CAM> at <CAM> edges ' ) ;
var crypto = Npm . require ( ' crypto ' ) ; var querystring:==:Npm . require ( ' querystring ' ) ;
var defaults = require ( ' defaults ' ) ; var json:==:require ( ' json ' ) ;
var replace = require ( ' gulp - replace ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var ordered <CAM> key = THREE . geometry <CAM> utils . ordered <CAM> key ; var compute <CAM> edge <CAM> faces:==:THREE . geometry <CAM> utils . compute <CAM> edge <CAM> faces ;
var release = argv . release ? argv . release : false ; var fail <CAM> task <CAM> on <CAM> error:==:argv . fail <CAM> task <CAM> on <CAM> error ? argv . fail <CAM> task <CAM> on <CAM> error : false ;
var side <CAM> orientation = ( options . side <CAM> orientation = = = 0 ) ? 0 : options . side <CAM> orientation  |  |  BABYLON . Mesh . DEFAULTSIDE ; var cap:==:options . cap  |  |  BABYLON . Mesh . NO <UND> CAP ;
var layout = imports . layout ; var http:==:imports . http ;
var dynCall <UND> ii = Module [ ' dynCall <UND> ii ' ] = asm [ ' dynCall <UND> ii ' ] ; var dynCall <UND> viidd:==:Module [ ' dynCall <UND> viidd ' ]    asm [ ' dynCall <UND> viidd ' ] ;
var min <CAM> filter = ( data . min <CAM> filter ) ? data . min <CAM> filter : gl . LINEAR ; var wrapS:==:( data . wrapS ) ? data . wrapS : gl . CLAMP <UND> TO <UND> EDGE ;
var children = _ props . children ; var icon <CAM> class <CAM> name:==:_ props . icon <CAM> class <CAM> name ;
var is <CAM> array = leaflet <CAM> helpers . is <CAM> array ; var is <CAM> number:==:leaflet <CAM> helpers . is <CAM> number ;
var spawn = ref . spawnvar rimraf:==:require ( ' rimraf ' )
var button = _ context$mui <CAM> theme . button ; var raised <CAM> button:==:_ context$mui <CAM> theme . raised <CAM> button ;
var glob = require ( ' glob ' ) ; var watchify:==:require ( ' watchify ' ) ;
var method = ( form . get <CAM> attribute ( ' method ' )  |  |  ' GET ' ) . to <CAM> upper <CAM> case ( ) ; var action:==:form . get <CAM> attribute ( ' action ' )  |  |  ' unknown ' ;
var ellipsoid = options . ellipsoid ; var size:==:options . size ;
var tile <CAM> provider = primitive . _ tile <CAM> provider ; var occluders:==:primitive . _ occluders ;
var sq <CAM> expr <CAM> builder = powerbi . data . sq <CAM> expr <CAM> builder ; var Utility:==:js <CAM> common . Utility ;
var events = require ( ' events ' ) var express:==:require ( ' express ' )
var chunk <CAM> offset = piece . chunk <CAM> offset ( reservation ) var chunk <CAM> length:==:is <CAM> web <CAM> seed ? piece . chunk <CAM> length <CAM> remaining ( reservation ) : piece . chunk <CAM> length ( reservation )
var trace = gd . _ full <CAM> data [ trace <CAM> idx ] ; var module:==:trace . _ module ;
var decode <CAM> inline <CAM> style <CAM> ranges = require ( ' decode <CAM> inline <CAM> style <CAM> ranges ' ) ; var generate <CAM> random <CAM> key:==:require ( ' generate <CAM> random <CAM> key ' ) ;
var test = require ( ' tap ' ) . testvar mkdirp:==:require ( ' mkdirp ' )
var win = process <CAM> rules ( path . join ( _ _ dirname , ' doc . keybindings . win . json ' ) ) ; var osx:==:process <CAM> rules ( path . join ( _ _ dirname , ' doc . keybindings . osx . json ' ) ) ;
var tooltip <CAM> overlay = this . tooltip <CAM> overlay = options . tooltip <CAM> overlay ; var get <CAM> pointx:==:function ( root <CAM> node ) return _ this . get <CAM> pointx ( root <CAM> node ) ; ;
var client = this . client ; var page:==:client . api . page . simple <CAM> page <CAM> obj ( ) ;
var known <CAM> library <CAM> id = Windows . Storage . known <CAM> library <CAM> id ; var application <CAM> data:==:Windows . Storage . application <CAM> data ;
var tar = require ( ' tar ' ) ; var zlib:==:require ( ' zlib ' ) ;
var fragment <CAM> shader <CAM> source = options . fragment <CAM> shader <CAM> source ; var attribute <CAM> locations:==:options . attribute <CAM> locations ;
var layout = imports . layout ; var Tree:==:imports . Tree ;
var a = new constant <CAM> node ( 2 ) ; var b:==:new symbol <CAM> node ( ' x ' ) ;
var parse <CAM> tree <CAM> factory = traceur . codegeneration . parse <CAM> tree <CAM> factory ; var create <CAM> argument <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> argument <CAM> list ;
var View = require ( ' View ' ) ; var moment:==:require ( ' moment ' ) ;
var start <CAM> point = curve . start <CAM> point ; var end <CAM> point:==:curve . end <CAM> point ;
var fs = require ( ' fs ' ) ; var events:==:require ( ' events ' ) ;
var indexedDB = window . moz <CAM> indexeddb  |  |  window . webkit <CAM> indexeddb  |  |  window . ms <CAM> indexeddb  |  |  window . indexedDB ; var idb <CAM> key <CAM> range:==:window . idb <CAM> key <CAM> range  |  |  window . webkitidb <CAM> key <CAM> range ;
var data <UND> path = obj [ ' data <UND> path ' ] ; var items:==:obj [ ' items ' ] ;
var decode = types . decode ; var encode:==:types . encode ;
var fixed <CAM> data <CAM> table <CAM> scroll <CAM> helper = require ( ' fixed <CAM> data <CAM> table <CAM> scroll <CAM> helper ' ) ; var fixed <CAM> data <CAM> table <CAM> width <CAM> helper:==:require ( ' fixed <CAM> data <CAM> table <CAM> width <CAM> helper ' ) ;
var is <CAM> hold = e . is <CAM> hold ; var kind:==:e . kind ;
var FP <UND> SAFE = num <CAM> constants . FP <UND> SAFE ; var BADNUM:==:num <CAM> constants . BADNUM ;
var channel = animation . channel [ i ] ; var sampler:==:animation . sampler [ i ] ;
var i d = options . i d ; var scale:==:options . scale ;
var key = relationship . key ; var belongs <CAM> to:==:snapshot . belongs <CAM> to ( key ) ;
var path = this . path ; var router:==:this . router ;
var x = vertex <CAM> node . get <CAM> attribute ( ' x ' ) ; var y:==:vertex <CAM> node . get <CAM> attribute ( ' y ' ) ;
var globe = options . globe ; var imagery <CAM> provider <CAM> view <CAM> models:==:default <CAM> value ( options . imagery <CAM> provider <CAM> view <CAM> models , [ ] ) ;
var natural <CAM> width = precomputed <CAM> features ? precomputed <CAM> features . natural <CAM> width : image <CAM> element . natural <CAM> width ; var natural <CAM> height:==:precomputed <CAM> features ? precomputed <CAM> features . natural <CAM> height : image <CAM> element . natural <CAM> height ;
var path = require ( ' path ' ) ; var walk:==:require ( ' pug - walk ' ) ;
var request = require ( ' browser - request ' ) ; var Request:==:function Request ( )
var aws = require ( ' aws - sdk ' ) ; var mime:==:require ( ' mime ' ) ;
var g = goog . functions . partial <CAM> right ( f , 2 ) ; var h:==:goog . functions . partial <CAM> right ( g , 4 ) ;
var view <CAM> refresh <CAM> mode = query <CAM> string <CAM> value ( link , ' view <CAM> refresh <CAM> mode ' , namespaces . kml ) ; var view <CAM> bound <CAM> scale:==:default <CAM> value ( query <CAM> string <CAM> value ( link , ' view <CAM> bound <CAM> scale ' , namespaces . kml ) , 1 . 0 ) ;
var point = this . get <CAM> elements <CAM> by <CAM> tag <CAM> namens ( item , this . georssns , ' point ' ) ; var lat:==:this . get <CAM> elements <CAM> by <CAM> tag <CAM> namens ( item , this . geons , ' lat ' ) ;
var IE = goog . user <CAM> agent . IE ; var ROOT <UND> PANEL <UND> CLASS:==:' . ' + goog . tweak . tweak <CAM> ui . ROOT <UND> PANEL <UND> CLASS _ ;
var edge <CAM> type <CAM> offset = this . _ edge <CAM> type <CAM> offset ; var edge <CAM> weak <CAM> type:==:this . _ edge <CAM> weak <CAM> type ;
var deferreds = processor . _ deferreds ; var deferred:==:deferreds [ i d ] ;
var test = require ( ' tap ' ) . testvar path:==:require ( ' path ' ) ;
var h = window . inner <CAM> height > document . body . client <CAM> height ? window . inner <CAM> height - document . body . client <CAM> height + 10 : undefined ; var s:==:document . body . scroll <CAM> height ;
var bytes <CAM> to <CAM> string = shared <CAM> util . bytes <CAM> to <CAM> string ; var string32:==:shared <CAM> util . string32 ;
var mongo = require ( ' mongodb ' ) ; var Db:==:mongo . Db ;
var tap = require ( ' tap ' ) var fs:==:require ( ' fs ' )
var value = value <CAM> accessor ( ) ; var all <CAM> bindings:==:all <CAM> bindings <CAM> accessor ( ) ;
var resolution = view <CAM> state . resolution ; var pixel <CAM> ratio:==:frame <CAM> state . pixel <CAM> ratio ;
var retaining <CAM> edges = this . _ retaining <CAM> edges ; var edge <CAM> fields <CAM> count:==:this . _ edge <CAM> fields <CAM> count ;
var link <CAM> to <CAM> page = get <CAM> style <CAM> property ( item , style <CAM> context <CAM> stack , ' link <CAM> to <CAM> page ' , null ) ; var no <CAM> wrap:==:get <CAM> style <CAM> property ( item , style <CAM> context <CAM> stack , ' no <CAM> wrap ' , null ) ;
var pushdata = require ( ' pushdata - bitcoin ' ) var varuint:==:require ( ' varuint - bitcoin ' )
var scroll = ace . helper . scroll <CAM> top ( ) ; var h:==:ace . helper . win <CAM> height ( ) ;
var uid = data . uid  |  |  0 ; var paginate:==:data . has <CAM> own <CAM> property ( ' paginate ' ) ? data . paginate : true ;
var os = require ( ' os ' ) ; var tmpdir:==:( os . tmpdir  |  |  os . tmp <CAM> dir ) ( ) ;
var parent = this . parent ; var m:==:this . transform ;
var other <CAM> form = scope . other <CAM> form ; var child <CAM> form:==:form . child <CAM> form ;
var topic = opts . topic ; var payload:==:opts . payload  |  |  new Buffer ( 0 ) ;
var http = require ( ' http ' ) ; var mouse:==:require ( ' mouse ' ) ;
var background <CAM> color = props . background <CAM> color ; var color:==:props . color ;
var literal <CAM> expression = traceur . syntax . trees . literal <CAM> expression ; var parse <CAM> tree <CAM> factory:==:traceur . codegeneration . parse <CAM> tree <CAM> factory ;
var _ hn = 125 ; values [ _ hn ] = _ hn ; var _ ho:==:126 ; values [ _ ho ]    _ ho ;
var path = require ( ' path ' ) ; var favicon:==:require ( ' serve - favicon ' ) ;
var pidusage   = require ( ' pidusage ' ) ; var vizion:==:require ( ' vizion ' ) ;
var options = that . options ; var animation:==:options . animation ;
var actual = err . actual ; var expected:==:err . expected ;
var Element = scope . wrappers . Element ; var html <CAM> content <CAM> element:==:scope . wrappers . html <CAM> content <CAM> element ;
var create <CAM> character <CAM> list = require ( ' create <CAM> character <CAM> list ' ) ; var encode <CAM> entity <CAM> ranges:==:require ( ' encode <CAM> entity <CAM> ranges ' ) ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var Text , Heading1 , Paragraph:==:require ( ' f8 <CAM> text ' ) ;
var a = _ WinRT . Windows . UI . Core . animation <CAM> metrics , animation <CAM> description = new a . animation <CAM> description ( a . animation <CAM> effect . show <CAM> panel , a . animation <CAM> effect <CAM> target . primary ) ; var animations:==:animation <CAM> description . animations ;
var react <CAM> debug <CAM> tool = require ( ' react <CAM> debug <CAM> tool ' ) ; var react <CAM> perf:==:require ( ' react <CAM> perf ' ) ;
var start = this . ELAN . rendered <CAM> alignable [ i ] . start ; var end:==:this . ELAN . rendered <CAM> alignable [ i ] . end ;
var for <CAM> of <CAM> statement = traceur . syntax . trees . for <CAM> of <CAM> statement ; var for <CAM> statement:==:traceur . syntax . trees . for <CAM> statement ;
var _ strncasecmp = Module [ ' _ strncasecmp ' ] = asm [ ' _ strncasecmp ' ] ; var _ strcat:==:Module [ ' _ strcat ' ]    asm [ ' _ strcat ' ] ;
var Rx = document . Rx ; var helpers:==:Rx . helpers ;
var page = client . api . page . simple <CAM> page <CAM> obj ( ) ; var section:==:page . section . sign <CAM> up ;
var b = new function <CAM> node ( new symbol <CAM> node ( ' add ' ) , [ new constant <CAM> node ( 2 ) , new constant <CAM> node ( 3 ) ] ) ; var c:==:new function <CAM> node ( new symbol <CAM> node ( ' subtract ' ) , [ new constant <CAM> node ( 2 ) , new constant <CAM> node ( 3 ) ] ) ;
var group = groups [ this . _ groupname [ i ] ] ; var files:==:group & & group . files ;
var padding <CAM> bottom = options . padding <CAM> bottom ; var padding <CAM> left:==:options . padding <CAM> left ;
var cache <CAM> forward <CAM> stack = JSON . parse ( cache <CAM> mapping . cache <CAM> forward <CAM> stack  |  |  ' [ ] ' ) ; var cache <CAM> back <CAM> stack:==:JSON . parse ( cache <CAM> mapping . cache <CAM> back <CAM> stack  |  |  ' [ ] ' ) ;
var p6 = new Promise ( function ( _ , reject ) reject ( ' p6 ' ) ; ) ; var p7:==:new Promise ( function ( _ , reject ) reject ( ' p7 ' ) ; ) ;
var escape = require ( ' escape - string - regexp ' ) ; var has <CAM> own <CAM> prop:==:Object . prototype . has <CAM> own <CAM> property ;
var label <CAM> position = _ props . label <CAM> position ; var label <CAM> style:==:_ props . label <CAM> style ;
var timers = metrics . timers ; var timer <UND> counters:==:metrics . timer <UND> counters ;
var int16 = Fn . int16 ; var sum:==:Fn . sum ;
var proto = Element . prototype ; var matches:==:proto . matches <CAM> selector
var width = props . width ; var is <CAM> scrolling:==:state . is <CAM> scrolling ;
var win = rules . win [ command <CAM> id ]  |  |  '' ; var osx:==:rules . osx [ command <CAM> id ]  |  |  '' ;
var hello = h ( ' div ' , ' hello ' ) var goodbye:==:h ( ' div ' , ' goodbye ' )
var View = require ( ' View ' ) ; var Recording:==:require ( ' native <CAM> modules ' ) . Recording ;
var base <CAM> theme = _ context$mui <CAM> theme . base <CAM> theme ; var button:==:_ context$mui <CAM> theme . button ;
var button = this . button ; var menu:==:this . menu ;
var options = that . options ; var option <CAM> label:==:options . option <CAM> label ;
var outline <CAM> color = point <CAM> primitive . outline <CAM> color ; var red:==:Color . float <CAM> to <CAM> byte ( color . red ) ;
var fcolumns = $ ( ' # grid <UND> '+ this . name + ' _ fcolumns ' ) ; var records:==:$ ( ' # grid <UND> '+ this . name + ' _ records ' ) ;
var cancel = options . cancel ; var show <CAM> dont <CAM> ask:==:options . show <CAM> dont <CAM> ask ;
var data <CAM> key = _ ref . data <CAM> key ; var disable <CAM> sort:==:_ ref . disable <CAM> sort ;
var banner = this . _ banner ; var title:==:$ ( ' notification - title ' ) ;
var limit = obj . limit  |  |  null ; var spring:==:obj . spring  |  |  null ;
var x = positions [ i ] + center . x ; var y:==:positions [ i + 1 ] + center . y ;
var dispatch = ref . dispatch ; var commit:==:ref . commit ;
var trigger = t . trigger ; var is <CAM> event <CAM> draggable:==:t . is <CAM> event <CAM> draggable ;
var react <CAM> browser <CAM> event <CAM> emitter = require ( ' react <CAM> browser <CAM> event <CAM> emitter ' ) ; var react <CAM> controlled <CAM> component:==:require ( ' react <CAM> controlled <CAM> component ' ) ;
var format = option <UND> consume ( options , ' format ' ) ; var cloud <UND> name:==:option <UND> consume ( options , ' cloud <UND> name ' , $ . cloudinary . config ( ) . cloud <UND> name ) ;
var source = event . source  |  |  ; var ignore <CAM> timezone:==:first <CAM> defined ( source . ignore <CAM> timezone , options . ignore <CAM> timezone ) ;
var camera = scene . camera ; var max <CAM> coord:==:controller . _ max <CAM> coord ;
var Readable = require ( ' readable - stream ' ) . Readablevar series:==:require ( ' run - series ' )
var start = _ item . data . start ; var end:==:( _ item . data . end !    undefined ) ? _ item . data . end : start ;
var collection = this . transform <CAM> any ( tree . collection ) ; var body:==:this . transform <CAM> to <CAM> block <CAM> or <CAM> statement ( tree . body ) ;
var tree <CAM> snapshot = flush . tree <CAM> snapshot ; var operations:==:flush . operations ;
var note <CAM> id = $ ( this ) . parent ( ) . attr ( ' note <CAM> id ' ) ; var note:==:Note . get <CAM> note ( note <CAM> id ) ;
var doc = wrap ( document ) ; var body:==:doc . body ;
var origin = originator . element ; var bounds:==:originator . bounds ;
var a = labels [ e [ 0 ] ] var b:==:labels [ e [ 1 ] ]
var Types = keystone . Field . Types ; var other <CAM> list:==:new keystone . List ( ' other <CAM> list ' ,
var px <CAM> sign = symbol <CAM> meta . px <CAM> sign ; var i:==:index ;
var width = hl <UND> lh <UND> hh . width ; var height:==:hl <UND> lh <UND> hh . height ;
var start = node . start ; var end:==:node . end ;
var no <CAM> rows <CAM> renderer = _ props . no <CAM> rows <CAM> renderer ; var row <CAM> class <CAM> name:==:_ props . row <CAM> class <CAM> name ;
var edge <CAM> shortcut <CAM> type = this . _ edge <CAM> shortcut <CAM> type ; var containment <CAM> edges:==:this . containment <CAM> edges ;
var M = new error <CAM> correction <CAM> level ( 1 , 0x00 , ' M ' ) ; var Q:==:new error <CAM> correction <CAM> level ( 2 , 0x03 , ' Q ' ) ;
var v = j <CAM> query ( ' # form ' ) . validate ( ) ; var method:==:$ . validator . methods . rangelength ,
var _ dl = 59 ; values [ _ dl ] = _ dl ; var _ dm:==:60 ; values [ _ dm ]    _ dm ;
var operator <CAM> node = math . expression . node . operator <CAM> node ; var function <CAM> node:==:math . expression . node . function <CAM> node ;
var attributes = technique . attributes ; var program:==:model . _ renderer <CAM> resources . programs [ technique . program ] ;
var bluebird = require ( ' bluebird ' ) ; var q:==:require ( ' q ' ) ;
var height = options . height  |  |  2 ; var diameter <CAM> top:==:( options . diameter <CAM> top      0 ) ? 0 : options . diameter <CAM> top  |  |  options . diameter  |  |  1 ;
var err = edata . errors [ e ] ; var opt:==:$ . extend ( ' class ' : ' w2ui - error ' , err . options ) ;
var i d = json . request <UND> id ; var div:==:$ ( ' < div > ' ) . attr ( ' i d ' , ' alert <UND> div ' + i d ) . add <CAM> class ( ' vcode <UND> div ' ) ;
var watcher = imports . watcher ; var model:==:fs <CAM> cache . model ;
var host = keystone . get ( ' ssl host ' )  |  |  keystone . get ( ' host ' ) ; var port:==:keystone . get ( ' ssl port ' ) ;
var url = require ( ' url ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var save <CAM> state = options . save <CAM> state ; var go:==:options . go ;
var sandbox = sinon . create ( sinon . sandbox ) ; var config:==:sinon . config  |  |  ;
var x = tag . get <CAM> attribute ( ' x ' ) ; var y:==:tag . get <CAM> attribute ( ' y ' ) ;
var teal900 = exports . teal900 = ' # 004d40 ' ; var tealA100:==:exports . tealA100    ' # a7ffeb ' ;
var flipX = camera . flipX ? 1 : -1 ; var flipY:==:camera . flipY ? 1 : -1 ;
var react <CAM> controlled <CAM> value <CAM> prop <CAM> types = require ( ' react <CAM> controlled <CAM> value <CAM> prop <CAM> types ' ) ; var react <CAM> markup <CAM> checksum:==:require ( ' react <CAM> markup <CAM> checksum ' ) ;
var inject = ref . inject ; var cache:==:ref . cache ;
var push = [ ] . push ; var match:==:sinon . match ;
var p = editor . document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' p ' ) [ 0 ] ; var r:==:new baidu . editor . dom . Range ( editor . document ) ;
var http = require ( ' http ' ) var express:==:require ( ' express ' )
var width = options [ ' width ' ]  |  |  0 ; var height:==:options [ ' height ' ]  |  |  0 ;
var x = background <CAM> billboard . _ translate . x ; var y:==:- ( background <CAM> billboard . _ translate . y + height ) ;
var direction = Cartesian3 . clone ( camera . direction ) ; var up:==:Cartesian3 . clone ( camera . up ) ;
var pos = this [ ' pos ' ] ; var w:==:this [ ' w ' ] ;
var diameterZ = options . diameterZ  |  |  options . diameter  |  |  1 ; var arc:==:( options . arc <   0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ;
var loadXML = p5 . prototype . loadXML ; var preload:==:p5 . prototype . preload ;
var base = this . base ; var num <CAM> comps:==:base . num <CAM> comps ;
var channel = animation . channels [ channel <CAM> id ] ; var sampler:==:animation . samplers [ channel . sampler ] ;
var case <CAM> clause = traceur . syntax . trees . case <CAM> clause ; var identifier <CAM> expression:==:traceur . syntax . trees . identifier <CAM> expression ;
var pid = this . pid . to <CAM> string ( 16 ) ; var increment:==:this . increment . to <CAM> string ( 16 ) ;
var util = require ( ' util ' ) var User:==:exports . User    function User ( msg )
var shr64 <UND> lo = utils . shr64 <UND> lo ; var sum64:==:utils . sum64 ;
var item = listbox . items ( ) . eq ( 0 ) ; var items:==:listbox . items ( ) ;
var event <CAM> emitter = require ( ' events ' ) . event <CAM> emitter ; var crypto:==:require ( ' crypto ' ) ;
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' places ' , ' readwrite ' ) ;
var timer <UND> data = metrics . timer <UND> data ; var statsd <UND> metrics:==:metrics . statsd <UND> metrics ;
var setters = this . setters ; var len:==:setters . length ;
var x = wc . x ; var y:==:wc . y ;
var history = _ create <CAM> router <CAM> objects . history ; var transition <CAM> manager:==:_ create <CAM> router <CAM> objects . transition <CAM> manager ;
var element <CAM> size = this . element <CAM> size ; var faces:==:result . faces ;
var title = that . model . get ( ' title ' ) ; var episode:==:$ ( e . current <CAM> target ) . attr ( ' data - episode ' ) ;
var is <CAM> clock <CAM> wise = shape <CAM> utils . is <CAM> clock <CAM> wise ; var sub <CAM> paths:==:this . sub <CAM> paths ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var secret = this . req . secret ; var signed:==:options . signed ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var glob:==:require ( ' glob ' ) ;
var icc = icc <CAM> manager . get <CAM> icc <CAM> by <CAM> id ( icc <CAM> id ) ; var icc <CAM> info:==:icc . icc <CAM> info ;
var a = new global . tests . _ base . declare . tmp22 ( ) ; var b:==:new global . tests . _ base . declare . tmp23 ( ) ;
var Writable = require ( ' readable - stream ' ) . Writablevar string <CAM> decoder:==:require ( ' string <UND> decoder ' ) . string <CAM> decoder
var settings    = this . settings ; var preview <CAM> container:==:this . preview <CAM> container ;
var parameter <CAM> list = this . transform <CAM> any ( tree . parameter <CAM> list ) ; var body:==:this . transform <CAM> super <CAM> in <CAM> function <CAM> body _ ( tree . body , home <CAM> object ) ;
var chalk = require ( ' chalk ' ) ; var replace:==:require ( ' replace ' ) ;
var outline <CAM> color = Property . get <CAM> value <CAM> or <CAM> cloned <CAM> default ( polygon . outline <CAM> color , time , Color . BLACK , scratch <CAM> color ) ; var outline <CAM> width:==:Property . get <CAM> value <CAM> or <CAM> default ( polygon . outline <CAM> width , time , 1 . 0 ) ;
var util = require ( ' util ' ) var syrup:==:require ( ' stf - syrup ' )
var flipY = default <CAM> value ( options . flipY , true ) ; var gl:==:context . _ gl ;
var properties = action . properties ; var properties <CAM> results:==:action . properties <CAM> results ;
var base = entry <CAM> point . base <CAM> path ; var flags:==:Loader . flags ;
var _ gb = 97 ; values [ _ gb ] = _ gb ; var _ gc:==:98 ; values [ _ gc ]    _ gc ;
var props = column . props ; var is <CAM> key:==:props . is <CAM> key  |  |  key <CAM> field      props . data <CAM> field ;
var request = info . request ; var response:==:info . response ;
var substring = cons . substring ( 20 , 80 ) ; var index:==:substring . index <CAM> of ( ' Y ' ) ;
var ver = params . versionvar auth:==:params . auth
var disconnected = ' disconnected ' ; var connected:==:' connected ' ;
var settings = $ ( this ) . data ( ' settings ' ) ; var items:==:settings . items ;
var slice <CAM> partitions = Math . round ( default <CAM> value ( options . slice <CAM> partitions , 64 ) ) ; var vertex <CAM> format:==:default <CAM> value ( options . vertex <CAM> format , vertex <CAM> format . DEFAULT ) ;
var model <CAM> matrix = collection . _ model <CAM> matrix ; var polyline <CAM> buckets:==:collection . _ polyline <CAM> buckets    ;
var g = this . _ rgba [ 1 ] ; var b:==:this . _ rgba [ 2 ] ;
var top = ~dir . index <CAM> of ( ' top ' )   & & ' top ' ; var bottom:==:~dir . index <CAM> of ( ' bottom ' ) & & ' bottom ' ;
var preset = presets [ i ] ; var throughput:==:preset . throughput  |  0 ;
var min = utils . number ( filter . value . min ) ; var max:==:utils . number ( filter . value . max ) ;
var decorator = decorator <CAM> path . node ; var expression:==:decorator . expression ;
var broadcast <CAM> service = _ app <CAM> js <CAM> services <CAM> broadcast <CAM> service [ ' default ' ] ; var http <CAM> client <CAM> service:==:_ app <CAM> js <CAM> services <CAM> http <CAM> client <CAM> service [ ' default ' ] ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ; var g:==:new Dygraph ( graph , data , plugins : [ p ] ) ;
var array = util . array ; var is <CAM> array:==:Array . is <CAM> array ;
var on <CAM> title <CAM> touch <CAM> tap = _ props . on <CAM> title <CAM> touch <CAM> tap ; var show <CAM> menu <CAM> icon <CAM> button:==:_ props . show <CAM> menu <CAM> icon <CAM> button ;
var options = this . options ; var col:==:options . col <CAM> inside ;
var original <CAM> light = light . user <CAM> data . original <CAM> light ; var uniforms:==:light . material . uniforms ;
var len = points . length ; var smooth <CAM> monotone:==:shape . smooth <CAM> monotone ;
var fs = require ( ' fs ' ) ; var fork:==:require ( ' child <UND> process ' ) . fork ;
var events = expando <CAM> store & & expando <CAM> store . events ; var handle:==:expando <CAM> store & & expando <CAM> store . handle ;
var a = fulfill <CAM> thenable <CAM> soon ( ' a ' , 40 ) ; var b:==:reject <CAM> thenable <CAM> soon ( ' rejected - b ' , 30 ) ;
var token <CAM> type = traceur . syntax . token <CAM> type ; var create <CAM> assignment <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> expression ;
var band <CAM> width = columns <CAM> on <CAM> axis . band <CAM> width ; var category <CAM> gap:==:parse <CAM> percent ( columns <CAM> on <CAM> axis . category <CAM> gap , band <CAM> width ) ;
var xml = document . get <CAM> element <CAM> by <CAM> id ( ' xml ' ) ; var xslt:==:document . get <CAM> element <CAM> by <CAM> id ( ' xslt ' ) ;
var standard <CAM> certificate <CAM> store <CAM> names = Windows . Security . Cryptography . Certificates . standard <CAM> certificate <CAM> store <CAM> names ; var cryptographic <CAM> buffer:==:Windows . Security . Cryptography . cryptographic <CAM> buffer ;
var select = $ document . elements ( ' select [ ng\\ : model='$1 ' ] ' , this . name ) ; var option:==:select . find ( ' option [ value ' ' + value + ' ' ] ' ) ;
var angle = -collision <CAM> tile . angle ; var y <CAM> stretch:==:collision <CAM> tile . y <CAM> stretch ;
var port = process . env . npm <UND> package <UND> config <UND> portvar path:==:require ( ' path ' )
var slice = array <CAM> proto . slice ; var concat:==:array <CAM> proto . concat ;
var length   = enumerator . length ; var promise:==:enumerator . promise ;
var timeout = opts . timeoutvar def:==:opts . default  |  |  ''
var a = _ . extend ( , Backbone . Events ) . once ( ' event ' , f ) ; var b:==:_ . extend ( , Backbone . Events ) . on ( ' event ' , f ) ;
var write <CAM> binary <CAM> options = Struct ( ' write <CAM> binary <CAM> options ' ) ; var Writer:==:Struct ( ' Writer ' ) ;
var dispatcher = scope . dispatcher ; var find <CAM> target:==:scope . find <CAM> target ;
var query <CAM> string = this . _ request . query <CAM> string ( ) ; var query <CAM> parameters:==:this . _ request . query <CAM> parameters ;
var selection = selections [ client <CAM> id ] ; var user:==:workspace . users [ selection . uid ] ;
var A = db . model ( ' gh4278 <UND> 0 ' , a <CAM> schema ) ; var B:==:db . model ( ' gh4278 <UND> 1 ' , b <CAM> schema ) ;
var torus = BABYLON . Mesh . create <CAM> torus ( ' torus ' , 5 , 1 , 10 , scene , false ) ; var knot:==:BABYLON . Mesh . create <CAM> torus <CAM> knot ( ' knot ' , 2 , 0 . 5 , 128 , 64 , 2 , 3 , scene ) ;
var collab <CAM> doc = editor . session . collab <CAM> doc ; var cursor <CAM> layer:==:collab <CAM> doc & & collab <CAM> doc . cursor <CAM> layer ;
var console = imports . console ; var commands:==:imports . commands ;
var crypto = _ dereq _ ( ' crypto ' ) ; var md5:==:_ dereq _ ( ' md5-jkmyers ' ) ;
var radius = vm . radius ; var x:==:vm . x ;
var npmlog = require ( ' npmlog ' ) var mkdirp:==:require ( ' mkdirp ' )
var distance = from . distance <CAM> to ( hit <CAM> point <CAM> world ) ; var result:==:this . result ;
var prev <CAM> tok = this . prev <CAM> tok ; var lex <CAM> state:==:this . lex <CAM> state ;
var yeoman = require ( ' yeoman - generator ' ) ; var chalk:==:require ( ' chalk ' ) ;
var $ rt = $ . clone ( $ rt ) var attr:==:attr  |  |
var exec   = require ( ' child <UND> process ' ) . exec ; var os:==:require ( ' os ' ) ;
var lport = splitlhostlport [ 1 ] ; var redir:==:hash . substring ( hash . index <CAM> of ( ' redir ' ) + 6 , hash . length ) ;
var can <CAM> attach = errors . can <CAM> attach ; var thrower:==:util . thrower ;
var mock = this . mock ; var object:==:this . object ;
var doc = this . doc ; var session:==:this . session ;
var config = this . config ; var multitree:==:config . multitree ;
var node <CAM> field <CAM> count = this . _ node <CAM> field <CAM> count ; var node <CAM> type <CAM> offset:==:this . _ node <CAM> type <CAM> offset ;
var p = pattern [ pi ] var f:==:file [ fi ]
var menu = this . menu ; var checkbox <CAM> container:==:this . checkbox <CAM> container ;
var y = ' y ' ; var z:==:' z ' ;
var Flags = reactdom <CAM> component <CAM> flags ; var get <CAM> node:==:reactdom <CAM> component <CAM> tree . get <CAM> node <CAM> from <CAM> instance ;
var colors = plug . util . colors ; var env:==:plug . util . env ;
var mkdirp = require ( ' mkdirp ' ) ; var which:==:require ( ' which ' ) ;
var re = exports . re = [ ] ; var src:==:exports . src    [ ] ;
var chai = require ( ' chai ' ) var expect:==:chai . expect
var casper = require ( ' casper ' ) . create ( ) ; var utils:==:require ( ' utils ' ) ;
var semver = require ( ' semver ' ) ; var which:==:require ( ' which ' ) ;
var ctrl = e . ctrl <CAM> key |  | false ; var shift:==:e . shift <CAM> key  |  |  false ;
var has <CAM> fill = style . has <CAM> fill ( ) ; var fill:==:style . fill ;
var type = vpatch . typevar v <CAM> node:==:vpatch . v <CAM> node
var f8 <CAM> session <CAM> cell = require ( ' f8 <CAM> session <CAM> cell ' ) ; var React:==:require ( ' React ' ) ;
var margin = parse <CAM> int ( title <CAM> bar . css ( ' margin - top ' ) , 10 ) ; var padding:==:parse <CAM> int ( dialog . wrapper . css ( ' padding - top ' ) , 10 ) ;
var i d = e . get <CAM> attribute ( ' i d ' ) ; var from:==:e . get <CAM> attribute ( ' from ' ) ;
var plan = this . index . plan ( this . root , sink , options ) ; var future:==:afuture ( ) ;
var glyph = label . _ glyphs [ 0 ] ; var billboard:==:glyph . billboard ;
var order = fallback <UND> order [ this . _ placement ] ; var length:==:order . length ;
var jpeg <CAM> stream = core <CAM> stream . jpeg <CAM> stream ; var jpx <CAM> image:==:core <CAM> jpx . jpx <CAM> image ;
var fs = require ( ' hexo - fs ' ) ; var Permalink:==:util . Permalink ;
var opts = _ _ alloy <CAM> id29 . opts  |  |  ; var models:==:_ _ alloy <CAM> id28 . models ;
var w = menu <CAM> view . $ el . width ( ) ; var h:==:menu <CAM> view . $ el . height ( ) ;
var parser = scope . parser ; var importer:==:scope . importer ;
var line <CAM> breakg = _ whitespace . line <CAM> breakg ; var is <CAM> new <CAM> line:==:_ whitespace . is <CAM> new <CAM> line ;
var start = this . new <CAM> block ( type + ' comp start ' ) ; var skip:==:this . new <CAM> block ( type + ' comp skip ' ) ;
var get <CAM> value <CAM> at <CAM> index <CAM> or <CAM> default = helpers . get <CAM> value <CAM> at <CAM> index <CAM> or <CAM> default ; var labels:==:chart . data . labels ;
var l = Number ( reg <CAM> exp <CAM> result <CAM> array [ 3 ] ) ; var a:==:Number ( reg <CAM> exp <CAM> result <CAM> array [ 4 ] ) ;
var operational <CAM> error = errors . operational <CAM> error ; var originates <CAM> from <CAM> rejection:==:errors . originates <CAM> from <CAM> rejection ;
var networkURL = this . _ network <CAM> mapping . networkURL ( ui <CAM> source <CAM> code ) ; var style <CAM> sheet <CAM> ids:==:this . _ css <CAM> model . style <CAM> sheet <CAM> ids <CAM> forurl ( networkURL ) ;
var bone1 = this . _ bone1 ; var target:==:this . target <CAM> position ;
var f = ( b . mb _ [ b . mb <UND> off ] . type _ = = 1 ) + 0 ; var g:==:b . mb _ [ b . mb <UND> off ] . segment _ ;
var Note = db . model ( ' note <CAM> with <CAM> string <CAM> id ' , note <CAM> schema , random ( ) ) ; var alice:==:new User ( _ i d : ' alice ' , name : ' Alice ' ) ;
var t = t <CAM> values [ ti ] ; var s:==:s <CAM> values [ si ] ;
var sampling <CAM> ratio = setting & & ( 0 , _ object . has <CAM> own <CAM> property ) ( setting , ' sampling <CAM> ratio ' ) ? this . hot . get <CAM> settings ( ) . auto <CAM> row <CAM> size . sampling <CAM> ratio : void 0 ; var allow <CAM> sample <CAM> duplicates:==:setting & & ( 0 , _ object . has <CAM> own <CAM> property ) ( setting , ' allow <CAM> sample <CAM> duplicates ' ) ? this . hot . get <CAM> settings ( ) . auto <CAM> row <CAM> size . allow <CAM> sample <CAM> duplicates : void 0 ;
var axis <CAM> count = layout <CAM> info . axis <CAM> count ; var axis <CAM> collapse <CAM> width:==:layout <CAM> info . axis <CAM> collapse <CAM> width ;
var util = require ( ' util ' ) ; var lolcat:==:require ( ' fis - lolcat ' ) ;
var h <CAM> layout1 = new horizontal <CAM> layout ( ' h <CAM> layout1 ' ) ; var h <CAM> layout2:==:new horizontal <CAM> layout ( ' h <CAM> layout2 ' ) ;
var d = this . _ destvar s:==:this . _ src
var type <CAM> annotation = this . transform <CAM> any ( tree . type <CAM> annotation ) ; var initializer:==:this . transform <CAM> any ( tree . initializer ) ;
var scroll <CAM> left = _ state . scroll <CAM> left ; var scroll <CAM> position <CAM> change <CAM> reason:==:_ state . scroll <CAM> position <CAM> change <CAM> reason ;
var home = this . state <CAM> stack _ [ this . state <CAM> stack _ . length - 2 ] . home ; var super <CAM> constructor:==:this . get <CAM> runtime <CAM> expression ( ' super <CAM> constructor ' ) ;
var el = this . el ; var interp:==:this . descriptor . interp ;
var METHOD = ' METHOD ' ; var METHOD <UND> SIGNATURE:==:' METHOD <UND> SIGNATURE ' ;
var main <CAM> group = this . _ main <CAM> group ; var label <CAM> group:==:this . _ label <CAM> group ;
var cart <CAM> order = dataservice . cart <CAM> order ; var draft <CAM> order:==:dataservice . draft <CAM> order ;
var _ de = 52 ; values [ _ de ] = _ de ; var _ df:==:53 ; values [ _ df ]    _ df ;
var req = resp . request ; var operation:==:req . operation ;
var object <CAM> enumeration <CAM> builder = powerbi . visuals . object <CAM> enumeration <CAM> builder ; var gradient <CAM> utils:==:powerbi . visuals . gradient <CAM> utils ;
var polyline = polylines [ i ] ; var width:==:polyline . width ;
var Track = require ( ' facade ' ) . Track ; var each:==:require ( ' each ' ) ;
var fs = require ( ' fs ' ) var zlib:==:require ( ' zlib ' )
var log = require ( ' debug ' ) ( ' nightmare : log ' ) ; var debug:==:require ( ' debug ' ) ( ' nightmare ' ) ;
var length = frame . text . length ; var time:==:new Date ( frame . time * 1000 ) ;
var Strict = db . model ( ' embedded <CAM> strict ' , new Schema ( dox : [ strict ] , strict : false ) , ' embdoc ' + random ( ) ) ; var l:==:new Lax ( dox : [ content : ' sample ' , rouge : ' data ' ] ) ;
var pressure = default <CAM> value ( options . pressure , 0 ) ; var rotation:==:default <CAM> value ( options . rotation , 0 ) ;
var row <CAM> height = web <CAM> inspector . timeline <CAM> panel . row <CAM> height ; var header <CAM> height:==:web <CAM> inspector . timeline <CAM> panel . header <CAM> height ;
var filepath = item . filepath ; var dialog:==:this . dialog ;
var data = this . data ; var cols:==:data . cols ,
var c = a . colorspace & WEBP <UND> CSP <UND> ALPHA <UND> BIT ; var d:==:a . width ;
var obj = node . object ; var prop:==:node . property ;
var copy = osm <CAM> entity . prototype . copy . call ( this , resolver , copies ) ; var members:==:this . members . map ( function ( member )
var text <CAM> div = text <CAM> divs [ i ] ; var text <CAM> div <CAM> properties:==:task . _ text <CAM> div <CAM> properties . get ( text <CAM> div ) ;
var mouse = e . type . index <CAM> of ( ' mouse ' ) = = = 0 ; var pointer:==:e . type . index <CAM> of ( ' pointer ' )      0 ;
var metadata = JSON . parse ( buffer ) . metadata ; var license:==:metadata . license ;
var cast <CAM> error = mongoose <CAM> error . cast <CAM> error ; var validator <CAM> error:==:mongoose <CAM> error . validator <CAM> error ;
var Post = hexo . model ( ' Post ' ) ; var Page:==:hexo . model ( ' Page ' ) ;
var is <CAM> array = angular . is <CAM> array ; var for <CAM> each:==:angular . for <CAM> each ;
var body = plt . doc ( ) . body ; var win:==:plt . win ( ) ;
var dom <CAM> app = input <CAM> app . dom <CAM> app ; var manifest:==:new manifest <CAM> helper ( dom <CAM> app . manifest ) ;
var load = stdlib . Atomics . load ; var fround:==:stdlib . Math . fround ;
var blur <CAM> kernel = _ blur <CAM> kernel ; var bk <CAM> half:==:_ bk <CAM> half ;
var type = options . type  |  |  ( this . is <UND> post ( ) ? ' article ' : ' website ' ) ; var url:==:options . url  |  |  this . url ;
var type = unbundle ( layer . type ) ; var ref:==:unbundle ( layer . ref ) ;
var events = goog . require ( ' goog . events ' ) ; var test <CAM> suite:==:goog . require ( ' goog . testing . test <CAM> suite ' ) ;
var e = c . preds _ ; var f:==:c . preds <UND> off ;
var label = element . closest ( ' label ' ) ; var i d:==:element . attr ( ' i d ' ) ;
var doc = shadowdom <CAM> polyfill . wrap ( document ) ; var head:==:doc . query <CAM> selector ( ' head ' ) ;
var string <CAM> topdf <CAM> string = shared <CAM> util . string <CAM> topdf <CAM> string ; var string <CAM> toutf8 <CAM> string:==:shared <CAM> util . string <CAM> toutf8 <CAM> string ;
var before <CAM> footer = callbacks . before <CAM> footer . apply ( me , arguments ) ; var footer:==:callbacks . footer . apply ( me , arguments ) ;
var create <CAM> argument <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> argument <CAM> list ; var create <CAM> binding <CAM> identifier:==:parse <CAM> tree <CAM> factory . create <CAM> binding <CAM> identifier ;
var stream = require ( ' stream ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var component = components [ i ] ; var collision <CAM> data:==:this . _ collision <CAM> data [ component ] ;
var http <CAM> request = request . http <CAM> requestvar path:==:http <CAM> request . path . split ( ' ? ' )
var y = point . y ; var data:==:this . _ data ;
var _ ld = 179 ; values [ _ ld ] = _ ld ; var _ le:==:180 ; values [ _ le ]    _ le ;
var entity = geometry <CAM> updater . _ entity ; var polyline <CAM> volume:==:entity . polyline <CAM> volume ;
var animation = axis <CAM> pointer <CAM> model . get ( ' animation ' ) ; var axis:==:axis <CAM> model . axis ;
var l = Observable . never ( ) ; var r:==:Observable . never ( ) ;
var stream = require ( ' readable - stream ' ) var inherits:==:require ( ' inherits ' )
var Writable = require ( ' readable - stream ' ) . Writable ; var util:==:require ( ' util ' ) ;
var primitives = this . _ primitives ; var ground <CAM> primitives:==:this . _ ground <CAM> primitives ;
var focus = ( params . focus ! = = undefined ) ? params . focus : 1 . 0 ; var aspect:==:( params . aspect !    undefined ) ? params . aspect : camera . aspect ;
var string <CAM> to <CAM> bytes = shared <CAM> util . string <CAM> to <CAM> bytes ; var utf8 <CAM> string <CAM> to <CAM> string:==:shared <CAM> util . utf8 <CAM> string <CAM> to <CAM> string ;
var listener = this . _ listeners [ l ] ; var cb:==:listener . cb ;
var image <CAM> resize <CAM> mode = require ( ' image <CAM> resize <CAM> mode ' ) ; var layout <CAM> prop <CAM> types:==:require ( ' layout <CAM> prop <CAM> types ' ) ;
var content <CAM> box = instance . get ( ' content <CAM> box ' ) ; var owner <CAM> tree:==:instance . get ( ' owner <CAM> tree ' ) ;
var program = gltf <CAM> runtime . programs [ technique . program ] ; var states:==:technique . states ;
var min <CAM> font <CAM> size = settings . general . min <CAM> font <CAM> size * word <CAM> cloud . font <CAM> size <CAM> percentage <CAM> coefficent ; var max <CAM> font <CAM> size:==:settings . general . max <CAM> font <CAM> size * word <CAM> cloud . font <CAM> size <CAM> percentage <CAM> coefficent ;
var items <CAM> to <CAM> display = this . items <CAM> to <CAM> display ; var data <CAM> start <CAM> index:==:this . data <CAM> start <CAM> index ;
var BSON = BSONJS ; var suite:==:new Suite ( ' feather weight test suite ' ,
var React = require ( ' React ' ) ; var recording <CAM> module:==:require ( ' native <CAM> modules ' ) . picker <CAM> android <CAM> recording <CAM> module ;
var m = dom <CAM> geom . get <CAM> margin <CAM> box ( this . node ) ; var b:==:win . doc . body ;
var focused <CAM> option = _ ref8 . focused <CAM> option ; var focus <CAM> option:==:_ ref8 . focus <CAM> option ;
var event <CAM> plugin <CAM> registry = require ( ' event <CAM> plugin <CAM> registry ' ) ; var react <CAM> debug <CAM> current <CAM> fiber:==:require ( ' react <CAM> debug <CAM> current <CAM> fiber ' ) ;
var cp = require ( dirs . core + ' cp ' ) ; var adapter:==:config [ config . adapter ] ;
var start = range . start ; var end:==:range . end ;
var settings = imports . settings ; var save:==:imports . save ;
var waiter = resp . request . _ waiter ; var acceptors:==:waiter . config . acceptors ;
var Firepad = firepad . Firepad ; var Headless:==:Firepad . Headless ;
var build <CAM> dir = options . build <CAM> dir ; var zip <CAM> file:==:options . zip <CAM> file ;
var vm <CAM> validator = vdom . vm <CAM> validatorvar validator:==:vdom . validator
var c = Math . cos ( angle ) , s = Math . sin ( angle ) ; var x:==:this . x - center . x ;
var before = ! options  |  |  options . before ! = = false ; var after:==:! options  |  |  options . after !    false ;
var log = require ( ' npmlog ' ) var opener:==:require ( ' opener ' )
var complete = this . _ completed . bind ( this ) ; var error:==:this . _ error . bind ( this ) ;
var get <CAM> accessor = traceur . syntax . trees . get <CAM> accessor ; var parse <CAM> tree <CAM> factory:==:traceur . codegeneration . parse <CAM> tree <CAM> factory ;
var n1 = new red <CAM> node ( i d : ' n1',type : ' abc',wires : [ [ [ ' n2 ' ] , [ ' n3 ' ] ] ] ) ; var n2:==:new red <CAM> node ( i d : ' n2',type : ' abc ' ) ;
var dynCall <UND> viiiiiiii = Module [ ' dynCall <UND> viiiiiiii ' ] = asm [ ' dynCall <UND> viiiiiiii ' ] ; var dynCall <UND> viiiiii:==:Module [ ' dynCall <UND> viiiiii ' ]    asm [ ' dynCall <UND> viiiiii ' ] ;
var load <CAM> resources = model . _ load <CAM> resources ; var techniques:==:model . gltf . techniques ;
var arg = rule . args [ i ] ; var example <CAM> values:==:arg . example <CAM> values  |  |  [ ] ;
var ctx = chart . ctx ; var width:==:chart . canvas . width ;
var graph = sb . graph ; var values:==:json . values ;
var ignore = opts . ignore  |  |  opts . filter  |  |  noopvar map:==:opts . map  |  |  noop
var session = $ . gestures . session ; var last:==:session . last <CAM> interval  |  |  touch ;
var _ malloc = Module [ ' _ malloc ' ] = asm [ ' _ malloc ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var Plots = plotly <CAM> internal . Plots ; var Axes:==:plotly <CAM> internal . Axes ;
var callbacks = instance . callbacks ; var document:==:instance . document ;
var properties = feature <CAM> obj . properties ; var geo:==:feature <CAM> obj . geometry ;
var col = $ ( ' # term - col ' ) . val ( ) ; var row:==:$ ( ' # term - row ' ) . val ( ) ;
var w = Ti . UI . create <CAM> window ( opts ) ; var l:==:Ti . UI . create <CAM> label (
var control = control  |  |  ' sans - serif'var text:==:text  |  |  ' 辭Q '
var safe <CAM> remove <CAM> layer = leaflet <CAM> layer <CAM> helpers . safe <CAM> remove <CAM> layer ; var update <CAM> layers <CAM> control:==:leaflet <CAM> control <CAM> helpers . update <CAM> layers <CAM> control ;
var yaml = require ( ' js - yaml ' ) ; var express:==:require ( ' express ' ) ;
var path = require ( ' path ' ) ; var prompt:==:require ( ' prompt ' ) ;
var geojson = svg <CAM> gpx . geojson ; var map:==:context . map ( ) ,
var mockery = require ( ' mockery ' ) ; var assert:==:require ( ' assert ' ) ;
var removed <CAM> elements = this . _ removed <CAM> elements ; var item <CAM> move <CAM> records:==:this . _ item <CAM> move <CAM> records ;
var c = clear <CAM> command . color ; var d:==:clear <CAM> command . depth ;
var next = order . next ; var prev:==:order . prev ;
var concat = require ( ' gulp - concat ' ) ; var del:==:require ( ' del ' ) ;
var custom = arc . custom  |  |  ; var get <CAM> value <CAM> at <CAM> index <CAM> or <CAM> default:==:helpers . get <CAM> value <CAM> at <CAM> index <CAM> or <CAM> default ;
var success = options . success ; var attributes:==:this . attributes ;
var mwpid = element . dataset [ ' mission <UND> mwpid ' ] ; var checked:==:! ! this . checked <CAM> waypoints [ mwpid ] ;
var less = require ( ' gulp - less ' ) ; var inject:==:require ( ' gulp - inject ' ) ;
var force <CAM> function = this . options . force <CAM> function ; var force:==:this . force ;
var gradient <CAM> utils = powerbi . visuals . gradient <CAM> utils ; var axis <CAM> type:==:powerbi . visuals . axis <CAM> type ;
var a = X . instance ( ) ; var c:==:Y . instance ( ) ;
var obj = object <CAM> map [ data . post <CAM> message <CAM> proxy ] ; var fn , args , response <CAM> id:==:data ;
var ui = imports . ui ; var panels:==:imports . panels ;
var default <CAM> credit = new Credit ( ' default <CAM> credit ' ) ; var credit1:==:new Credit ( ' credit1 ' ) ;
var nodes = this . sig <CAM> inst . graph . nodes ( ) ; var prefix:==:this . sig <CAM> inst . renderers [ self . config . renderer <CAM> index ] . options . prefix ;
var point <CAM> primitives = point <CAM> primitive <CAM> collection . _ point <CAM> primitives ; var length:==:point <CAM> primitives . length ;
var pick <CAM> offset = this . pick <CAM> offsetvar point <CAM> count:==:this . point <CAM> count
var connect = require ( ' connect ' ) ; var express:==:require ( ' express ' ) ;
var item = event . detail . item ; var filter:==:this . _ filter ;
var resolution = document . get <CAM> element <CAM> by <CAM> id ( ' resolution ' ) . value ; var dim:==:dims [ format ] ;
var host = argv . host  |  |  ' localhost ' ; var port:==:argv . port  |  |  process . env . PORT  |  |  8000 ;
var velocityX = e . gesture . velocityX ; var velocityY:==:e . gesture . velocityY ;
var beautify = require ( ' js - beautify ' ) . js <UND> beautify ; var readdir:==:Promise . promisify ( require ( ' recursive - readdir ' ) ) ;
var request <CAM> camera = this . camera . request <CAM> camera ; var release:==:this . camera . release ;
var async <CAM> map = require ( ' slide ' ) . async <CAM> mapvar mkdirp:==:require ( ' mkdirp ' )
var bullet = nv . models . bullet ( ) ; var tooltip:==:nv . models . tooltip ( ) ;
var tiptip <UND> content = $ ( ' # tiptip <UND> content ' ) ; var tiptip <UND> arrow:==:$ ( ' # tiptip <UND> arrow ' ) ;
var room <CAM> id = params . room <CAM> id ; var is <CAM> new:==:params . is <CAM> new  |  |  false ;
var all <CAM> options = _ _ webpack <UND> require _ _ ( 49 ) . all <CAM> options ; var configure <CAM> options:==:_ _ webpack <UND> require _ _ ( 49 ) . configure <CAM> options ;
var analysis = self . analysis ; var input:==:self . input ;
var width = img . natural <CAM> width  |  |  img . widthvar height:==:img . natural <CAM> height  |  |  img . height
var debug = require ( ' debug ' ) ( ' analytics : group ' ) ; var inherit:==:require ( ' inherit ' ) ;
var min = data . min ; var max:==:data . max ;
var backwards = options . backwards = = true ; var skip <CAM> current:==:options . skip <CAM> current !   false ;
var size = font <CAM> size <CAM> mappings [ node . get <CAM> attribute ( ' size ' ) ] ; var face:==:node . get <CAM> attribute ( ' face ' ) ;
var reporter = this . reporter _ ; var validate:==:this . validate _ ;
var promise = goog . require ( ' goog . labs . promise ' ) ; var mock <CAM> clock:==:goog . require ( ' goog . testing . mock <CAM> clock ' ) ;
var encoder = typeof options . encoder = = = ' function ' ? options . encoder : defaults . encoder ; var sort:==:typeof options . sort      ' function ' ? options . sort : null ;
var offsets = this . offsetsvar targets:==:this . targets
var render <CAM> column = function render <CAM> column ( $ row , rows , row <CAM> index , columns , column <CAM> index ) var class <CAM> name:==:columns [ column <CAM> index ] . class <CAM> name ;
var after <CAM> appear = ref . after <CAM> appear ; var appear <CAM> cancelled:==:ref . appear <CAM> cancelled ;
var t1h = t1h + Kih + ( ( t1l > > > 0 ) < ( Kil > > > 0 ) ? 1 : 0 ) ; var t1l:==:t1l + Wil ;
var verbose = opts ? ! ! opts . verbose : false ; var greedy:==:opts & & opts . greedy !    undefined ?
var legend <CAM> position = powerbi . visuals . legend <CAM> position ; var value <CAM> formatter:==:powerbi . visuals . value <CAM> formatter ;
var create <CAM> call <CAM> expression = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ; var create <CAM> function <CAM> declaration:==:traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> function <CAM> declaration ;
var send <CAM> progress = document . query <CAM> selector ( ' progress#send <CAM> progress ' ) ; var receive <CAM> progress:==:document . query <CAM> selector ( ' progress#receive <CAM> progress ' ) ;
var env = process . env . NODE <UND> ENV  |  |  ' development'var log4js:==:require ( ' log4js ' ) ;
var visual <CAM> map <CAM> model = this . visual <CAM> map <CAM> model ; var padding:==:format <CAM> util . normalize <CAM> css <CAM> array ( visual <CAM> map <CAM> model . get ( ' padding ' )  |  |  0 ) ;
var format = require ( ' util ' ) . format ; var assert:==:require ( ' assert - diff ' ) ;
var sparse <CAM> matrix = math . type . sparse <CAM> matrix ; var Complex:==:math . type . Complex ;
var G = secp256k1 . Gvar r:==:signature . r
var IDENTIFIER <UND> EXPRESSION = ' IDENTIFIER <UND> EXPRESSION ' ; var IF <UND> STATEMENT:==:' IF <UND> STATEMENT ' ;
var outline <CAM> color = Property . get <CAM> value <CAM> or <CAM> cloned <CAM> default ( rectangle . outline <CAM> color , time , Color . BLACK , scratch <CAM> color ) ; var outline <CAM> width:==:Property . get <CAM> value <CAM> or <CAM> default ( rectangle . outline <CAM> width , time , 1 . 0 ) ;
var db = new PouchDB ( dbs . name , auto <UND> compaction : true ) ; var doc:==:_ i d : ' doc ' , val : ' 1 ' ;
var rule <CAM> set = rule <CAM> sets [ i ] ; var selectors:==:rule <CAM> set . selectors ;
var failure = config . failure ; var facebook:==:config . facebook ;
var callback <CAM> parameter <CAM> name = defined ( request . callback <CAM> parameter <CAM> name , this . callback <CAM> parameter <CAM> name ) ; var format <CAM> query <CAM> string:==:defined ( request . format <CAM> query <CAM> string , this . format <CAM> query <CAM> string ) ;
var ITERATOR <UND> SYMBOL = REAL <UND> ITERATOR <UND> SYMBOL  |  |  FAUX <UND> ITERATOR <UND> SYMBOL ; var Iterator:==:function Iterator ( next )
var clobber = options . clobbervar preserve <CAM> timestamps:==:options . preserve <CAM> timestamps
var arg = a . arg ( ) ; var abs:==:a . abs ( ) ;
var should = require ( ' should ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var Text = require ( ' Text ' ) ; var render <CAM> application:==:require ( ' render <CAM> application ' ) ;
var os    = require ( ' os ' ) ; var p:==:path ;
var overlay <CAM> title = app . overlay <CAM> title ; var overlay <CAM> text:==:app . overlay <CAM> text ;
var target = e . html <CAM> event . target ; var gutter:==:plugin . diffview . gutter <CAM> el ;
var yellow300 = exports . yellow300 = ' # fff176 ' ; var yellow400:==:exports . yellow400    ' # ffee58 ' ;
var ui = $ . summernote . ui ; var dom:==:$ . summernote . dom ;
var g = mixins . margin <CAM> convention ( my , svg ) ; var line:==:d3 . svg . line ( ) . interpolate ( ' basis ' ) ;
var commonjs = require ( ' rollup - plugin - commonjs ' ) ; var json:==:require ( ' rollup - plugin - json ' ) ;
var value = this . value ; var type:==:( this . type     ' auto ' ) ? util . type ( value ) : this . type ;
var len = models . length ; var children:==:$ . _ _ views . content . children ;
var zlib = require ( ' zlib ' ) var tap:==:require ( ' tap ' )
var minimatch    = require ( ' minimatch ' ) ; var htmlparser:==:require ( ' htmlparser2 ' ) ;
var left = offset . left - append <CAM> offset . left ; var top:==:offset . top - append <CAM> offset . top ;
var attr = props . attr ; var many:==:props . many ;
var assign = require ( ' object - assign ' ) ; var babel:==:require ( ' babel - core ' ) ;
var email = identify . email ( ) ; var plan:==:identify . proxy ( ' traits . plan ' ) ;
var hostname = os . hostname ( ) ; var uptime:==:format <CAM> uptime ( process . uptime ( ) ) ;
var to <CAM> indexable <CAM> string = pouch <CAM> collate . to <CAM> indexable <CAM> string ; var parse <CAM> indexable <CAM> string:==:pouch <CAM> collate . parse <CAM> indexable <CAM> string ;
var start = delta . start ; var end:==:delta . end ;
var doc = this . doc ; var start:==:doc . position <CAM> to <CAM> index ( range . start ) ;
var debug = require ( ' debug ' ) ( ' socket . io : socket ' ) ; var assign:==:require ( ' object - assign ' ) ;
var open = options . get ( ' open ' ) ; var browser:==:options . get ( ' browser ' ) ;
var ejs = require ( ' gulp - ejs ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var _ ml = 203 ; values [ _ ml ] = _ ml ; var _ mm:==:204 ; values [ _ mm ]    _ mm ;
var Prism = require ( ' Prism ' ) ; var Marked:==:require ( ' Marked ' ) ;
var param <CAM> names = match . param <CAM> names ; var param <CAM> values:==:match . param <CAM> values ;
var Unit = math . type . Unit ; var mean:==:math . mean ;
var edge <CAM> vector = sphereTrimesh <UND> edgeVector ; var edge <CAM> vector <CAM> unit:==:sphereTrimesh <UND> edgeVectorUnit ;
var URI = channel . URI ; var channel <CAM> data:==:this . channel <CAM> data <CAM> from <CAM> channel ( channel ) ;
var stacked <CAM> on = data . stacked <CAM> on ; var val:==:data . get ( value <CAM> dim , idx ) ;
var graph = this . graph ; var min:==:Math . min , max    Math . max ;
var text = ' text ' ; var main:==:' main ' ;
var value = _ ref10 . value ; var group:==:_ ref10 . group ;
var s = e . values ; var n:==:s . length ;
var cell <CAM> count = _ ref . cell <CAM> count ; var overscan <CAM> cells <CAM> count:==:_ ref . overscan <CAM> cells <CAM> count ;
var draw <CAM> order = this . skeleton . draw <CAM> order ; var batcher:==:this . batcher ;
var file = grunt . file ; var log:==:grunt . log ;
var offset <CAM> left = _ props . offset <CAM> left ; var props:==:_ object <CAM> without <CAM> properties ( _ props , [ ' offset <CAM> left ' ] ) ;
var prompt = require ( ' gulp - prompt ' ) ; var spawn:==:require ( ' spawn - local - bin ' ) ;
var dur = this . _ duration * 0 . 001 ; var pos:==:this . _ position * 0 . 001 ;
var action = e & & e . action ; var skip <CAM> update <CAM> on <CAM> bind:==:that . options . skip <CAM> update <CAM> on <CAM> bind ;
var hover <CAM> color = _ props . hover <CAM> color ; var on <CAM> mouse <CAM> leave:==:_ props . on <CAM> mouse <CAM> leave ;
var pages = data . pages ; var space:==:data . space  |  |  ' & hellip ; ' ;
var Plugin = imports . Plugin ; var menus:==:imports . menus ;
var length = this . input <CAM> layouts . layouts [ showed . group ] . length ; var index:==:( showed . index + 1 ) % length ;
var util = require ( ' util ' ) ; var ms:==:require ( ' ms ' ) ;
var buttons = buttons <CAM> defaults ( selector <CAM> in , selector <CAM> out , calendar ) ; var visible:==:coerce ( ' visible ' , buttons . length > 0 ) ;
var instance <CAM> count = item . instance <CAM> count ; var inclusive <CAM> render <CAM> duration:==:item . inclusive <CAM> render <CAM> duration ;
var mouse <CAM> over <CAM> stop = ( opts . mouse <CAM> over <CAM> stop=='false' |  | opts . mouse <CAM> over <CAM> stop==false ) ? false : true ; var default <CAM> play:==:( opts . default <CAM> play   ' false' |  | opts . default <CAM> play   false ) ? false : true ;
var property = property <CAM> path <CAM> select . value ; var additional <CAM> property:==:additional <CAM> property <CAM> path <CAM> select . value ;
var glob = require ( ' glob ' ) ; var karma:==:require ( ' karma ' ) . server ;
var vertices = model . vertices ; var skins:==:model . skins ;
var name = args [ 0 ] . name ; var xobj:==:xobjs . get ( name ) ;
var sysml = this . sysml ; var eip:==:this . eip ;
var half <CAM> axes = box . half <CAM> axes ; var u:==:Matrix3 . get <CAM> column ( half <CAM> axes , 0 , scratch <CAM> cartesianu ) ;
var first <CAM> page = j <CAM> query . sap . by <CAM> id ( i d + ' --first <CAM> page <CAM> link ' ) . toggle <CAM> class ( ' sap <CAM> ui <CAM> lnk ' , ! is <CAM> first ) . toggle <CAM> class ( ' sap <CAM> ui <CAM> lnk <CAM> dsbl ' , is <CAM> first ) ; var back <CAM> link:==:j <CAM> query . sap . by <CAM> id ( i d + ' --back <CAM> link ' ) . toggle <CAM> class ( ' sap <CAM> ui <CAM> lnk ' , ! is <CAM> first ) . toggle <CAM> class ( ' sap <CAM> ui <CAM> lnk <CAM> dsbl ' , is <CAM> first ) ;
var match = sinon . match ; var stub:==:sinon . stub ;
var events   = require ( ' events ' ) ; var util:==:require ( ' util ' ) ;
var use <CAM> timeout = ! ! scope . $ eval ( attrs . use <CAM> timeout ) ; var timeout <CAM> time:==:scope . $ eval ( attrs . timeout <CAM> time )  |  |  0 ;
var settings = imports . settings ; var experimental:==:imports [ ' preferences . experimental ' ] ;
var mr <CAM> uradio = document . get <CAM> element <CAM> by <CAM> id ( ' mr <CAM> uradio ' ) ; var systemmr <CAM> ucheckbox:==:document . get <CAM> element <CAM> by <CAM> id ( ' systemmr <CAM> ucheckbox ' ) ;
var networkURL = this . _ network <CAM> mapping . networkURL ( ui <CAM> source <CAM> code ) ; var cssur <CAM> ls:==:this . _ cssur <CAM> ls <CAM> forsassurl [ networkURL ] ;
var unsupported <CAM> media <CAM> type <CAM> error = errors . unsupported <CAM> media <CAM> type <CAM> error ; var shallow <CAM> copy:==:utils . shallow <CAM> copy ;
var eval <CAM> spy = jasmine . create <CAM> spy ( ' eval <CAM> spy ' ) ; var computed:==:ko . computed ( function ( ) eval <CAM> spy ( observable ( ) ) ; return observable ( ) ; ) . extend ( rate <CAM> limit : 500 ) ;
var s = group . create ( 150 , 300 , ' disk ' ) ; var r:==:game . make . sprite ( 32 , 16 , ' squad ' ) ;
var lhost = splitlhostlport [ 0 ] ; var lport:==:splitlhostlport [ 1 ] ;
var while <CAM> statement = traceur . syntax . trees . while <CAM> statement ; var with <CAM> statement:==:traceur . syntax . trees . with <CAM> statement ;
var fs = require ( ' fs ' ) ; var join:==:require ( ' path ' ) . join ;
var s = v1 . string <CAM> value ( ) ; var n:==:v2 . node <CAM> set <CAM> value ( ) ;
var domain = AWS . util . domain ; var jmespath:==:require ( ' jmespath ' ) ;
var stripHTML = util . stripHTML ; var escapeHTML:==:util . escapeHTML ;
var e = o <CAM> event . original <CAM> event  |  |  o <CAM> event ; var button:==:e . buttons  |  |  e . which ;
var significance <CAM> state = this . significance <CAM> state ; var coefficents <CAM> magnitude:==:this . coefficents <CAM> magnitude ;
var tape = require ( ' tape ' ) var s:==:http . create <CAM> server ( function ( req , res )
var utils = require ( ' utils ' ) ; var f:==:utils . format ;
var ini = require ( ' ini ' ) var editor:==:require ( ' editor ' )
var edgex <CAM> unit = parse <CAM> float ( params . edgex <CAM> unit ) ; var class <CAM> name:==:params . class <CAM> name  |  |  ' grid ' ;
var render <CAM> static = this . render <CAM> static ; var height:==:this . state . height ;
var ndarray   = require ( ' ndarray ' ) var colormap:==:require ( ' colormap ' )
var color = this . colors [ set <CAM> name ] ; var stroke <CAM> width:==:this . dygraph _ . get <CAM> option ( ' stroke <CAM> width ' , set <CAM> name ) ;
var jshint = require ( ' gulp - jshint ' ) ; var requirejs:==:require ( ' gulp - requirejs ' ) ;
var project <CAM> id = web <CAM> inspector . file <CAM> system <CAM> workspace <CAM> binding . project <CAM> id ( file . file <CAM> system <CAM> path ) ; var project:==:this . project ( project <CAM> id ) ;
var extruded <CAM> height = options . extruded <CAM> height ; var ellipsoid:==:options . ellipsoid ;
var plumber = require ( ' gulp - plumber ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var events = require ( ' events ' ) var util:==:require ( ' util ' )
var S = db . model ( ' doc <CAM> array <CAM> with <CAM> hooked <CAM> set ' , schema ) ; var s:==:new S ( name : ' test ' ) ;
var o <CAM> lang = o <CAM> settings . o <CAM> language . o <CAM> paginate ; var o <CAM> classes:==:o <CAM> settings . o <CAM> classes ;
var spritesheets = properties [ ' spritesheets ' ] ; var sprite <CAM> frame <CAM> cache:==:cc . sprite <CAM> frame <CAM> cache ;
var decimal = require ( ' is - decimal ' ) ; var hexadecimal:==:require ( ' is - hexadecimal ' ) ;
var O = Object ( this ) ; var len:==:parse <CAM> int ( O . length )  |  |  0 ;
var error = this . _ errors [ i ] ; var message:==:error . message ;
var o = Object . create ( Object . prototype ) ; var w:==:new weak <CAM> map ( ) ;
var validator = lang <UND> 1 . is <CAM> present ( extra ) ? collection <UND> 1 . string <CAM> map <CAM> wrapper . get ( extra , ' validator ' ) : null ; var async <CAM> validator:==:lang <UND> 1 . is <CAM> present ( extra ) ? collection <UND> 1 . string <CAM> map <CAM> wrapper . get ( extra , ' async <CAM> validator ' ) : null ;
var groupID = proID2groupID [ proID ] ; var subdomain:==:proID2subdomain [ proID ] ;
var tape = require ( ' tape ' ) ; var request:==:require ( ' request ' ) ;
var host = curl . hostname ; var port:==:parse <CAM> int ( curl . port , 10 ) ;
var fs = require ( ' fs ' ) ; var exec <CAM> sync:==:require ( ' child <UND> process ' ) . exec <CAM> sync ;
var THIS <UND> EXPRESSION = ' THIS <UND> EXPRESSION ' ; var THROW <UND> STATEMENT:==:' THROW <UND> STATEMENT ' ;
var minimum = skirt <CAM> options . minimum ; var maximum:==:skirt <CAM> options . maximum ;
var cell <CAM> size = _ ref . cell <CAM> size ; var container <CAM> size:==:_ ref . container <CAM> size ;
var second <CAM> axis = Cartesian3 . normalize ( Cartesian3 . cross ( reference , first <CAM> axis , second <CAM> axis <CAM> scratch ) , second <CAM> axis <CAM> scratch ) ; var third <CAM> axis:==:Cartesian3 . normalize ( Cartesian3 . cross ( first <CAM> axis , second <CAM> axis , third <CAM> axis <CAM> scratch ) , third <CAM> axis <CAM> scratch ) ;
var row = rows . shift ( ) ; var rev:==:JSON . parse ( row . data ) . _ rev ;
var data <CAM> view <CAM> objects = powerbi . data <CAM> view <CAM> objects ; var object <CAM> enumeration <CAM> builder:==:powerbi . visuals . object <CAM> enumeration <CAM> builder ;
var ndarray = require ( ' ndarray ' ) var next <CAM> pow2:==:require ( ' bit - twiddle ' ) . next <CAM> pow2
var icon <CAM> style <CAM> right = _ props . icon <CAM> style <CAM> right ; var on <CAM> title <CAM> touch <CAM> tap:==:_ props . on <CAM> title <CAM> touch <CAM> tap ;
var crop <CAM> box = this . crop <CAM> box ; var cropped:==:this . cropped & & crop <CAM> box ;
var attributes = options . attributes ; var index <CAM> buffer:==:options . index <CAM> buffer ;
var path = require ( ' path ' ) var resolve:==:path . resolve
var domain = require ( ' domain ' ) ; var bunyan:==:require ( ' bunyan ' ) ;
var now = Date . now ( ) ; var created:==:this . created . get <CAM> time ( ) ;
var count = state . count ; var subscriber:==:state . subscriber ;
var alpha = new test <CAM> object ( letter : ' alpha ' ) ; var beta:==:new test <CAM> object ( letter : ' beta ' ) ;
var flux <CAM> store = require ( ' flux <CAM> store ' ) ; var Dispatcher:==:require ( ' Dispatcher ' ) ;
var a = SIMD . Float32x4 ( 1 . 0 , 0 . 25 , 0 . 111111 , 0 . 0625 ) ; var c:==:SIMD . Float32x4 . reciprocal <CAM> sqrt <CAM> approximation ( a ) ;
var uuid = li . dataset . uuid ; var el:==:li . query <CAM> selector ( ' input ' ) ;
var lossless <CAM> results = document . get <CAM> element <CAM> by <CAM> id ( ' lossless <CAM> results ' ) ; var lossless <CAM> toggle:==:document . get <CAM> element <CAM> by <CAM> id ( ' lossless <CAM> toggle ' ) ;
var w = mip <CAM> data . width ; var h:==:mip <CAM> data . height ;
var col <CAM> content <CAM> right = t . col <CAM> content <CAM> right ; var date <CAM> to <CAM> cell:==:t . date <CAM> to <CAM> cell ;
var position <CAM> buffer <CAM> lo = this . position <CAM> buffer <CAM> lovar pick <CAM> buffer:==:this . pick <CAM> buffer
var buffer = this . ensure <CAM> buffer ( buffer <CAM> length + row <CAM> bytes ) ; var bits:==:this . bits ;
var combine <CAM> output = path . join ( ' Build ' , ' combine <CAM> output ' , optimizer ) ; var copyright <CAM> header:==:fs . read <CAM> file <CAM> sync ( path . join ( ' Source ' , ' copyright <CAM> header . js ' ) ) ;
var _ require = _ _ webpack <UND> require _ _ ( 1 ) ; var Component:==:_ require . Component ;
var style <CAM> sheet <CAM> header = target . css <CAM> model . style <CAM> sheet <CAM> header <CAM> for <CAM> id ( style <CAM> sheet <CAM> id ) ; var sourceURL:==:style <CAM> sheet <CAM> header . resourceURL ( ) ;
var rct <CAM> text <CAM> view = require <CAM> native <CAM> component ( ' rct <CAM> text <CAM> view ' , null ) ; var rct <CAM> text <CAM> field:==:require <CAM> native <CAM> component ( ' rct <CAM> text <CAM> field ' , null ) ;
var graph = new Dygraph ( graph <CAM> div , data , opts ) ; var legend:==:document . get <CAM> elements <CAM> by <CAM> class <CAM> name ( ' dygraph - legend ' ) ;
var error = props . error ; var error <CAM> style:==:props . error <CAM> style ;
var CANCEL = sym ( ' CANCEL <UND> PROMISE ' ) ; var SAGA <UND> ACTION:==:sym ( ' SAGA <UND> ACTION ' ) ;
var channel = value . channel ; var priority:==:value . priority ;
var translucent = default <CAM> value ( options . translucent , true ) ; var closed:==:default <CAM> value ( options . closed , false ) ;
var through2 = require ( ' through2 ' ) ; var request:==:bb <CAM> promise . promisify ( require ( ' request ' ) ) ;
var p = result . pathname  |  |  '' ; var s:==:result . search  |  |  '' ;
var ini = require ( ' ini ' ) var test:==:require ( ' tap ' ) . test
var bounds = this . bounds ; var deadzone:==:this . deadzone ;
var event <CAM> time = $ ( ' # bc <UND> eventTimeValue ' ) ; var event <CAM> date:==:$ ( ' # bc <UND> eventDateValue ' ) ;
var move = obj . move  |  |  false ; var no <CAM> sleep:==:obj . no <CAM> sleep  |  |  false ;
var height = opts & & opts . height ! = = undefined ? opts . height : 1 . 0 ; var height <CAM> segments:==:opts & & opts . height <CAM> segments !    undefined ? opts . height <CAM> segments : 5 ;
var can <CAM> evaluate = util . can <CAM> evaluate ; var is <CAM> identifier:==:util . is <CAM> identifier ;
var camera = scene . _ camera ; var context:==:scene . context ;
var tildify = require ( ' tildify ' ) ; var Transform:==:require ( ' stream ' ) . Transform ;
var index = state . index ; var has <CAM> error:==:state . has <CAM> error ;
var choice <CAM> context = this . choice <CAM> context ; var fork <CAM> context:==:this . fork <CAM> context ;
var m = require ( ' m ' ) ; var g:==:require ( ' g ' ) ;
var pos = this . _ position ? this . position : ( this . layout <CAM> area <CAM> pos  |  |  Prim2DBase <UND> 1 . _ v0 ) ; var post <CAM> scale:==:this . _ post <CAM> scale ;
var a = from . obj ( [ ' a ' , ' b ' , ' d ' , ' e ' , ' g ' , ' h ' ] ) var b:==:from . obj ( [ ' b ' , ' c ' , ' f ' ] )
var input = this . inputs [ i ] ; var source:==:this . animation . source [ input . source ] ;
var key = util . inspect ( item . key ) . split ( ' \n ' ) . join ( ' \n ' ) var val:==:value : item . value
var assert = require ( ' assert ' ) ; var spawn:==:require ( ' child <UND> process ' ) . spawn ;
var has <CAM> own <CAM> property = require ( ' has <CAM> own <CAM> property ' ) var to <CAM> string:==:require ( ' to <CAM> string ' )
var test = require ( ' tap ' ) . testvar fs:==:require ( ' fs ' )
var result = result <CAM> selector ( state ) ; var time:==:time <CAM> selector ( state ) ;
var root = goog . dom . get <CAM> element ( ' root ' ) ; var graphics:==:goog . graphics . create <CAM> graphics ( 800 , 600 ) ;
var editor = e . editor ; var range:==:new CKEDITOR . dom . range ( editor . document ) ;
var entity = geometry <CAM> updater . _ entity ; var rectangle:==:entity . rectangle ;
var device <CAM> info = device <CAM> infos [ i ] ; var option:==:document . create <CAM> element ( ' option ' ) ;
var react <CAM> native <CAM> tag <CAM> handles = require ( ' react <CAM> native <CAM> tag <CAM> handles ' ) ; var react <CAM> multi <CAM> child:==:require ( ' react <CAM> multi <CAM> child ' ) ;
var pre = build <CAM> line <CAM> content ( cm , line , null , true ) . pre ; var end:==:pre . append <CAM> child ( zero <CAM> width <CAM> element ( cm . display . measure ) ) ;
var funcs = test <CAM> set [ i ] . funcs ; var receivers:==:test <CAM> set [ i ] . receivers ;
var create <CAM> parameter <CAM> reference = parse <CAM> tree <CAM> factory . create <CAM> parameter <CAM> reference ; var create <CAM> promise:==:parse <CAM> tree <CAM> factory . create <CAM> promise ;
var scope = _ ref . scope ; var redirect <UND> uri:==:_ ref . redirect <UND> uri ;
var Data = ctx . model ( ' Data ' ) ; var path:==:file . params . path ;
var frames = rotate <CAM> timeline . frames ; var bone:==:skeleton . bones [ rotate <CAM> timeline . bone <CAM> index ] ;
var needInfo <UND> start = $ ( ' . needInfo <UND> start ' ) ; var needInfo <UND> end:==:$ ( ' . needInfo <UND> end ' ) ;
var o <CAM> lang = o <CAM> settings . o <CAM> language ; var i <CAM> init <CAM> display <CAM> start:==:o <CAM> settings . i <CAM> init <CAM> display <CAM> start ;
var world <CAM> force = Body <UND> applyLocalForce <UND> worldForce ; var world <CAM> point:==:Body <UND> applyLocalForce <UND> worldPoint ;
var view = typeof options . view ! = ' undefined ' ? options . view : window ; var detail:==:typeof options . detail !   ' undefined ' ? options . detail : 0 ;
var skip = parse <CAM> int ( params . qstring . skip  |  |  0 ) ; var filter:==:params . qstring . filter  |  |  ' ' ;
var params = this . parse <CAM> params ( this . props . params ) ; var platform:==:params . platform
var node = observer . nodes _ [ i ] ; var registrations:==:registrations <CAM> table . get ( node ) ;
var deltaX = e . deltaX ; var deltaY:==:-1 * e . deltaY ;
var color <CAM> mask = default <CAM> value ( states <CAM> functions . color <CAM> mask , [ true , true , true , true ] ) ; var depth <CAM> range:==:default <CAM> value ( states <CAM> functions . depth <CAM> range , [ 0 . 0 , 1 . 0 ] ) ;
var handle <CAM> labels = displaybles . handle <CAM> labels = [ ] ; var bar <CAM> group:==:this . _ displayables . bar <CAM> group ;
var opacity = context . opacity ; var origin:==:context . origin ;
var expression = this . transform <CAM> any ( tree . expression ) ; var case <CAM> clauses:==:this . transform <CAM> list ( tree . case <CAM> clauses ) ;
var view = end <CAM> user <CAM> options . view ; var source:==:end <CAM> user <CAM> options . source ;
var ribbon <CAM> close <CAM> array = options . ribbon <CAM> close <CAM> array  |  |  false ; var ribbon <CAM> close <CAM> path:==:options . ribbon <CAM> close <CAM> path  |  |  false ;
var tr = document . create <CAM> element ( ' tr ' ) ; var td:==:document . create <CAM> element ( ' td ' ) ;
var one = subject . client . find <CAM> element ( selectors . one ) ; var two:==:subject . client . find <CAM> element ( selectors . two ) ;
var line <CAM> dash <CAM> offset = state . line <CAM> dash <CAM> offset ; var line <CAM> join:==:state . line <CAM> join ;
var x <CAM> scale = axis <CAM> options . x <CAM> scale ; var y <CAM> scale:==:axis <CAM> options . y <CAM> scale ;
var len = _ len ; var accu:==:_ accu ;
var moment = require ( ' moment ' ) ; var async:==:require ( ' async ' ) ;
var plot   = this . plotvar view <CAM> box:==:plot . view <CAM> box
var b = color . b ; var max:==:Math . max ( Math . max ( r , g ) , b ) ;
var y = sphere0 . center <CAM> world . y - sphere1 . center <CAM> world . y ; var z:==:sphere0 . center <CAM> world . z - sphere1 . center <CAM> world . z ;
var feature = new this . feature <CAM> class _ ( ) ; var i d:==:raw <CAM> feature . i d ;
var parse <CAM> tree <CAM> visitor = traceur . syntax . parse <CAM> tree <CAM> visitor ; var module <CAM> symbol:==:traceur . semantics . symbols . module <CAM> symbol ;
var local <CAM> repo = options . local <CAM> repo ; var tree <CAM> string:==:options . tree <CAM> string ;
var reload = browser <CAM> sync . reload ; var colors:==:plug . util . colors ;
var buttons = buttons <CAM> defaults ( menu <CAM> in , menu <CAM> out ) ; var visible:==:coerce ( ' visible ' , buttons . length > 0 ) ;
var margin = this . margin ; var width:==:viewport . width - margin . right - margin . left ;
var format <CAM> constructor = format <CAM> constructors [ i ] ; var format:==:new format <CAM> constructor ( ) ;
var signs = this . signs ; var gcp:==:this . gcp ;
var uuid = require ( ' uuid ' ) ; var rest <CAM> error:==:errors . rest <CAM> error ;
var cos = Math . cos ; var sqrt:==:Math . sqrt ;
var reduce = _ curry3 ( _ reduce ) ; var reduce <CAM> by:==:_ curryN ( 4 , [ ] , _ dispatchable ( [ ] , _ xreduce <CAM> by , function reduce <CAM> by ( value <CAM> fn , value <CAM> acc , key <CAM> fn , list )
var show <CAM> seconds = $ date <CAM> formatter . show <CAM> seconds ( format ) ; var showAM:==:$ date <CAM> formatter . showAM ( format ) ;
var cpu <CAM> sync = options . cpu <CAM> sync ; var chrome <CAM> fix:==:options . chrome <CAM> fix ;
var fs = require ( ' graceful - fs ' ) ; var write:==:require ( ' write ' ) ;
var label = create <CAM> element ( ' label ' ) ; var input:==:create <CAM> element ( ' input ' ) ;
var JS <UND> CHECK <UND> TIMEOUT = process . env . JS <UND> CHECK <UND> TIMEOUT  |  |  300 ; var JS <UND> TIMEOUT:==:process . env . JS <UND> TIMEOUT  |  |  10 * 1000 ;
var DELIMITERS = HTMLCSS . FONTDATA . DELIMITERS ; var H:==:' H ' , V    ' V ' ;
var decimals = cfg . decimals  |  |  8 ; var continuity:==:cfg . continuity  |  |  1 ;
var del = require ( ' obj - case ' ) . del ; var each:==:require ( ' each ' ) ;
var host = node . server  |  |  msg . host ; var port:==:node . port  |  |  msg . port ;
var config = editor . config ; var history:==:editor . history ;
var c9 = imports . c9 ; var vfs:==:imports . vfs ;
var os = require ( ' os ' ) ; var request:==:require ( ' request ' ) ;
var foldl = require ( ' foldl ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var two = document . get <CAM> element <CAM> by <CAM> id ( ' two ' ) ; var last:==:document . get <CAM> element <CAM> by <CAM> id ( ' last ' ) ;
var tx = wt . tx ; var ty:==:wt . ty ;
var STRING4 = C . STRING4 = 0x64 ; var STRING5:==:C . STRING5    0x65 ;
var top <CAM> level <CAM> types = event <CAM> constants . top <CAM> level <CAM> types ; var is <CAM> startish:==:event <CAM> plugin <CAM> utils . is <CAM> startish ;
var change = changes [ i ] var from:==:offset <CAM> pos ( change . from , old <CAM> prev , new <CAM> prev )
var row <CAM> height = tree . provider . row <CAM> height ; var renderer:==:tree . renderer ;
var width = Service . query ( ' layout <CAM> manager . width ' ) ; var height:==:Service . query ( ' layout <CAM> manager . height ' ) ;
var ellipsoid = geometry . _ ellipsoid ; var surface <CAM> height:==:geometry . _ surface <CAM> height ;
var media <CAM> properties = Windows . Media . media <CAM> properties ; var storage <CAM> library:==:Windows . Storage . storage <CAM> library ;
var Module = require ( ' meanio ' ) . Modulevar path:==:require ( ' path ' )
var layouts   = require ( ' metalsmith - layouts ' ) ; var permalinks:==:require ( ' metalsmith - permalinks ' ) ;
var manifest = app . manifest  |  |  app . update <CAM> manifest ; var name:==:new manifest <CAM> helper ( manifest ) . name ;
var w = width*1 ; var h:==:height*1 ;
var tan = stdlib . Math . tan ; var exp:==:stdlib . Math . exp ;
var cps <CAM> transformer = traceur . codegeneration . generator . cps <CAM> transformer ; var end <CAM> state:==:traceur . codegeneration . generator . end <CAM> state ;
var exchange = _ . find ( exchanges , function ( e ) return e . slug = = = slug ) ; var name:==:exchange . name ;
var h = '' + d . get <CAM> hours ( ) ; h = h . length = = = 1 ? ' 0 ' + h : h ; var s:==:'' + d . get <CAM> minutes ( ) ; s    s . length      1 ? ' 0 ' + s : s ;
var yaml = require ( ' js - yaml ' ) ; var marked:==:require ( ' marked ' ) ;
var create <CAM> block = parse <CAM> tree <CAM> factory . create <CAM> block ; var create <CAM> break <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> break <CAM> statement ;
var pageX = a <CAM> touches [ 0 ] . pageX ; var pageY:==:a <CAM> touches [ 0 ] . pageY ;
var BINARY <UND> EXPRESSION = ' BINARY <UND> EXPRESSION ' ; var BINDING <UND> ELEMENT:==:' BINDING <UND> ELEMENT ' ;
var operand = this . transform <CAM> any ( tree . operand ) ; var elements:==:tree . elements ;
var exec = child <CAM> process . exec ; var spawn:==:child <CAM> process . spawn ;
var dynamic = ref . dynamic ; var class <CAM> result:==:ref . class <CAM> result ;
var fs = require ( ' fs ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var x = bounds . x ; var y:==:bounds . y ;
var lazypipe = require ( ' lazypipe ' ) ; var glob:==:require ( ' glob ' ) . sync ;
var offset = options . offset ; var side <CAM> orientation:==:this . update <CAM> side <CAM> orientation ( options . side <CAM> orientation , scene ) ;
var layout = imports . layout ; var question:==:imports [ ' dialog . question ' ] ;
var y = - _ vector3 . y * _ svg <CAM> height <CAM> half ; var node:==:object . node ;
var Types = keystone . Field . Types ; var Money:==:new keystone . List ( ' Money ' ,
var fs = require ( ' graceful - fs ' ) var log:==:require ( ' npmlog ' )
var faceUV = options . faceUV  |  |  new Array ( 3 ) ; var face <CAM> colors:==:options . face <CAM> colors ;
var get <CAM> lookup <CAM> table <CAM> factory = shared <CAM> util . get <CAM> lookup <CAM> table <CAM> factory ; var warn:==:shared <CAM> util . warn ;
var commands = imports . commands ; var jsonalyzer:==:imports . jsonalyzer ;
var width = options . width ; var margin <CAM> left:==:options . margin <CAM> left ;
var archy = require ( ' archy ' ) var mkdirp:==:require ( ' mkdirp ' )
var EYE <UND> OFFSET <UND> INDEX = Billboard . EYE <UND> OFFSET <UND> INDEX ; var HORIZONTAL <UND> ORIGIN <UND> INDEX:==:Billboard . HORIZONTAL <UND> ORIGIN <UND> INDEX ;
var shadow <CAM> maps = frame <CAM> state . shadow <CAM> maps ; var length:==:shadow <CAM> maps . length ;
var handle <CAM> slide = Gallery . prototype . handle <CAM> slidevar handle <CAM> close:==:Gallery . prototype . handle <CAM> close
var scroll <CAM> top = _ ref . scroll <CAM> top ; var vertical <CAM> offset <CAM> adjustment:==:_ ref . vertical <CAM> offset <CAM> adjustment ;
var item = items [ i ] ; var section:==:sectioned & & this . get <CAM> section <CAM> name ( item ) ;
var config = ( model <CAM> desc  |  |  ) . config  |  |  ; var adapter:==:config . adapter  |  |  ;
var React = require ( ' React ' ) ; var cx:==:require ( ' cx ' ) ;
var del = require ( ' del ' ) ; var glob:==:require ( ' glob ' ) ;
var option = axis <CAM> pointer <CAM> model . option ; var status:==:axis <CAM> pointer <CAM> model . get ( ' status ' ) ;
var property <CAM> name = property <CAM> names [ 0 ] ; var prop:==:_ _ array <CAM> first ( this . get <CAM> properties ( ) , _ _ prop <CAM> eq ( ' name ' , property <CAM> name ) ) ;
var native <CAM> modules = require ( ' native <CAM> modules ' ) ; var Dimensions:==:require ( ' Dimensions ' ) ;
var a = shape . bounds . a ; var b:==:shape . bounds . b ;
var value <CAM> column = reader . get <CAM> value <CAM> column ( value <CAM> column <CAM> role <CAM> name , series <CAM> index ) ; var value:==:values [ 0 ] [ series <CAM> index ] ;
var messages = update . messagesvar len:==:messages . length
var scheduler = instance . get ( ' scheduler ' ) ; var today <CAM> date:==:scheduler . get ( ' today <CAM> date ' ) ;
var n = doc . nums . pop ( ) ; var s:==:doc . strs . pop ( ) ;
var original <CAM> scale = this . _ original <CAM> scale ; var extent:==:this . _ extent ;
var cell <UND> index = this . find <UND> cell <UND> index ( code <UND> cell ) ; var trusted:==:code <UND> cell . output <UND> area . trusted ;
var ownerID = _ tree <CAM> snapshot$instanc . ownerID ; var owner:==:tree <CAM> snapshot [ ownerID ] ;
var replace = require ( ' replace ' ) ; var path:==:require ( ' path ' )
var calls = Object . get <CAM> own <CAM> property <CAM> names ( source . _ calls  |  |  ) ; var inherited:==:source . _ inherited  |  |  [ ] ;
var show <CAM> time = powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , pulse <CAM> chart . Properties [ ' popup ' ] [ ' show <CAM> time ' ] , pulse <CAM> chart . default <CAM> settings . popup . show <CAM> time ) ; var show <CAM> title:==:powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , pulse <CAM> chart . Properties [ ' popup ' ] [ ' show <CAM> title ' ] , pulse <CAM> chart . default <CAM> settings . popup . show <CAM> title ) ;
var tessellation = options . tessellation  |  |  64 ; var arc:==:( options . arc <   0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ;
var pos1 = obj . pos1  |  |  [ 0,0,0 ] ; var pos2:==:obj . pos2  |  |  [ 0,0,0 ] ;
var Pattern = util . Pattern ; var Permalink:==:util . Permalink ;
var eventproxy = require ( ' eventproxy ' ) ; var Message:==:models . Message ;
var x = boundary ? boundary . x : null ; var y:==:boundary ? boundary . y : null ;
var height = ellipse . height ; var extruded <CAM> height:==:ellipse . extruded <CAM> height ;
var fs = require ( ' graceful - fs ' ) var rimraf:==:require ( ' rimraf ' )
var uglify   = require ( ' broccoli - uglify - sourcemap ' ) ; var stew:==:require ( ' broccoli - stew ' ) ;
var os = require ( ' os ' ) ; var winston:==:require ( ' winston ' ) ;
var readdir = require ( ' graceful - fs ' ) . readdirvar rmdir:==:require ( ' graceful - fs ' ) . rmdir
var sprite = sprites [ i ] ; var material:==:sprite . material ;
var val = tf2 . value ; var p:==:Ti . Contacts . get <CAM> group <CAM> byid ( val ) ;
var pubsub = imports . pubsub ; var vfs:==:imports . vfs ;
var del = require ( ' del ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var date = this . _ validate ( year , month , day , main . local . invalid <CAM> date ) ; var year:==:this . _ t2g <CAM> year ( date . year ( ) ) ;
var props = node . propsvar value:==:props . value + ''
var node <CAM> name = options & & options . node <CAM> name  |  |  ' SPAN ' ; var expand <CAM> closest <CAM> sibling:==:! ! ( options & & options . expand <CAM> closest <CAM> sibling ) ;
var precision = option . precision ; var data <CAM> bound:==:this . data <CAM> bound ;
var no <CAM> results <CAM> text = _ props2 . no <CAM> results <CAM> text ; var search <CAM> prompt <CAM> text:==:_ props2 . search <CAM> prompt <CAM> text ;
var get <CAM> node <CAM> for <CAM> character <CAM> offset = require ( ' get <CAM> node <CAM> for <CAM> character <CAM> offset ' ) ; var get <CAM> text <CAM> content <CAM> accessor:==:require ( ' get <CAM> text <CAM> content <CAM> accessor ' ) ;
var el = options . element  |  |  document ; var speed:==:options . speed  |  |  100 ;
var m = matrices [ 0 ] ; var s:==:cs <UND> sqr ( 0 , m , false ) ;
var ext = path . extname ( name ) ; var base:==:path . basename ( name , ext ) ;
var cancel = client . helper . wait <CAM> for <CAM> element ( ' # ctx - cancel - button ' ) ; var menu:==:client . helper . wait <CAM> for <CAM> element ( ' . app <CAM> window . active . contextmenu ' ) ;
var frame1 = doc . get <CAM> element <CAM> by <CAM> id ( ' frame1ID ' ) ; var frame2:==:doc . get <CAM> element <CAM> by <CAM> id ( ' frame2ID ' ) ;
var center = view <CAM> state . center ; var extent:==:frame <CAM> state . extent ;
var ellipsoid = controller . _ ellipsoid ; var scene:==:controller . _ scene ;
var RETURN <UND> STATEMENT = ' RETURN <UND> STATEMENT ' ; var SCRIPT:==:' SCRIPT ' ;
var source = require ( ' function - source ' ) ; var proc:==:require ( ' child <UND> process ' ) ;
var internal <CAM> array = utils . internal <CAM> array ; var object <CAM> has <CAM> own <CAM> property:==:utils . import <CAM> now ( ' object <CAM> has <CAM> own <CAM> property ' ) ;
var pre = m . pre ; var post:==:m . post . length ? expand ( m . post , false ) : [ '' ] ;
var x <CAM> range = this . x <CAM> range ; var y <CAM> range:==:this . y <CAM> range ;
var total = last <CAM> state . total ; var rendered:==:last <CAM> state . rendered++ ;
var target = this . vexpr ( l . target , nexti ) ; var n:==:l . ifs . length ;
var bar2 = angular . element ( element [ 0 ] . query <CAM> selector ( ' . md - bar2 ' ) ) ; var container:==:angular . element ( element [ 0 ] . query <CAM> selector ( ' . md - container ' ) ) ;
var constructor = constructor  |  |  this . constructorvar source:==:this . source ;
var tts <CAM> status = document . get <CAM> element <CAM> by <CAM> id ( ' tts <CAM> status ' ) ; var voice <CAM> info:==:document . get <CAM> element <CAM> by <CAM> id ( ' voice <CAM> info ' ) ;
var through = require ( ' through2 ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var pages <CAM> promise = pdf <CAM> viewer . pages <CAM> promise ; var one <CAM> page <CAM> rendered:==:pdf <CAM> viewer . one <CAM> page <CAM> rendered ;
var ui <CAM> manager = require ( ' ui <CAM> manager ' ) ; var View:==:require ( ' View ' ) ;
var breakpoints = imports . breakpoints ; var ui:==:imports . ui ;
var is <CAM> defined = leaflet <CAM> helpers . is <CAM> defined ; var is <CAM> object:==:leaflet <CAM> helpers . is <CAM> object ;
var objects = category <CAM> column . objects & & category <CAM> column . objects [ category <CAM> index ] ; var color:==:color <CAM> helper . get <CAM> color <CAM> for <CAM> series <CAM> value ( objects , category <CAM> column . identity <CAM> fields , category <CAM> column . values [ category <CAM> index ] ) ;
var bitrate <CAM> list = media <CAM> info . bitrate <CAM> list ; var type:==:media <CAM> info . type ;
var cs <UND> permute = math . sparse . cs <UND> permute ; var cs <UND> lu:==:math . sparse . cs <UND> lu ;
var keys = ! _ is <CAM> array <CAM> like ( obj ) & & _ keys ( obj ) ; var length:==:( keys  |  |  obj ) . length ;
var positions = Property . get <CAM> value <CAM> or <CAM> undefined ( polyline <CAM> volume . positions , time , options . polyline <CAM> positions ) ; var shape:==:Property . get <CAM> value <CAM> or <CAM> undefined ( polyline <CAM> volume . shape , time ) ;
var light <CAM> green400 = exports . light <CAM> green400 = ' # 9ccc65 ' ; var light <CAM> green500:==:exports . light <CAM> green500    ' # 8bc34a ' ;
var react <CAM> native <CAM> view <CAM> attributes = require ( ' react <CAM> native <CAM> view <CAM> attributes ' ) ; var Set:==:require ( ' Set ' ) ;
var value <CAM> field = this . cfg . value <CAM> field ; var len:==:this . _ data . length ;
var React = require ( ' React ' ) ; var recording <CAM> module:==:require ( ' native <CAM> modules ' ) . time <CAM> picker <CAM> dialog <CAM> recording <CAM> module ;
var w = this . win _ . outer <CAM> width  |  |  800var h:==:this . win _ . outer <CAM> height  |  |  500 ;
var seq = Parsers . seq ; var opt:==:Parsers . opt ;
var parent <CAM> node <CAM> interface = scope . parent <CAM> node <CAM> interface ; var non <CAM> element <CAM> parent <CAM> node <CAM> interface:==:scope . non <CAM> element <CAM> parent <CAM> node <CAM> interface ;
var state = utils . retrieve <CAM> ignore <CAM> error ( ' gdrive . state ' ) ; var user <CAM> id:==:storage [ account <CAM> id + ' . user <CAM> id ' ] ;
var cache = is <CAM> undefined ( v [ ' cache ' ] ) ? 1 : v [ ' cache ' ] ; var drag:==:is <CAM> undefined ( v [ ' drag ' ] ) ? '' : v [ ' drag ' ] ;
var buffer = _ dereq _ ( ' buffer ' ) ; var transform:==:_ dereq _ ( ' jstransform ' ) . transform ;
var images = [ ' gulpfile . js ' ] . concat ( pkg . paths . images ) ; var js:==:[ ' gulpfile . js ' ] . concat ( pkg . paths . js ) ;
var node = this . nodes [ this . nodes . length - 1 ] ; var transform:==:this . transforms [ this . transforms . length - 1 ] ;
var x = screen <CAM> coords . x , y = screen <CAM> height - screen <CAM> coords . y - 1 ; var tmp:==:this . tmp ;
var opts   = current . opts ; var caption:==:opts . caption ;
var search = location . search  |  |  '' ; var hash:==:location . hash  |  |  '' ;
var for <CAM> each = angular . for <CAM> each ; var is <CAM> string:==:angular . is <CAM> string ;
var mark <CAM> supported <CAM> for <CAM> processing = _ base <CAM> utils . mark <CAM> supported <CAM> for <CAM> processing ; var uniqueID:==:_ element <CAM> utilities . _ uniqueID ;
var form = that . _ send <UND> form ; var area:==:that . _ send <UND> area ;
var bind = _ dereq _ ( ' component - bind ' ) ; var object:==:_ dereq _ ( ' object - component ' ) ;
var ptr = g . _ ptr ; var size:==:g . _ size ;
var is <CAM> object = leaflet <CAM> helpers . is <CAM> object ; var create <CAM> layer:==:leaflet <CAM> layer <CAM> helpers . create <CAM> layer ;
var axe1 = obj . axe1  |  |  [ 1 , 0 , 0 ] ; var axe2:==:obj . axe2  |  |  [ 1 , 0 , 0 ] ;
var restitution = this . options . restitution ; var impulse:==:this . impulse ;
var react <CAM> component <CAM> environment = require ( ' react <CAM> component <CAM> environment ' ) ; var react <CAM> composite <CAM> component <CAM> types:==:require ( ' react <CAM> composite <CAM> component <CAM> types ' ) ;
var check <CAM> git = npm <CAM> install <CAM> checks . check <CAM> gitvar clone:==:require ( ' lodash . clonedeep ' )
var width = Base . window . width * . 75  |  0 ; var nyan <CAM> cat <CAM> width:==:this . nyan <CAM> cat <CAM> width    11 ;
var account = this . _ account ; var w:==:new $ wbxml . Writer ( ' 1 . 3 ' , 1 , ' UTF-8 ' ) ;
var iter = step . evaluate ( ctx ) . iterator ( ) ; var n:==:iter . next ( ) ;
var dirname = require ( ' path ' ) . dirname ; var constantinople:==:require ( ' constantinople ' ) ;
var line <CAM> number = frame . location ? frame . location . line <CAM> number : frame . line <CAM> number ; var column <CAM> number:==:frame . location ? frame . location . column <CAM> number : frame . column <CAM> number ;
var root = graph . get <CAM> node ( this . root ) ; var parent:==:this . parent ;
var l = this . _ len + = data . lengthvar s:==:this . _ s    ( this . _ s  |  |  0 )
var moment = require ( ' moment ' ) ; var mongoose:==:require ( ' mongoose ' ) ;
var offsetX = event . offsetX = = = undefined ? event . layerX : event . offsetX ; var offsetY:==:event . offsetY      undefined ? event . layerY : event . offsetY ;
var match = this . match <CAM> dimen ( dim ) ; var m:==:parse <CAM> float ( match [ 1 ]  |  | '1 ' ) , unit    match [ 2 ] ;
var group = groups [ y ] ; var col:==:filter <CAM> cols ( cols , group ) [ 0 ] ;
var web <CAM> channel <CAM> base <CAM> transport = goog . labs . net . web <CAM> channel . web <CAM> channel <CAM> base <CAM> transport ; var web <CAM> channel <CAM> base:==:goog . labs . net . web <CAM> channel . web <CAM> channel <CAM> base ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var browserify:==:require ( ' browserify ' ) ;
var call <CAM> button = document . query <CAM> selector ( ' button#call <CAM> button ' ) ; var send <CAM> tones <CAM> button:==:document . query <CAM> selector ( ' button#send <CAM> tones <CAM> button ' ) ;
var is = require ( ' is ' ) ; var when:==:require ( ' when ' ) ;
var fade = is <CAM> undefined ( v [ ' fade ' ] ) ? 0 : v [ ' fade ' ] ; var cover:==:is <CAM> undefined ( v [ ' cover ' ] ) ? 0 : v [ ' cover ' ] ;
var options = _ ref2 . options ; var is <CAM> option <CAM> unique:==:this . props . is <CAM> option <CAM> unique ;
var POINTER <UND> MOUSE = gesture <CAM> detector . POINTER <UND> MOUSE = ' mouse ' ; var POINTER <UND> TOUCH:==:gesture <CAM> detector . POINTER <UND> TOUCH    ' touch ' ;
var dynCall <UND> iii = Module [ ' dynCall <UND> iii ' ] = asm [ ' dynCall <UND> iii ' ] ; var dynCall <UND> iiiiii:==:Module [ ' dynCall <UND> iiiiii ' ]    asm [ ' dynCall <UND> iiiiii ' ] ;
var default <CAM> max <CAM> visible = exports . default <CAM> max <CAM> visible = 5 ; var Queues:==:exports . Queues
var cisco = this . cisco ; var sysml:==:this . sysml ;
var bacon = new Food ( name : ' bacon ' ) ; var eggs:==:new Food ( name : ' eggs ' ) ;
var key <CAM> parse <CAM> error = errs . key <CAM> parse <CAM> error ; var key <CAM> encrypted <CAM> error:==:errs . key <CAM> encrypted <CAM> error ;
var a = SIMD . Float32x4 ( 8 . 0 , 4 . 0 , 2 . 0 , -2 . 0 ) ; var c:==:SIMD . Float32x4 . reciprocal <CAM> approximation ( a ) ;
var gulp = require ( ' gulp ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var scale = touch . scale ; var rotation:==:touch . rotation ;
var client = helper . client ( ) ; var con:==:client . connection ;
var value = element ( by . binding ( ' value  |  date : ' yyyy - MM ' ' ) ) ; var valid:==:element ( by . binding ( ' my <CAM> form . input . $ valid ' ) ) ;
var wifi <CAM> service = _ app <CAM> js <CAM> services <CAM> wifi <CAM> service [ ' default ' ] ; var share <CAM> summary <CAM> view:==:_ app <CAM> js <CAM> views <CAM> share <CAM> summary <CAM> view [ ' default ' ] ;
var scene = transitioner . _ scene ; var camera:==:scene . camera ;
var x = pointer . x ; var y:==:pointer . y ;
var proto = Object . create ( html <CAM> element . prototype ) ; var innerHTML:==:Object . get <CAM> own <CAM> property <CAM> descriptor ( Element . prototype , ' innerHTML ' ) ;
var style = style  |  |  node . _ style ; var rotation:==:style . rotation  |  |  0 ;
var wrap = scope . wrap ; var mixin:==:scope . mixin ;
var x = xy . x  |  0 ; var y:==:xy . y  |  0 ;
var assert = scope . assert ; var define <CAM> wrap <CAM> getter:==:scope . define <CAM> wrap <CAM> getter ;
var l = utils . readu <CAM> int32be ( inp , in <CAM> off ) ; var r:==:utils . readu <CAM> int32be ( inp , in <CAM> off + 4 ) ;
var AWS = helpers . AWS ; var Buffer:==:AWS . util . Buffer ;
var o = this . options ; var content:==:frame . children ( ' . content ' ) ;
var scroll <CAM> overflow <CAM> handler = options . scroll <CAM> overflow <CAM> handler ; var wrap:==:scroll <CAM> overflow <CAM> handler . wrap <CAM> content ( ) ;
var total = track . revenue ( )  |  |  track . total ( )  |  |  0 ; var order <CAM> id:==:track . order <CAM> id ( )  |  |  0 ;
var start = options . start  |  |  0 ; var end:==:options . end  |  |  src . length ;
var s = split [ y ] ; var x:==:s . search ( new reg <CAM> exp ( test . name <CAM> matcher ) ) ;
var max = config . max  |  |  MAX ; var text:==:trim ( config . text ) ;
var animation <CAM> el = this . animation <CAM> el ; var el:==:this . el ;
var native <CAM> modules = require ( ' native <CAM> modules ' ) ; var rct <CAM> device <CAM> event <CAM> emitter:==:require ( ' rct <CAM> device <CAM> event <CAM> emitter ' ) ;
var password <CAM> field <CAM> test <CAM> object = require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' password <CAM> field <CAM> test <CAM> object ' ) ) ; var text <CAM> field <CAM> test <CAM> object:==:require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' text <CAM> field <CAM> test <CAM> object ' ) ) ;
var h = d . get <CAM> hours ( ) + '' ; if ( h . length = = = 1 ) h = ' 0 ' + h ; var m:==:d . get <CAM> minutes ( ) + '' ; if ( m . length      1 ) m    ' 0 ' + m ;
var sshpk = require ( ' sshpk ' ) ; var jsprim:==:require ( ' jsprim ' ) ;
var canvas = this . game . canvas ; var margin:==:this . margin ;
var left = path . get ( ' left ' ) ; var right:==:path . get ( ' right ' ) ;
var content2 = tree . content2 = b . first <CAM> child ; var sr3:==:tree . sr3    b . create <CAM> shadow <CAM> root ( ) ;
var io = require ( ' socket . io ' ) ( server ) ; var redis:==:require ( ' socket . io - redis ' ) ;
var create <CAM> legend = powerbi . visuals . create <CAM> legend ; var tooltip <CAM> manager:==:powerbi . visuals . tooltip <CAM> manager ;
var build = imports [ ' cdn . build ' ] ; var fs:==:require ( ' fs ' ) ;
var predefined <CAM> name = traceur . syntax . predefined <CAM> name ; var Token:==:traceur . syntax . Token ;
var p    = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var lookup = FS . lookup <CAM> path ( path , follow : ! dont <CAM> follow ) ; var node:==:lookup . node ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var assert:==:require ( ' assert ' ) ;
var rename = require ( ' gulp - rename ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var w = game . world . width + margin * 2 ; var h:==:game . world . height + margin * 2 ;
var js <CAM> entry = params . js <CAM> entry ; var expected <CAM> url:==:params . expected <CAM> url ;
var periods = args . periods  |  |  [ ] ; var now:==:Date . now ( ) ;
var selection = sample . selection <CAM> state ; var EMPTY:==:character <CAM> metadata . EMPTY ;
var format <CAM> date = calendar . format <CAM> date ; var format <CAM> dates:==:calendar . format <CAM> dates ;
var context = this . local <CAM> names [ r . context <CAM> index ] ; var pipe:==:this . pipe <CAM> names [ r . self <CAM> index ] ;
var horizontal <CAM> origin = label . _ horizontal <CAM> origin ; var vertical <CAM> origin:==:label . _ vertical <CAM> origin ;
var document <CAM> element = kml . document <CAM> element ; var document:==:document <CAM> element . local <CAM> name      ' Document ' ? document <CAM> element : query <CAM> first <CAM> node ( document <CAM> element , ' Document ' , namespaces . kml ) ;
var options = bs . options ; var emitter:==:bs . emitter ;
var webpack = require ( ' webpack - stream ' ) ; var del:==:require ( ' del ' ) ;
var TYPE <UND> PARAMETERS = ' TYPE <UND> PARAMETERS ' ; var TYPE <UND> REFERENCE:==:' TYPE <UND> REFERENCE ' ;
var pdf <CAM> image = core <CAM> image . pdf <CAM> image ; var color <CAM> space:==:core <CAM> color <CAM> space . color <CAM> space ;
var y = item <CAM> layout . y ; var width:==:item <CAM> layout . width ;
var aspect <CAM> ratio = canvas . aspect <CAM> ratio ; var crop <CAM> box:==:this . crop <CAM> box ;
var legend <CAM> position = powerbi . visuals . legend <CAM> position ; var legend <CAM> props:==:powerbi . visuals . legend <CAM> props ;
var bunyan = require ( ' bunyan ' ) ; var http <CAM> error:==:require ( ' restify - errors ' ) . http <CAM> error ;
var dx2 = Math . max ( 0 , Math . min ( w , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ; var r:==:Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' size ' , this . size ) ) ) ) ;
var root <CAM> hook = Hook ( ' root <CAM> hook ' ) var child <CAM> hooka:==:Hook ( ' child <CAM> hooka ' )
var _ ac = 2 ; values [ _ ac ] = _ ac ; var _ ad:==:3 ; values [ _ ad ]    _ ad ;
var width = ( data . width ) ? data . width : 512 ; var height:==:( data . height ) ? data . height : 2 ;
var type = checkbox . attr ( ' data - forecast - type ' ) ; var checked:==:checkbox . prop ( ' checked ' ) ;
var jpx <CAM> image = core <CAM> jpx . jpx <CAM> image ; var pdf <CAM> image:==:( function pdf <CAM> image <CAM> closure ( )
var mode = options . mode ? MODES [ options . mode . to <CAM> lower <CAM> case ( ) ] : -1 ; var mask:==:' mask ' in options ? options . mask : -1 ;
var n = src . dimensionvar X:==:invert ( [ ] , Xi )
var debug = require ( ' debug ' ) ( ' express : router : route ' ) ; var flatten:==:require ( ' array - flatten ' ) ;
var view = µ . view ( ) ; var log:==:µ . log ( ) ;
var dom <CAM> attribute <CAM> names = dom <CAM> property <CAM> config . dom <CAM> attribute <CAM> names  |  |  ; var dom <CAM> property <CAM> names:==:dom <CAM> property <CAM> config . dom <CAM> property <CAM> names  |  |  ;
var col = grid . columns [ 2 ] ; var row:==:grid . rows [ 0 ] ;
var listener = this . context . listener ; var up:==:this . up ;
var key = this . props . node . get ( ' key ' ) ; var ref:==:this . props . node . get ( ' ref ' ) ;
var l = _ l ; var acc:==:_ acc ;
var readdir = Promise . promisify ( require ( ' recursive - readdir ' ) ) ; var ejs:==:require ( ' ejs ' ) ;
var title = _ . trim ( req . body . title ) ; var tab:==:_ . trim ( req . body . tab ) ;
var react <CAM> test <CAM> utils = require ( ' react <CAM> test <CAM> utils ' ) ; var input <CAM> value <CAM> tracking:==:require ( ' input <CAM> value <CAM> tracking ' ) ;
var offset = bounds . offset ; var size:==:bounds . size ;
var mousemove = Rx . Observable . from <CAM> event ( document , ' mousemove ' ) ; var mousedown:==:Rx . Observable . from <CAM> event ( drag <CAM> target , ' mousedown ' ) ;
var orange500 = exports . orange500 = ' # ff9800 ' ; var orange600:==:exports . orange600    ' # fb8c00 ' ;
var first = this . container . find ( ' . calendar . first ' ) ; var second:==:this . container . find ( ' . calendar . second ' ) ;
var ace = this . ace ; var row:==:ace . get <CAM> cursor <CAM> position ( ) . row ;
var scroll <CAM> parent = this . scroll <CAM> parent ( elem , false , true ) ; var scrollbar <CAM> width:==:this . scrollbar <CAM> width ( BODY <UND> REGEX . test ( scroll <CAM> parent . tag <CAM> name ) ) ;
var dataset = this . chart . data . datasets [ rectangle . _ dataset <CAM> index ] ; var index:==:rectangle . _ index ;
var c9 = imports . c9 ; var language:==:imports . language ;
var scale = bbox . rscale ; var h:==:this . chtm <CAM> lroot <CAM> height ( bbox , sbox , scale ) -d ;
var vm = this . vm ; var $ render:==:vm . $ render ;
var react <CAM> native <CAM> feature <CAM> flags = require ( ' react <CAM> native <CAM> feature <CAM> flags ' ) ; var react <CAM> native <CAM> attribute <CAM> payload:==:require ( ' react <CAM> native <CAM> attribute <CAM> payload ' ) ;
var optimist = require ( ' optimist ' ) ; var async:==:require ( ' async ' ) ;
var values = this . values ; var spaces:==:this . spaces ;
var groups = this . style . _ groups ; var is <CAM> opaque <CAM> pass:==:options . is <CAM> opaque <CAM> pass ;
var lat = utils . number ( values [ value <CAM> paths . geo <UND> lat ] ) ; var lng:==:utils . number ( values [ value <CAM> paths . geo <UND> lng ] ) ;
var up = scratch <CAM> calculate <CAM> cartesian . up ; var east:==:scratch <CAM> calculate <CAM> cartesian . east ;
var x = viewport . x  |  |  0 ; var y:==:viewport . y  |  |  0 ;
var data <CAM> view = this . data <CAM> view = options . data <CAM> views [ 0 ] ; var viewport:==:options . viewport ;
var first <CAM> row = this . $ clip <CAM> row <CAM> to <CAM> document ( first <CAM> row ) ; var last <CAM> row:==:this . $ clip <CAM> row <CAM> to <CAM> document ( last <CAM> row ) ;
var program <CAM> node = js <CAM> profile <CAM> model . program <CAM> node ; var gc <CAM> node:==:js <CAM> profile <CAM> model . gc <CAM> node ;
var len = str . length ; var n:==:from <CAM> index  |  |  0 ;
var token = options . token ; var next <CAM> token:==:options . next <CAM> token ;
var is <CAM> cmd = core <CAM> primitives . is <CAM> cmd ; var is <CAM> stream:==:core <CAM> primitives . is <CAM> stream ;
var shadow = shared <CAM> util . shadow ; var string <CAM> topdf <CAM> string:==:shared <CAM> util . string <CAM> topdf <CAM> string ;
var full <CAM> width = _ props . full <CAM> width ; var icon:==:_ props . icon ;
var p = def <CAM> pos ? def <CAM> pos : k . p ; var r:==:def <CAM> rot ? def <CAM> rot : k . r ;
var path = require ( ' path ' ) ; var badge:==:require ( path . join ( _ _ dirname , ' lib ' , ' badge . js ' ) ) ;
var p     = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var data = this . data ; var is <CAM> date <CAM> time:==:visuals . axis <CAM> helper . is <CAM> date <CAM> time ( type ) ;
var e = document . get <CAM> element <CAM> by <CAM> id ( ' cron <CAM> expression ' ) ; var value:==:e . selected <CAM> item ? e . selected <CAM> item . value : e . value ;
var exchange = config . watch . exchange ; var currency:==:config . watch . currency ;
var veeam = this . veeam ; var archimate3:==:this . archimate3 ;
var class <CAM> declaration = traceur . syntax . trees . class <CAM> declaration ; var for <CAM> in <CAM> statement:==:traceur . syntax . trees . for <CAM> in <CAM> statement ;
var surface = globe . _ surface ; var mode:==:scene . frame <CAM> state . mode ;
var dy = Math . min ( h - 10 , Math . max ( 10 , h * Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dy ' , this . dy ) ) ) ) ) ) ; var fill <CAM> color:==:mx <CAM> utils . get <CAM> value ( this . style , ' fill <CAM> color ' , ' # ffffff ' ) ;
var annotations = this . transform <CAM> list ( tree . annotations ) ; var body:==:this . transform <CAM> async <CAM> body _ ( tree . body ) ;
var EXPORT <UND> DEFAULT = ' EXPORT <UND> DEFAULT ' ; var EXPORT <UND> SPECIFIER:==:' EXPORT <UND> SPECIFIER ' ;
var b = this . document . body ; var client <CAM> width:==:b . client <CAM> width ;
var stride = attrib . stride  |  |  0var offset:==:attrib . offset  |  |  0
var stdout = Caml <UND> io . stdout ; var stderr:==:Caml <UND> io . stderr ;
var Marked = require ( ' Marked ' ) ; var unindent:==:require ( ' unindent ' ) ;
var label = this . label ; var close <CAM> link:==:this . close <CAM> link ;
var xcb _ = dimensions . xcb _ ; var ycb _:==:dimensions . ycb _ ;
var outline <CAM> color = Property . get <CAM> value <CAM> or <CAM> cloned <CAM> default ( polyline <CAM> volume . outline <CAM> color , time , Color . BLACK , scratch <CAM> color ) ; var outline <CAM> width:==:Property . get <CAM> value <CAM> or <CAM> default ( polyline <CAM> volume . outline <CAM> width , time , 1 . 0 ) ;
var fs = require ( ' fs ' ) var del:==:require ( ' del ' )
var height <CAM> scale = structure . height <CAM> scale ; var exaggeration:==:mesh <CAM> data . exaggeration ;
var observables = this . observables ; var len:==:observables . length ;
var _ pl = 251 ; values [ _ pl ] = _ pl ; var _ pm:==:252 ; values [ _ pm ]    _ pm ;
var symbol <CAM> set <CAM> encoding = core <CAM> encodings . symbol <CAM> set <CAM> encoding ; var zapf <CAM> dingbats <CAM> encoding:==:core <CAM> encodings . zapf <CAM> dingbats <CAM> encoding ;
var path = require ( ' path ' ) var https:==:require ( ' https ' )
var $ attrs = this . $ attrs ; var $ element:==:this . $ element ;
var less = require ( ' gulp - less ' ) ; var autoprefix:==:require ( ' less - plugin - autoprefix ' ) ;
var ast = Sk . ast <CAM> from <CAM> parse ( cst ) ; var st:==:Sk . symboltable ( ast , name + ' . py ' ) ;
var nav   = $ ( ' . docs - nav - group ' ) ; var trigger:==:$ ( ' . js - docs - nav - trigger ' ) ;
var b = reject <CAM> built <CAM> in <CAM> soon ( ' rejected - b ' , 30 ) ; var c:==:reject <CAM> built <CAM> in <CAM> soon ( ' rejected - c ' , 10 ) ;
var width = req . query . maxwidth  |  |  320 ; var height:==:req . query . maxheight  |  |  240 ;
var generator <CAM> comprehension = traceur . syntax . trees . generator <CAM> comprehension ; var get <CAM> accessor:==:traceur . syntax . trees . get <CAM> accessor ;
var width = shape . width ; var height:==:shape . height ;
var parse <CAM> tree <CAM> transformer = traceur . codegeneration . parse <CAM> tree <CAM> transformer ; var APPLY:==:traceur . syntax . predefined <CAM> name . APPLY ;
var ARRAY <UND> COMPREHENSION = ' ARRAY <UND> COMPREHENSION ' ; var ARRAY <UND> LITERAL:==:' ARRAY <UND> LITERAL ' ;
var wrapper = that . wrapper ; var disable:==:options . disable ;
var fft <CAM> samples = this . fft <CAM> samples ; var buffer:==:this . buffer    this . wavesurfer . backend . buffer ;
var session = require ( ' express - session ' ) ; var compression:==:require ( ' compression ' ) ;
var value = ref . value ; var old <CAM> value:==:ref . old <CAM> value ;
var ace <CAM> adapter = firepad . ace <CAM> adapter ; var firebase <CAM> adapter:==:firepad . firebase <CAM> adapter ;
var _ bi = 24 ; values [ _ bi ] = _ bi ; var _ bj:==:25 ; values [ _ bj ]    _ bj ;
var global = this . _ globalvar extended:==:this . _ extended
var can <CAM> bubble = default <CAM> value ( options . can <CAM> bubble , true ) ; var cancelable:==:default <CAM> value ( options . cancelable , true ) ;
var options = opt <UND> options  |  |  ; var params:==:options . params  |  |  ;
var models = _ _ alloy <CAM> id16 . models ; var len:==:models . length ;
var layout = imports . layout ; var settings:==:imports . settings ;
var callbacks = me . _ options . callbacks ; var before <CAM> footer:==:callbacks . before <CAM> footer . apply ( me , arguments ) ;
var components = material . _ template . components ; var source:==:material . _ template . source ;
var temperature = params . temperature ; var shadows <CAM> hue:==:params . shadows <CAM> hue ;
var react <CAM> ref = require ( ' react <CAM> ref ' ) ; var react <CAM> instrumentation:==:require ( ' react <CAM> instrumentation ' ) ;
var i d = code <CAM> div . closest ( ' div . slide ' ) . attr ( ' i d ' ) ; var index:==:$ ( ' div . slide#'+id+ ' code . execute ' ) . index ( code <CAM> div ) ;
var foo = ' foo ' ; var bar:==:' bar ' ;
var hierarchy = polygon . hierarchy ; var show:==:polygon . show ;
var section = $ . list . sections [ e . section <CAM> index ] ; var item:==:section . get <CAM> item <CAM> at ( e . item <CAM> index ) ;
var light <CAM> blue800 = exports . light <CAM> blue800 = ' # 0277bd ' ; var light <CAM> blue900:==:exports . light <CAM> blue900    ' # 01579b ' ;
var album = items [ i ] . tags . album ; var artist:==:items [ i ] . tags . artist ;
var hotspot = this . hotspots [ i d ] ; var outer:==:hotspot . get <CAM> object <CAM> by <CAM> name ( ' outer ' ) ;
var async = require ( ' async ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var from <CAM> name = item <CAM> model . get ( ' from <CAM> name ' ) ; var to <CAM> name:==:item <CAM> model . get ( ' to <CAM> name ' ) ;
var part = options . part ; var method:==:options . method ;
var width = area <CAM> pixel <CAM> size . width ; var height:==:area <CAM> pixel <CAM> size . height ;
var _ jd = 147 ; values [ _ jd ] = _ jd ; var _ je:==:148 ; values [ _ je ]    _ je ;
var immediate = imports . immediate ; var tab <CAM> manager:==:imports . tab <CAM> manager ;
var rich <CAM> text <CAM> code <CAM> mirror <CAM> adapter = firepad . rich <CAM> text <CAM> code <CAM> mirror <CAM> adapter ; var rich <CAM> text <CAM> code <CAM> mirror:==:firepad . rich <CAM> text <CAM> code <CAM> mirror ;
var fly <CAM> over <CAM> longitude = options . fly <CAM> over <CAM> longitude ; var fly <CAM> over <CAM> longitude <CAM> weight:==:options . fly <CAM> over <CAM> longitude <CAM> weight ;
var normal = Cartesian3 . from <CAM> array ( normals , i ) ; var tangent:==:Cartesian3 . from <CAM> array ( tangents , i ) ;
var a = t . reduce ( l . publish <CAM> locations , function ( i , o ) var a:==:s . get <CAM> viewer <CAM> params ( o ) ;
var frame = exec <UND> state . frame ( i ) ; var script:==:frame . script ( ) ;
var list = view . owner . list ; var length:==:list . length ;
var error <CAM> style = props . error <CAM> style ; var focus:==:props . focus ;
var ui <UND> locales = _ ref . ui <UND> locales ; var id <UND> token <UND> hint:==:_ ref . id <UND> token <UND> hint ;
var name = this . props . name ; var def:==:this . props . def ;
var log = require ( ' npmlog ' ) var tty:==:require ( ' tty ' )
var tree = imports . tree ; var anims:==:imports . anims ;
var words = this . words ; var sig <CAM> bytes:==:this . sig <CAM> bytes ;
var _ dropdown <CAM> menu = _ _ webpack <UND> require _ _ ( 314 ) ; var _ dropdown <CAM> menu2 = _ interop <CAM> require <CAM> default ( _ dropdown <CAM> menu ) ; var _ drop <CAM> modal:==:_ _ webpack <UND> require _ _ ( 509 ) ; var _ drop <CAM> modal2    _ interop <CAM> require <CAM> default ( _ drop <CAM> modal ) ;
var COMPREHENSION <UND> FOR = ' COMPREHENSION <UND> FOR ' ; var COMPREHENSION <UND> IF:==:' COMPREHENSION <UND> IF ' ;
var Timer = goog . require ( ' goog . Timer ' ) ; var Replacer:==:goog . require ( ' goog . testing . property <CAM> replacer ' ) ;
var defaults = Chart . defaults ; var helpers:==:Chart . helpers ;
var values = attribute . values ; var length:==:values . length ;
var ranges = this . ranges ; var editor:==:this . editor ;
var dir = path . dirname ( file ) var s:==:data . scripts  |  |
var h = renderer . $ size . scroller <CAM> height - renderer . line <CAM> height ; var scroll <CAM> top:==:renderer . scroll <CAM> top ;
var recording <CAM> module = require ( ' native <CAM> modules ' ) . date <CAM> picker <CAM> dialog <CAM> recording <CAM> module ; var View:==:require ( ' View ' ) ;
var format = require ( ' util ' ) . format ; var webpack:==:require ( ' webpack - stream ' ) ;
var zmax = options . zmax  |  |  1 . 0 ; var subdivisions:==:options . subdivisions  |  |  w : 1 , h : 1 ;
var c = cells [ j ] ; var row <CAM> index:==:c . parent <CAM> node . row <CAM> index ;
var p = this . _ props ; var radiusX:==:p . radiusX !   null ? p . radiusX : p . radius ;
var y = box . y + margin ; var w:==:box . width - 2 * margin ;
var app = detail . app ; var manifest:==:app . manifest ? app . manifest : app . update <CAM> manifest ;
var UNARY <UND> EXPRESSION = ' UNARY <UND> EXPRESSION ' ; var UNION <UND> TYPE:==:' UNION <UND> TYPE ' ;
var divisor = divisors [ i ] ; var div:==:int32 <CAM> div ( divisor ) ;
var reload = options . reload ; var item <CAM> container:==:fragment  |  |  this . els . item <CAM> container ;
var company = $ ( this ) . parents ( ' . inner <CAM> marble <CAM> wrap ' ) . parents ( ' . marbles <CAM> wrap ' ) . attr ( ' company ' ) ; var username:==:$ ( this ) . parents ( ' . inner <CAM> marble <CAM> wrap ' ) . parents ( ' . marbles <CAM> wrap ' ) . attr ( ' username ' ) ;
var critical <CAM> only = options . critical <CAM> only ; var skip <CAM> detail:==:options . skip <CAM> detail ;
var ui = imports . ui ; var tree:==:imports . tree ;
var HAS <UND> NUMERIC <UND> VALUE = dom <CAM> property . injection . HAS <UND> NUMERIC <UND> VALUE ; var HAS <UND> POSITIVE <UND> NUMERIC <UND> VALUE:==:dom <CAM> property . injection . HAS <UND> POSITIVE <UND> NUMERIC <UND> VALUE ;
var color <CAM> helper = powerbi . visuals . color <CAM> helper ; var create <CAM> interactivity <CAM> service:==:powerbi . visuals . create <CAM> interactivity <CAM> service ;
var GET <UND> TODO <UND> OK = exports . GET <UND> TODO <UND> OK = ' GET <UND> TODO <UND> OK ' ; var ADD <UND> TODO <UND> ERROR:==:exports . ADD <UND> TODO <UND> ERROR    ' ADD <UND> TODO <UND> ERROR ' ;
var AFTER <UND> GROUP <UND> ID = nconf . get ( ' AFTER <UND> GROUP <UND> ID ' ) ; var BEFORE <UND> GROUP <UND> ID:==:nconf . get ( ' BEFORE <UND> GROUP <UND> ID ' ) ;
var _ en = 77 ; values [ _ en ] = _ en ; var _ eo:==:78 ; values [ _ eo ]    _ eo ;
var ui <CAM> manager = require ( ' ui <CAM> manager ' ) ; var ensure <CAM> positive <CAM> delay <CAM> props:==:require ( ' ensure <CAM> positive <CAM> delay <CAM> props ' ) ;
var NODE = setup . NODE ; var uri:==:setup . uri ;
var module <CAM> symbol = traceur . semantics . symbols . module <CAM> symbol ; var object <CAM> map:==:traceur . util . object <CAM> map ;
var loading <UND> icon = options . loading <UND> icon  |  |  ' fa - spinner fa-2x orange ' ; var loading <UND> text:==:options . loading <UND> text  |  |  '' ;
var servers = null , servers <CAM> index = 0 ; var server:==:gateway <CAM> callbacks . server ;
var edges = cell . edges , site = cell . site , polygon = polygons [ i ] = edges . length ? edges . map ( function ( e ) var s:==:e . start ( )
var contract = data . contract ; var service:==:data . service ;
var is <CAM> event <CAM> resizable = t . is <CAM> event <CAM> resizable ; var event <CAM> element <CAM> handlers:==:t . event <CAM> element <CAM> handlers ;
var resolve = Promise . resolve ; var reject:==:Promise . reject ;
var c = goog . crypt . hash32 . to <CAM> signed _ ( bytes [ offset + 2 ] ) ; var d:==:goog . crypt . hash32 . to <CAM> signed _ ( bytes [ offset + 3 ] ) ;
var overscan <CAM> column <CAM> count = props . overscan <CAM> column <CAM> count ; var overscan <CAM> row <CAM> count:==:props . overscan <CAM> row <CAM> count ;
var providers = that . providers ; var provider <CAM> info:==:default <CAM> value ( db <CAM> root . provider <CAM> info , [ ] ) ;
var defs = elem . append ( ' defs ' ) var marker:==:defs . append ( ' marker ' )
var images = loader . parse <CAM> images ( json . images ) ; var textures:==:loader . parse <CAM> textures ( json . textures , images ) ;
var has = Object . prototype . has <CAM> own <CAM> property ; var onerror:==:window . onerror ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var through:==:require ( ' through2 ' ) ;
var line = line <CAM> at <CAM> height ( cm . view . doc , mY ) ; \n\var gutter:==:cm . options . gutters [ i ] ; \n\
var top = Math . ceil ( box . top ) ; var left:==:Math . ceil ( box . left ) ;
var transaction = transactions [ input . tx <CAM> id ] var script:==:transaction . ins [ input . vout ] . script
var height <CAM> reference = Property . get <CAM> value <CAM> or <CAM> default ( point <CAM> graphics . _ height <CAM> reference , time , height <CAM> reference . NONE ) ; var show:==:entity . is <CAM> showing & & entity . is <CAM> available ( time ) & & Property . get <CAM> value <CAM> or <CAM> default ( point <CAM> graphics . _ show , time , true ) ;
var V = new Vol ( this . sx , this . sy , this . depth , 0 . 0 ) ; var n:==:this . w . length ;
var header = require ( ' gulp - header ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var glob = Promise . promisify ( require ( ' glob ' ) ) ; var fs:==:Promise . promisify <CAM> all ( require ( ' fs ' ) ) ;
var name = $ ( this ) . data ( ' name ' ) ; var version:==:$ ( this ) . data ( ' version ' ) ;
var min <CAM> mutations = options . min <CAM> mutations  |  |  3var max <CAM> mutations:==:options . max <CAM> mutations  |  |  5
var axis <CAM> style = powerbi . visuals . axis <CAM> style ; var Prototype:==:powerbi . Prototype ;
var options    = bs . options ; var server:==:options . get ( ' server ' ) ;
var indigo800 = exports . indigo800 = ' # 283593 ' ; var indigo900:==:exports . indigo900    ' # 1a237e ' ;
var path = require ( ' path ' ) var connect:==:require ( ' connect ' )
var duration <CAM> tween = this . _ movement <CAM> data . duration <CAM> tween = = = 0 ? this . _ raw <CAM> duration : this . _ movement <CAM> data . duration <CAM> tween ; var tween <CAM> easing:==:this . _ movement <CAM> data . tween <CAM> easing ;
var url = require ( ' url ' ) var Stream:==:require ( ' stream ' ) . Stream
var promise = A . promise . create ( ) ; var url:==:this . url  |  |  ' window . html ' ;
var inject = require ( ' gulp - inject ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var show <CAM> expandable <CAM> button = _ props . show <CAM> expandable <CAM> button ; var style:==:_ props . style ;
var client = helper . client ( ) ; var q:==:client . query (
var setting = event . detail . setting ; var value:==:event . detail . value ;
var util = require ( ' hexo - util ' ) ; var html <CAM> tag:==:util . html <CAM> tag ;
var curry = zr <CAM> util . curry ; var each:==:zr <CAM> util . each ;
var doc = context . document  |  |  ; var opera:==:context . operamini  |  |  context . opera ;
var editor <CAM> state = require ( ' editor <CAM> state ' ) ; var unicode <CAM> utils:==:require ( ' unicode <CAM> utils ' ) ;
var theme = this . context . theme ; var search <CAM> text:==:this . props . search <CAM> text ;
var response = result . response ; var body:==:result . body ;
var debugger <CAM> statement = traceur . syntax . trees . debugger <CAM> statement ; var default <CAM> clause:==:traceur . syntax . trees . default <CAM> clause ;
var Stream = core <CAM> stream . Stream ; var jpeg <CAM> stream:==:core <CAM> stream . jpeg <CAM> stream ;
var h = this . history ; var i:==:h . index <CAM> of ( name ) ;
var material = this . material ; var env <CAM> map:==:data . env <CAM> map ;
var access <CAM> token = response . access <CAM> token ; var expires <CAM> in:==:response . expires <CAM> in ;
var qunit = require ( ' gulp - qunit ' ) var bower:==:require ( ' gulp - bower ' )
var safe <CAM> apply = leaflet <CAM> helpers . safe <CAM> apply ; var Helpers:==:leaflet <CAM> helpers ;
var on <CAM> resize = options . on <CAM> resize ; var min <CAM> height:==:options . min <CAM> height ;
var sort = _ props2 . sort ; var sort <CAM> by:==:_ props2 . sort <CAM> by ;
var tape = require ( ' tape ' ) var through:==:require ( ' through2 ' )
var gulp = require ( ' gulp ' ) ; var handlebars:==:require ( ' gulp - handlebars ' ) ;
var asin = Math . asin ; var atan2:==:Math . atan2 ;
var a = fulfill <CAM> built <CAM> in <CAM> soon ( ' a ' , 40 ) ; var b:==:fulfill <CAM> built <CAM> in <CAM> soon ( ' b ' , 30 ) ;
var for <CAM> each = _ curry2 ( _ check <CAM> for <CAM> method ( ' for <CAM> each ' , function for <CAM> each ( fn , list ) var len:==:list . length ;
var Node = math . expression . node . Node ; var parenthesis <CAM> node:==:math . expression . node . parenthesis <CAM> node ;
var init = find <CAM> symbol <CAM> modes [ mode ] . init ; var is <CAM> complete:==:find <CAM> symbol <CAM> modes [ mode ] . is <CAM> complete ;
var email = req . param ( ' email ' ) . trim ( ) ; var key:==:req . param ( ' key ' ) ;
var File = test . File ; var basename:==:require ( ' path ' ) . basename ;
var $ element = this . $ element = jq <CAM> lite ( element ) ; var scroll <CAM> view:==:this . scroll <CAM> view    new ionic . views . Scroll ( scroll <CAM> view <CAM> options ) ;
var case <CAM> clause = traceur . syntax . trees . case <CAM> clause ; var Catch:==:traceur . syntax . trees . Catch ;
var revert = params . revert ! = = false ; var orphan:==:params . orphan      true ;
var loadJSON = p5 . prototype . loadJSON ; var load <CAM> strings:==:p5 . prototype . load <CAM> strings ;
var formidable = require ( ' formidable ' ) ; var once:==:require ( ' once ' ) ;
var x = mercX ( lon ) - cx ; var y:==:mercY ( lat ) - cy ;
var is <CAM> dict = core <CAM> primitives . is <CAM> dict ; var is <CAM> ref:==:core <CAM> primitives . is <CAM> ref ;
var session = req . session ; var auth:==:session & & session . auth ;
var row <CAM> data = _ ref4 . row <CAM> data ; var row <CAM> index:==:_ ref4 . row <CAM> index ;
var trigger = t . trigger ; var render <CAM> overlay:==:t . render <CAM> overlay ;
var view <CAM> style <CAM> prop <CAM> types = require ( ' view <CAM> style <CAM> prop <CAM> types ' ) ; var flatten <CAM> style:==:require ( ' flatten <CAM> style ' ) ;
var totalX = total <CAM> xl + abs ( x - xl ) ; var totalY:==:total <CAM> yl + abs ( y - yl ) ;
var data <CAM> point = data <CAM> points [ category <CAM> index ] ; var category <CAM> value:==:data <CAM> point . category <CAM> value ;
var schema <CAM> context = helpers . schema <CAM> context ; var Validator:==:function Validator ( )
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var View:==:require ( ' View ' ) ;
var state = start <UND> state ; var buffer:==:lexbuf [ lex <UND> buffer ] ;
var rb <CAM> tree = mod . rb <CAM> tree ; var Colors:==:mod . Colors ;
var axon = require ( ' pm2-axon ' ) ; var chalk:==:require ( ' chalk ' ) ;
var events = require ( ' events ' ) ; var log:==:require ( dirs . core + ' log ' ) ;
var destination = this . _ destination ; var write <CAM> queue:==:this . _ write <CAM> queue ;
var index = editor . undo <CAM> manger . index ; var br:==:ua . browser . ie ? '' : ' < br > ' ;
var o = this . options ; var helper:==:$ . is <CAM> function ( o . helper ) ? $ ( o . helper . apply ( this . element [ 0 ] , [ event , this . current <CAM> item ] ) ) : ( o . helper     ' clone ' ? this . current <CAM> item . clone ( ) : this . current <CAM> item ) ;
var plumber = require ( ' gulp - plumber ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var tab = tabs . focussed <CAM> tab ; var toggle:==:args . toggle  |  |  args . source     ' click ' ;
var average = results [ ' average ' ] ; var standard <CAM> deviation:==:results [ ' standard <CAM> deviation ' ] ;
var fill = $ ( ' . tg <UND> slider <UND> track <UND> fill ' , element ) var thumb:==:$ ( ' . tg <UND> slider <UND> thumb ' , element )
var assert = require ( ' assert ' ) ; var redis:==:config . redis ;
var points = result . points ; var rotation:==:result . rotation ;
var tape = require ( ' tape ' ) var stream:==:require ( ' readable - stream ' )
var cssmin = require ( ' gulp - cssmin ' ) ; var del:==:require ( ' del ' ) ;
var breakpoints = session . $ breakpoints ; var decorations:==:session . $ decorations ;
var events = require ( ' events - mixin ' ) ; var matches:==:require ( ' matches - selector ' ) ;
var techniques = model . gltf . techniques ; var technique:==:techniques [ i d ] ;
var option = _ ref2 . option ; var options:==:_ ref2 . options ;
var fs = require ( ' fs ' ) ; var chevrotain:==:require ( ' chevrotain ' ) ;
var randi = global . randi ; var Net:==:global . Net ;
var M = this . MAX <UND> TURN <UND> SPEED ; var dir:==:old . dir ;
var expand <CAM> member <CAM> lookup <CAM> expression = traceur . codegeneration . expand <CAM> member <CAM> lookup <CAM> expression ; var create <CAM> argument <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> argument <CAM> list ;
var channel = this . _ channel = Radio . channel ( channel <CAM> name ) ; var radio <CAM> events:==:_ . result ( this , ' radio <CAM> events ' ) ;
var b = element . find ( ' b ' ) ; var i:==:element . find ( ' i ' ) ;
var draw <CAM> line = drawAPI . draw <CAM> line ; var check <CAM> line <CAM> intersection:==:drawAPI . check <CAM> line <CAM> intersection ;
var destination = this . destination ; var buffers:==:this . buffers ;
var exec = require ( ' child <UND> process ' ) . exec <CAM> sync ; var plumber:==:require ( ' gulp - plumber ' ) ;
var node3 = new goog . ui . tree . tree <CAM> node ( ' node3 ' ) ; var node4:==:new goog . ui . tree . tree <CAM> node ( ' node4 ' ) ;
var p = new operator <CAM> node ( ' ^ ' , ' pow ' , [ o , a ] ) ; var n:==:new function <CAM> assignment <CAM> node ( ' f ' , [ ' x ' ] , p ) ;
var dict = data . sys . dict ; var protos:==:data . sys . protos ;
var netutil = require ( ' netutil ' ) ; var connect:==:require ( ' connect ' ) ;
var call = Function . prototype . call . call . bind ( Function . prototype . call ) var get <CAM> own <CAM> property <CAM> names:==:Object . get <CAM> own <CAM> property <CAM> names ;
var lstat = require ( ' graceful - fs ' ) . lstatvar readlink:==:require ( ' graceful - fs ' ) . readlink
var speed = e . coords . speed ; var timestamp:==:e . coords . timestamp ;
var params = func [ ' ( params ) ' ] . slice ( ) ; var param:==:params . pop ( ) ;
var cols = this . cols . groups ; var rows:==:this . rows . groups ;
var element = _ angular . element ; var is <CAM> element:==:_ angular . is <CAM> element ;
var viewport = goog . style . get <CAM> visible <CAM> rect <CAM> for <CAM> element ( viewport <CAM> elt ) ; var margin:==:opt <UND> margin ?
var child <UND> process = require ( ' child <UND> process ' ) ; var exec:==:child <UND> process . exec ;
var group <CAM> keys = this . _ group <CAM> keys ; var group <CAM> key:==:item . group <CAM> key ;
var y = e . heading . y ; var z:==:e . heading . z ;
var set <CAM> val = foreign . set <CAM> val ; var get <CAM> val:==:foreign . get <CAM> val ;
var node <CAM> from = adj . node <CAM> from ; var node <CAM> to:==:adj . node <CAM> to ;
var samples = options . samples ; var cpu <CAM> sync:==:options . cpu <CAM> sync ;
var url = e . url ; var decode:==:typeof e . decode      ' undefined ' ;
var year = calendar . month . year ( ) ; var hour:==:calendar . month . hour ( ) ;
var is <CAM> fragmented = config . is <CAM> fragmented ; var fragmented <CAM> tracks:==:config . fragmented <CAM> tracks ;
var line <CAM> break <CAM> after <CAM> opening <CAM> brace = this . _ line <CAM> break <CAM> after <CAM> opening <CAM> brace ; var line <CAM> break <CAM> before <CAM> closing <CAM> brace:==:this . _ line <CAM> break <CAM> before <CAM> closing <CAM> brace ;
var item = items [ i ] ; var items <CAM> to <CAM> remove:==:item . items <CAM> to <CAM> remove ;
var split = require ( ' split ' ) var adbkit:==:require ( ' adbkit ' )
var column <CAM> min <CAM> width = _ props . column <CAM> min <CAM> width ; var column <CAM> count:==:_ props . column <CAM> count ;
var shell = require ( ' gulp - shell ' ) ; var webpack:==:require ( ' webpack ' ) ;
var scope = widget . element . scope ( ) ; var footer:==:q <CAM> unit . fixture . find ( ' select ' ) . get <CAM> kendo <CAM> combo <CAM> box ( ) . footer ;
var cross <CAM> page <CAM> channel <CAM> role = goog . net . xpc . cross <CAM> page <CAM> channel <CAM> role ; var transport <CAM> types:==:goog . net . xpc . transport <CAM> types ;
var POINTER <UND> PEN = gesture <CAM> detector . POINTER <UND> PEN = ' pen ' ; var EVENT <UND> START:==:gesture <CAM> detector . EVENT <UND> START    ' start ' ;
var React = require ( ' React ' ) ; var progress <CAM> bar:==:require ( ' progress <CAM> bar <CAM> android ' ) ;
var b = this . b ; var n:==:this . n ;
var toast <CAM> android = require ( ' toast <CAM> android ' ) ; var Platform:==:require ( ' Platform ' ) ;
var range <CAM> error = errors . range <CAM> error ; var type <CAM> error:==:errors . type <CAM> error ;
var message = _ ref2 . message ; var assert:==:_ ref2 . assert ;
var include <CAM> fields = options [ ' include <CAM> fields ' ]  |  |  this . fields <CAM> included <CAM> with <CAM> json <CAM> post ; var url:==:url <CAM> or <CAM> form ;
var jump <CAM> list = start <CAM> screen . jump <CAM> list ; var jump <CAM> list <CAM> item:==:start <CAM> screen . jump <CAM> list <CAM> item ;
var creators = opts . creators  |  |  [ ] ; var role:==:opts . role  |  |  ' initiator ' ;
var selected <CAM> indices = that . _ selected <CAM> indices ; var data <CAM> items:==:that . _ data <CAM> items ;
var x = transform . x ; var y:==:transform . y ;
var identifier <CAM> expression = traceur . syntax . trees . identifier <CAM> expression ; var if <CAM> statement:==:traceur . syntax . trees . if <CAM> statement ;
var gl = render <CAM> session . gl ; var projection:==:render <CAM> session . projection ;
var rn <CAM> tester <CAM> block = require ( ' rn <CAM> tester <CAM> block ' ) ; var rn <CAM> tester <CAM> page:==:require ( ' rn <CAM> tester <CAM> page ' ) ;
var uglify   = require ( ' gulp - uglify ' ) var cssmin:==:require ( ' gulp - cssmin ' )
var cache = imports [ ' vfs . cache ' ] ; var error:==:require ( ' http - error ' ) ;
var PROPER = module . exports . PROPER = 80 ; var MAYBE <UND> PROPER:==:module . exports . MAYBE <UND> PROPER    1 ;
var identifier <CAM> token = traceur . syntax . identifier <CAM> token ; var parse <CAM> tree <CAM> type:==:traceur . syntax . parse <CAM> tree <CAM> type ;
var organization <CAM> name = $ ( ' # organization <CAM> name ' ) . val ( ) ; var job <CAM> name:==:$ ( ' # job <CAM> name ' ) . val ( ) ;
var e = event  |  |  window . event ; var target:==:e . target  |  |  e . src <CAM> element ;
var _ gd = 99 ; values [ _ gd ] = _ gd ; var _ ge:==:100 ; values [ _ ge ]    _ ge ;
var nodes = cluster . nodes ( data ) ; var links:==:cluster . links ( nodes ) ;
var width = view . width , height = view . height ; var canvas:==:d3 . select ( document . create <CAM> element ( ' canvas ' ) ) . attr ( ' width ' , width ) . attr ( ' height ' , height ) . node ( ) ;
var merge <CAM> phase <CAM> name <CAM> lists = require ( ' loopback - phase ' ) . merge <CAM> phase <CAM> name <CAM> lists ; var debug:==:require ( ' debug ' ) ( ' loopback : app ' ) ;
var encode <CAM> entity <CAM> ranges = require ( ' encode <CAM> entity <CAM> ranges ' ) ; var encode <CAM> inline <CAM> style <CAM> ranges:==:require ( ' encode <CAM> inline <CAM> style <CAM> ranges ' ) ;
var canvas = stage . canvas ; var f:==:stage . _ _ touch . f    function ( e ) Touch . _ IE <UND> handleEvent ( stage , e ) ; ;
var path = require ( ' path ' ) ; var webdriver:==:require ( ' selenium - webdriver ' ) ;
var touch = _ props . touch ; var vertical <CAM> position:==:_ props . vertical <CAM> position ;
var brown700 = exports . brown700 = ' # 5d4037 ' ; var brown800:==:exports . brown800    ' # 4e342e ' ;
var z = zlevel <CAM> list [ i ] ; var layer:==:this . _ layers [ z ] ;
var binary = apf . has <CAM> xhr <CAM> binary & & options . binary ; var async:==:options . async    ( options . async  |  |  binary
var config = this . config ; var line <CAM> height:==:config . line <CAM> height ;
var helper = this . helper ; var params:==:this . params ;
var content = this . content [ 0 ] ; var scroll <CAM> top:==:content . scroll <CAM> top ;
var d = speed : 50 , wiggles : 3 , travel : 5 , callback : null ; var o:==:j <CAM> query . extend ( d , o ) ;
var length   = options . length ; var anchor:==:options . anchor  |  |  source . position ;
var now = julian <CAM> date . now ( ) ; var refresh <CAM> mode:==:network <CAM> link . refresh <CAM> mode ;
var FIELD <UND> NAME = ' FIELD <UND> NAME ' ; var LABEL0:==:' LABEL0 ' ;
var J   = this . J ; var options:==:this . options ;
var s = goog . vec . vec3f . create <CAM> from <CAM> values ( 6 , 7 , 8 ) ; var o:==:goog . vec . vec3f . create <CAM> from <CAM> values ( 9 , 10 , -11 ) ;
var alert = imports [ ' dialog . alert ' ] . show ; var question:==:imports [ ' dialog . question ' ] ;
var width = this . canvas _ . width ; var height:==:this . canvas _ . height ;
var buffer = require ( ' vinyl - buffer ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var px = ' px ' ; var style:==:this . element _ . style ;
var create <CAM> factory = function create <CAM> factory ( type ) var is <CAM> referentially <CAM> transparent:==:( 0 , _ is <CAM> referentially <CAM> transparent <CAM> function <CAM> component2 . default ) ( type ) ;
var scroll <CAM> left = container . scroll <CAM> left ; var scroll <CAM> top:==:container . scroll <CAM> top ;
var additional = settings . additional ; var non <CAM> terminated:==:settings . non <CAM> terminated ;
var path   = require ( ' path ' ) ; var sinon:==:require ( ' sinon ' ) ;
var auth = params . authvar name:==:params . username  |  |  ( auth & & auth . username )
var try <CAM> catch4 = util . try <CAM> catch4 ; var try <CAM> catch3:==:util . try <CAM> catch3 ;
var name = url . hostname . replace ( ' . host ' , '' ) ; var server:==:this . server [ name ] ;
var min = stdlib . Math . min ; var max:==:stdlib . Math . max ;
var axis <CAM> pointer <CAM> model = axis <CAM> info . axis <CAM> pointer <CAM> model ; var scale:==:axis <CAM> info . axis . scale ;
var color <CAM> helper = powerbi . visuals . color <CAM> helper ; var svg <CAM> util:==:powerbi . visuals . svg <CAM> util ;
var ex = step . ex ; var ey:==:step . ey ;
var row = kv <CAM> docs <CAM> res . rows [ i ] ; var doc:==:row . doc ;
var scale = options . scale ! = = undefined ? options . scale : 1 ; var snap <CAM> to <CAM> pixel:==:options . snap <CAM> to <CAM> pixel !    undefined ?
var log = options . log ? ( _ . is <CAM> function ( options . log ) ? options . log : console . log ) : false ; var log <CAM> period:==:options . log <CAM> period  |  |  10 ;
var week = $ ( document . create <CAM> element ( ' div ' ) ) . attr ( ' i d ' , ' cal - week - box ' ) ; var start:==:this . options . position . start . get <CAM> full <CAM> year ( ) + ' - ' + this . options . position . start . get <CAM> month <CAM> formatted ( ) + ' - ' ;
var speed = options . speed  |  |  100 ; var while <CAM> true:==:options . while <CAM> true  |  |  null ;
var Identify = Facade . Identify ; var Page:==:Facade . Page ;
var stack = this . stacks [ fontstack ] ; var atlas:==:this . atlases [ fontstack ] ;
var create <CAM> block = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> block ; var create <CAM> boolean <CAM> literal:==:traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> boolean <CAM> literal ;
var fork = require ( ' child <UND> process ' ) . fork ; var assert:==:require ( ' assert ' ) ;
var image = this . image ; var rotate:==:image . rotate  |  |  0 ;
var path = require ( ' path ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var presets = ( options . presets  |  |  [ ] ) . map ( function ( preset <CAM> name ) var preset:==:load <CAM> builtin ( available <CAM> presets , preset <CAM> name ) ;
var sum64 <UND> 4 <UND> lo = utils . sum64 <UND> 4 <UND> lo ; var sum64 <UND> 5 <UND> hi:==:utils . sum64 <UND> 5 <UND> hi ;
var title = $ ( this ) . attr ( ' gs <UND> title ' ) ? $ ( this ) . attr ( ' gs <UND> title ' ) : '' ; var width:==:$ ( this ) . attr ( ' gs <UND> width ' ) ;
var line <CAM> node = line <CAM> entry . line <CAM> node ; var n:==:line <CAM> node ;
var bower = require ( ' bower ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var context <CAM> key = ref . context <CAM> key ; if ( context <CAM> key = = = void 0 ) context <CAM> key = ' state ' ; var window <CAM> key:==:ref . window <CAM> key ; if ( window <CAM> key      void 0 ) window <CAM> key    ' _ _ INITIAL <UND> STATE _ _ ' ;
var loaded = bind ( this , this . loaded ) ; var ready:==:this . ready ;
var menus = imports . menus ; var settings:==:imports . settings ;
var OBJECT <UND> LITERAL <UND> EXPRESSION = ' OBJECT <UND> LITERAL <UND> EXPRESSION ' ; var OBJECT <UND> PATTERN:==:' OBJECT <UND> PATTERN ' ;
var async = require ( ' async ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var x = options . x  |  |  iota ( shape [ 0 ] ) var y:==:options . y  |  |  iota ( shape [ 1 ] )
var tweet = tweets [ c ] . text ; var user:==:tweets [ c ] . user . screen <UND> name ;
var index = store . get <CAM> index ( ' index ' ) ; var unique <CAM> index:==:store . get <CAM> index ( ' unique <CAM> index ' ) ;
var a = new node <CAM> test <CAM> name ( expr . substr ( 1 ) ) ; var b:==:new step <CAM> expr ( ' attribute ' , a ) ;
var conf = env . conf ; var indent:==:env . conf . examples & & env . conf . examples . indent ? env . conf . examples . indent : 2 ;
var arrow <CAM> function <CAM> expression = traceur . syntax . trees . arrow <CAM> function <CAM> expression ; var at <CAM> name <CAM> declaration:==:traceur . syntax . trees . at <CAM> name <CAM> declaration ;
var fulfill = follower . _ fulfillment <CAM> handler <CAM> at ( index ) ; var reject:==:follower . _ rejection <CAM> handler <CAM> at ( index ) ;
var prev = j <CAM> query ( ' # firstp ' ) [ 0 ] . previous <CAM> sibling ; var p:==:j <CAM> query ( ' # first ' ) [ 0 ] . parent <CAM> node ;
var def = accent : true ; if ( this . stack . env . font ) def . mathvariant = this . stack . env . fontvar mml:==:this . mml <CAM> token ( MML . mo ( MML . entity ( ' # x'+accent ) ) . With ( def ) ) ;
var bar <CAM> class <CAM> failure = options . bar <CAM> class <CAM> failure  |  |  ' bar - danger ' ; var output <CAM> class <CAM> success:==:options . output <CAM> class <CAM> success  |  |  ' ' ;
var options = that . options ; var resizable:==:options . resizable ;
var is <CAM> string = string . is <CAM> string ; var validate <CAM> index:==:array . validate <CAM> index ;
var vizion = require ( ' vizion ' ) ; var child:==:require ( ' child <UND> process ' ) ;
var updatable = options . updatable ; var on <CAM> ready:==:options . on <CAM> ready ;
var o1 = foo : foo1 , that1 : ' that1 ' ; var o2:==:foo : foo2 , that2 : ' that2 ' ;
var is <CAM> zero = math . is <CAM> zero ; var bignumber:==:math . bignumber ;
var _ strcasecmp = Module [ ' _ strcasecmp ' ] = asm [ ' _ strcasecmp ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var menus = imports . menus ; var watcher:==:imports . watcher ;
var min = Math . floor ( min <CAM> float ) ; var sec:==:Math . round ( sec <CAM> float * 100 ) ;
var values = json . values ; var animate:==:this . config . animate ;
var sources = item . sources ; var androidhls:==:model . get ( ' androidhls ' ) ;
var options = self . options ; var container:==:self . container ;
var file <CAM> path = event . data . file <CAM> path ; var handler <CAM> path:==:event . data . handler <CAM> path ;
var assert = util . assert ; var Deferred:==:util . Deferred ;
var position = entity . position ; var show:==:box . show ;
var repeat = action <CAM> args . repeat ; var forward:==:action <CAM> args . forward ;
var object <CAM> descriptors = transform <CAM> context . object <CAM> descriptors ; var projection <CAM> ordering:==:transform <CAM> context . projection <CAM> ordering ;
var start = this . start ; var stop:==:this . stop ;
var transaction = db . transaction ( places <CAM> helper . SITES <UND> STORE , ' readwrite ' ) ; var object <CAM> store:==:transaction . object <CAM> store ( places <CAM> helper . SITES <UND> STORE ) ;
var x <CAM> scale = axis <CAM> options . x <CAM> scale , y <CAM> scale = axis <CAM> options . y <CAM> scale , scaledY0 = y <CAM> scale ( 0 ) , scaledX0 = x <CAM> scale ( 0 ) , border <CAM> width = mekko <CAM> column <CAM> chart . get <CAM> border <CAM> width ( data . border <CAM> settings ) , column <CAM> width <CAM> scale = function ( d ) var value:==:axis <CAM> helper . diff <CAM> scaled ( x <CAM> scale , d . value , 0 ) ;
var t0 = shape . t0 ; var t1:==:shape . t1 ;
var width = this . attribute ( ' width ' ) . Length . to <CAM> pixels ( ' x ' ) ; var height:==:this . attribute ( ' height ' ) . Length . to <CAM> pixels ( ' y ' ) ;
var pixel <CAM> ratio = plot . pixel <CAM> ratiovar color:==:this . color
var debug = require ( ' debug ' ) ( ' pm2 : serve ' ) ; var probe:==:require ( ' pmx ' ) . probe ( ) ;
var is <CAM> installable = module . exports . is <CAM> installable = function ( pkg , next ) var force:==:npm . config . get ( ' force ' )
var params = ob . params ; var app <UND> id:==:params . qstring . app <UND> id ;
var on <CAM> cell <CAM> edit = this . props . options . on <CAM> cell <CAM> edit ; var after <CAM> save <CAM> cell:==:this . props . cell <CAM> edit . after <CAM> save <CAM> cell ;
var meta <CAM> key = default <CAM> value ( options . meta <CAM> key , false ) ; var button:==:default <CAM> value ( options . button , 0 ) ;
var tickX   = this . tickX [ axis ] var tick <CAM> offset:==:this . tick <CAM> offset [ axis ]
var foo = bar`wow\na$ 42 b $ _ . foobar ( ) ` ; var bar:==:bar`wow\nab$ 42 $ _ . foobar ( ) ` ;
var replace = require ( ' gulp - replace ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var grunt = require ( ' grunt ' ) ; var phantomjs:==:require ( ' grunt - lib - phantomjs ' ) . init ( grunt ) ;
var shader = this . shadervar bounds:==:this . bounds
var Map    = require ( ' immutable ' ) . Map ; var fromJS:==:require ( ' immutable ' ) . fromJS ;
var scroll <CAM> content <CAM> height = this . state . scroll <CAM> content <CAM> height ; var reserved <CAM> height:==:this . state . reserved <CAM> height ;
var header <CAM> size = ( this . options . header <CAM> size ! = = undefined ) ? this . options . header <CAM> size : _ resolve <CAM> node <CAM> size . call ( this , this . header , this . options . default <CAM> header <CAM> size ) ; var footer <CAM> size:==:( this . options . footer <CAM> size !    undefined ) ? this . options . footer <CAM> size : _ resolve <CAM> node <CAM> size . call ( this , this . footer , this . options . default <CAM> footer <CAM> size ) ;
var raygun = imports . raygun ; var error <CAM> client:==:raygun . error <CAM> client ;
var el = this . el ; var animation <CAM> frameid:==:el . animation <CAM> frameid ;
var type = ref . type ; var timeout:==:ref . timeout ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var set = Ember . set ; var attr:==:DS . attr ;
var callback <CAM> name = args . callback <CAM> name  |  |  ' _ mithril _ ' + Math . round ( Math . random ( ) * 1e16 ) + ' _ ' + callback <CAM> count++var script:==:$ window . document . create <CAM> element ( ' script ' )
var p2 = input . p2 ; var r:==:b2 <CAM> math . SubtractVV ( p1 , p2 ) ;
var size = options . size  |  |  new BABYLON . Vector3 ( 1 , 1 , 1 ) ; var angle:==:options . angle  |  |  0 ;
var hit <CAM> point = intersectPlane <UND> hitPoint ; var normal:==:intersectPlane <UND> normal ;
var ui <CAM> source <CAM> code = breakpoint . ui <CAM> source <CAM> code ( ) ; var breakpoints:==:ui <CAM> source <CAM> code ? this . _ breakpoints <CAM> for <CAM> primaryui <CAM> source <CAM> code . get ( ui <CAM> source <CAM> code )  |  |  [ ] : [ ] ;
var name = node . name ; var parent:==:node . parent ;
var aoa = aoasht [ 0 ] , ws = aoasht [ 1 ] ; var o:==:aoa <UND> to <UND> sheet ( aoa , opts ) ;
var create <CAM> enum <CAM> type = powerbi . create <CAM> enum <CAM> type ; var legend <CAM> data:==:powerbi . visuals . legend <CAM> data ;
var row <CAM> index = _ ref3 . row <CAM> index ; var cell <CAM> renderer:==:this . props . cell <CAM> renderer ;
var s = selection <CAM> id & & Circles . find <CAM> one ( selection <CAM> id ) ; var rect:==:d3 . select ( self . node ) . select ( ' rect ' ) ;
var i d = layout . i d ; var origin:==:layout . origin ;
var a = a <CAM> obj . _ start <CAM> datems ; var b:==:b <CAM> obj . _ start <CAM> datems ;
var sb = this . sb ; var graph:==:sb . graph ;
var Plugin = imports . Plugin ; var connect:==:imports [ ' collab . connect ' ] ;
var os = require ( ' os ' ) ; var v8:==:process . versions . v8 ;
var w = Math . min ( 16 , ( this . _ FBU . x + this . _ FBU . width ) - x ) ; var h:==:Math . min ( 16 , ( this . _ FBU . y + this . _ FBU . height ) - y ) ;
var static <CAM> error = Errors . static <CAM> error ; var static <CAM> warning:==:Errors . static <CAM> warning ;
var visible <CAM> group <CAM> container = this . visible <CAM> group <CAM> container ; var total <CAM> rows:==:this . _ total <CAM> rows ;
var path = require ( ' path ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var warp = require ( ' ndarray - warp ' ) var invert:==:require ( ' gl - matrix - invert ' )
var visual <CAM> map <CAM> model = this . visual <CAM> map <CAM> model ; var handle <CAM> ends:==:this . _ handle <CAM> ends ;
var dataset = this . chart . data . datasets [ arc . _ dataset <CAM> index ] ; var index:==:arc . _ index ;
var selectors <CAM> interface = scope . selectors <CAM> interface ; var mixin:==:scope . mixin ;
var base <CAM> test <CAM> channel = goog . labs . net . web <CAM> channel . base <CAM> test <CAM> channel ; var channel <CAM> request:==:goog . labs . net . web <CAM> channel . channel <CAM> request ;
var util = imports . util ; var run:==:imports . run ;
var list = this . _ list ; var group <CAM> key:==:list . get <CAM> item <CAM> from <CAM> key ( key ) . group <CAM> key ;
var heap = this . _ heap ; var values:==:this . _ values ;
var Util = shared <CAM> util . Util ; var Ref:==:core <CAM> primitives . Ref ;
var made = self . _ made <CAM> dirvar d:==:path . dirname ( p )
var format = require ( ' url ' ) . format ; var resolve:==:require ( ' url ' ) . resolve ;
var total <CAM> rows = this . wt <CAM> settings . get <CAM> setting ( ' total <CAM> rows ' ) ; var fixed <CAM> rows <CAM> top:==:this . wt <CAM> settings . get <CAM> setting ( ' fixed <CAM> rows <CAM> top ' ) ;
var direction = detail . direction ; var angle:==:detail . angle ;
var set <CAM> normalized <CAM> color <CAM> alpha = require ( ' set <CAM> normalized <CAM> color <CAM> alpha ' ) ; var normalize <CAM> color:==:require ( ' normalize <CAM> color ' ) ;
var util = imports . util ; var undo <CAM> manager:==:imports . undo <CAM> manager ;
var x <CAM> align = vm . x <CAM> align ; var y <CAM> align:==:vm . y <CAM> align ;
var faces = this . faces ; var vertices:==:this . vertices ;
var axis <CAM> scale = powerbi . visuals . axis <CAM> scale ; var value <CAM> formatter:==:powerbi . visuals . value <CAM> formatter ;
var granularity = geometry . _ granularity ; var corner <CAM> type:==:geometry . _ corner <CAM> type ;
var entry <CAM> point <CAM> name = scope . entry <CAM> point <CAM> name ; var process <CAM> flags:==:scope . process <CAM> flags ;
var draw <CAM> month = inst . draw <CAM> month - show <CAM> current <CAM> at <CAM> pos ; var draw <CAM> year:==:inst . draw <CAM> year ;
var x = cc . bezier <CAM> at ( xa , xb , xc , xd , dt ) ; var y:==:cc . bezier <CAM> at ( ya , yb , yc , yd , dt ) ;
var click <CAM> callback = g . get <CAM> function <CAM> option ( ' click <CAM> callback ' ) ; var point <CAM> click <CAM> callback:==:g . get <CAM> function <CAM> option ( ' point <CAM> click <CAM> callback ' ) ;
var without <CAM> root = options . without <CAM> root ; var root:==:options . root  |  |  jsbin . root ;
var utils = elliptic . utils ; var assert:==:utils . assert ;
var d16 = _ add <CAM> div ( ' d16 ' ) , d17 = _ add <CAM> div ( ' d17 ' ) ; var conn:==:_ js <CAM> plumb . connect ( source : d16 , target : d17 , endpoint : ' Blank ' ) ;
var output = imports . output ; var fs:==:imports . fs ;
var crypto = require ( ' crypto ' ) ; var assert:==:require ( ' assert ' ) ;
var DOM = dom <CAM> utils . DOM ; var explode:==:Tools . explode , each    Tools . each , extend    Tools . extend ;
var byte <CAM> offset = buffer <CAM> view . byte <CAM> offset + byte <CAM> offset ; var loaded <CAM> buffer <CAM> view:==:gltf <CAM> runtime . loaded <CAM> buffer <CAM> views [ buffer <CAM> view . buffer ] ;
var start = options . start ; var stop:==:options . stop ;
var word <CAM> array = C <UND> lib . word <CAM> array ; var Hasher:==:C <UND> lib . Hasher ;
var main <CAM> group = this . _ create <CAM> group ( ' main <CAM> group ' ) ; var label <CAM> group:==:this . _ create <CAM> group ( ' label <CAM> group ' ) ;
var exp = expected . key <CAM> path ; var act:==:actual . key <CAM> path ;
var previoushmd <CAM> position = this . previoushmd <CAM> position ; var scene <CAM> el:==:this . el . scene <CAM> el ;
var label <CAM> key = _ ref . label <CAM> key ; var options:==:_ ref . options ;
var a = new PolyK . _ P ( ax , ay ) ; var b:==:new PolyK . _ P ( bx , by ) ;
var APN <UND> PROPERTIES = apn <CAM> editor <CAM> const . APN <UND> PROPERTIES ; var VALUE <UND> CONVERTERS:==:apn <CAM> editor <CAM> const . VALUE <UND> CONVERTERS ;
var ref = self . $ ref ( ) ; var def:==:$ q . defer ( ) ;
var c = ( influences <CAM> per <CAM> vertex > 2 ) ? json . skin <CAM> indices [ i + 2 ] : 0 ; var d:==:( influences <CAM> per <CAM> vertex > 3 ) ? json . skin <CAM> indices [ i + 3 ] : 0 ;
var min <UND> x = Math . floor ( xs - radius ) ; if ( min <UND> x < 1 ) min <UND> x = 1 ; var max <UND> x:==:Math . floor ( xs + radius ) ; if ( max <UND> x > this . size - 1 ) max <UND> x    this . size - 1 ;
var version = properties [ ' ro . build . version . release ' ] var sdk:==:properties [ ' ro . build . version . sdk ' ]
var col = grid . columns [ 2 ] ; var row:==:grid . rows [ 2 ] ;
var start = document . get <CAM> element <CAM> by <CAM> id ( ' start ' ) ; var stop:==:document . get <CAM> element <CAM> by <CAM> id ( ' stop ' ) ;
var left = crop <CAM> box . left - canvas . left - image . left ; var top:==:crop <CAM> box . top - canvas . top - image . top ;
var querystring = require ( ' querystring ' ) ; var typer:==:require ( ' media - typer ' ) ;
var first <CAM> row = config . first <CAM> row ; var last <CAM> row:==:config . last <CAM> row ;
var is <CAM> function = _ _ dependency2 _ _ . is <CAM> function ; var now:==:_ _ dependency2 _ _ . now ;
var local <CAM> store = require ( ' olives ' ) . local <CAM> store ; var Store:==:require ( ' emily ' ) . Store ;
var index = s . index <CAM> of ( ' ' ) ; var s:==:s ;
var values = result . values ; var highlights:==:result . highlights ;
var required <CAM> first = configuration . required <CAM> first  |  |  false ; var callbacks <CAM> last:==:configuration . callbacks <CAM> last  |  |  false ;
var sort <CAM> data   = method . sort <CAM> data ; var post <CAM> data:==:method . post <CAM> data ;
var enable <CAM> collision <CAM> detection = screen <CAM> space <CAM> camera <CAM> controller . enable <CAM> collision <CAM> detection ; var minimum <CAM> collision <CAM> terrain <CAM> height:==:screen <CAM> space <CAM> camera <CAM> controller . minimum <CAM> collision <CAM> terrain <CAM> height ;
var float32 <CAM> array = this . float32 <CAM> array ; var uint32 <CAM> array:==:this . uint32 <CAM> array ;
var encodeHTML = format <CAM> util . encodeHTML ; var bind:==:zr <CAM> util . bind ;
var maximum <CAM> renderbuffer <CAM> size = context <CAM> limits . maximum <CAM> renderbuffer <CAM> size ; var format:==:default <CAM> value ( options . format , renderbuffer <CAM> format . RGBA4 ) ;
var width = e . dygraph . width _ ; var height:==:e . dygraph . height _ ;
var normal = intersectPlane <UND> normal ; var len:==:intersectPlane <UND> len ;
var os   = require ( ' os ' ) ; var proc:==:require ( ' child <UND> process ' )
var format = default <CAM> value ( options . format , renderbuffer <CAM> format . RGBA4 ) ; var width:==:defined ( options . width ) ? options . width : gl . drawing <CAM> buffer <CAM> width ;
var render <CAM> thead = function render <CAM> thead ( $ table , data ) var columns:==:data . columns  |  |  [ ] ;
var text <CAM> content = Object . get <CAM> own <CAM> property <CAM> descriptor ( Node . prototype , ' text <CAM> content ' ) ; var remove <CAM> attribute:==:html <CAM> element . prototype . remove <CAM> attribute ;
var ui <UND> locales = _ ref . ui <UND> locales ; var acr <UND> values:==:_ ref . acr <UND> values ;
var record <UND> include <UND> mousemove = Test . another <CAM> way . _ record <UND> control <UND> get <UND> element ( ' record <UND> include <UND> mousemove ' ) ; var record <UND> omit <UND> mousemove:==:Test . another <CAM> way . _ record <UND> control <UND> get <UND> element ( ' record <UND> omit <UND> mousemove ' ) ;
var cli = imports [ ' vim . cli ' ] ; var c9:==:imports . c9 ;
var mailer = require ( ' nodemailer ' ) ; var assert:==:require ( ' assert ' ) ;
var menu <CAM> item = imports . menu <CAM> item ; var tab <CAM> manager:==:imports . tab <CAM> manager ;
var new <CAM> value = event . detail . new <CAM> value ; var old <CAM> item:==:event . detail . old <CAM> item ;
var url = ( typeof this . url ! = ' object ' ? this . url : this . url . get ) ; var sel:==:this . last . selection ;
var intersection = intersections [ 0 ] ; var point:==:intersection . point ;
var l = walk ( node . left ) ; var r:==:walk ( node . right ) ;
var g = Math . floor ( color . g * 255 ) ; var b:==:Math . floor ( color . b * 255 ) ;
var flags = Loader . flags ; var flags:==:Loader . flags ;
var only <CAM> active <CAM> on <CAM> index = _ props2 . only <CAM> active <CAM> on <CAM> index ; var props:==:_ object <CAM> without <CAM> properties ( _ props2 , [ ' to ' , ' query ' , ' hash ' , ' state ' , ' active <CAM> class <CAM> name ' , ' active <CAM> style ' , ' only <CAM> active <CAM> on <CAM> index ' ] ) ;
var c = fulfill <CAM> thenable <CAM> soon ( ' c ' , 10 ) ; var d:==:fulfill <CAM> thenable <CAM> soon ( ' d ' , 20 ) ;
var _ main = Module [ ' _ main ' ] = asm [ ' _ main ' ] ; var _ test <CAM> setjmp:==:Module [ ' _ test <CAM> setjmp ' ]    asm [ ' _ test <CAM> setjmp ' ] ;
var _ ae = 4 ; values [ _ ae ] = _ ae ; var _ af:==:5 ; values [ _ af ]    _ af ;
var color <CAM> helper = powerbi . visuals . color <CAM> helper ; var selection <CAM> id:==:powerbi . visuals . selection <CAM> id ;
var main = ' main ' ; var ams:==:' ams ' ;
var fs = require ( ' fs ' ) ; var base:==:fs . read <CAM> file <CAM> sync ( ' base . html ' ) . to <CAM> string ( ) ;
var Thing = db . model ( ' Thing4104 ' , thing <CAM> schema ) ; var Person:==:db . model ( ' Person4104 ' , person <CAM> schema ) ;
var workspace = Blockly . Workspace . get <CAM> by <CAM> id ( this . workspace <CAM> id ) ; var block:==:workspace . get <CAM> block <CAM> by <CAM> id ( this . block <CAM> id ) ;
var camera = frame <CAM> state . camera ; var mode:==:frame <CAM> state . mode ;
var algo = aesid [ data . algorithm . decrypt . cipher . algo . join ( ' . ' ) ] var iv:==:data . algorithm . decrypt . cipher . iv
var r = frustum . right ; var l:==:frustum . left ;
var connection = client . connection ; var queries:==:connection . queries ;
var attributes = technique . attributes ; var uniforms:==:technique . uniforms ;
var settings = imports . settings ; var commands:==:imports . commands ;
var block <CAM> def <CAM> check = document . get <CAM> element <CAM> by <CAM> id ( ' block <CAM> def <CAM> check ' ) ; var gen <CAM> stub <CAM> check:==:document . get <CAM> element <CAM> by <CAM> id ( ' gen <CAM> stub <CAM> check ' ) ;
var level = _ levelvar message:==:_ message
var get <CAM> value = local <CAM> utils . get <CAM> value ; var parse <CAM> field:==:local <CAM> utils . parse <CAM> field ;
var outline <CAM> color = Property . get <CAM> value <CAM> or <CAM> default ( this . _ outline <CAM> color <CAM> property , time , Color . BLACK ) ; var distance <CAM> display <CAM> condition:==:this . _ distance <CAM> display <CAM> condition <CAM> property . get <CAM> value ( time ) ;
var polylines = collection . _ polylines ; var length:==:polylines . length ;
var DOCUMENT <UND> FRAGMENT <UND> NODE   = node <CAM> type . DOCUMENT <UND> FRAGMENT <UND> NODE   = 11 ; var NOTATION <UND> NODE:==:node <CAM> type . NOTATION <UND> NODE       12 ;
var build <CAM> select <CAM> check = function build <CAM> select <CAM> check ( ) var label:==:document . create <CAM> element ( ' label ' ) ;
var http = require ( ' http ' ) ; var mime:==:require ( ' mime ' ) ;
var auth = imports . auth ; var api:==:imports . api ;
var branch <CAM> collection = Collections . branch <CAM> collection ; var tag <CAM> collection:==:Collections . tag <CAM> collection ;
var cache1 = $ cache <CAM> factory ( ' cache1 ' ) ; var cache2:==:$ cache <CAM> factory ( ' cache2 ' ) ;
var commands = imports . commands ; var tabbehavior:==:imports . tabbehavior ;
var mongoose = require ( ' mongoose ' ) ; var Schema:==:mongoose . Schema ;
var element = this . _ . element ; var definition:==:this . definition ;
var w = this . size . w + ' px ' ; var h:==:this . size . h + ' px ' ;
var unicode <CAM> utils = require ( ' unicode <CAM> utils ' ) ; var get <CAM> range <CAM> client <CAM> rects:==:require ( ' get <CAM> range <CAM> client <CAM> rects ' ) ;
var to <CAM> string = Object . prototype . to <CAM> stringvar has <CAM> own <CAM> property:==:Object . prototype . has <CAM> own <CAM> property
var shadows <CAM> saturation = params . shadows <CAM> saturation ; var highlights <CAM> hue:==:params . highlights <CAM> hue ;
var old <CAM> value = that . _ old <CAM> value ; var value:==:that . value ( ) ;
var outer = ' outer ' ; var baz:==:' baz outer ' ;
var view <CAM> history = $ ionic <CAM> history . view <CAM> history ( ) ; var hist:==:( data . history <CAM> id ? view <CAM> history . histories [ data . history <CAM> id ] : null ) ;
var fs = imports . fs ; var Plugin:==:imports . Plugin ;
var pluck <CAM> fn = transform <CAM> utils . pluck <CAM> fn ; var identity:==:transform <CAM> utils . identity ;
var util = require ( ' util ' ) ; var assert:==:require ( ' assert ' ) ;
var file <CAM> properties = Windows . Storage . file <CAM> properties ; var Media:==:Windows . Media ;
var tap = require ( ' tap ' ) ; var test:==:tap . test ;
var set <CAM> birth <CAM> year = doc <CAM> set . get <CAM> by <CAM> longname ( ' set <CAM> birth <CAM> year ' ) [ 0 ] ; var set <CAM> dog <CAM> name:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' set <CAM> dog <CAM> name ' ) [ 0 ] ;
var renderers = window . _ _ REACT <UND> DEVTOOLS <UND> GLOBAL <UND> HOOK _ _ . _ renderers ; var renderer:==:renderers [ Object . keys ( renderers ) [ 0 ] ] ;
var def = this . definition ( ) ; var s:==:this . scope ;
var info = this . columns [ col <UND> ind ] . info ; var rec:==:this . records [ ind ] ;
var debug = options . debug ; var is <CAM> touch:==:options . is <CAM> touch ;
var hash = $ li <CAM> headsa . get ( key ) . hash . slice ( 1 ) ; var i d:==:_ _ WEBPACK <UND> IMPORTED <UND> MODULE <UND> 0 <UND> jquery <UND>  <UND>  <UND> default ( ) ( value ) . attr ( ' i d ' )  |  |  _ _ webpack <UND> require _ _ . i ( _ _ WEBPACK <UND> IMPORTED <UND> MODULE <UND> 2 <UND>  <UND> foundation <UND> util <UND> core _ _ [ ' get <CAM> yo <CAM> digits ' ] ) ( 6 , ' accordion ' ) ;
var L10n = navigator . mozL10n . _ get <CAM> internalapi ( ) ; var Context:==:L10n . Context ;
var grid   = this . gridvar line:==:this . line
var t = get <CAM> all ( target ) ; var s:==:get <CAM> all ( src ) ;
var x <CAM> formatter = series . x <CAM> formatter  |  |  this . x <CAM> formatter ; var y <CAM> formatter:==:series . y <CAM> formatter  |  |  this . y <CAM> formatter ;
var show <CAM> current <CAM> at <CAM> pos = this . _ get ( inst , ' show <CAM> current <CAM> at <CAM> pos ' ) ; var step <CAM> months:==:this . _ get ( inst , ' step <CAM> months ' ) ;
var port = uri . port  |  |  ( uri . protocol = = = ' https : ' ? ' 443 ' : ' 80 ' ) var hostname:==:format <CAM> hostname ( uri . hostname )
var d = _ d ; var s2:==:_ s2 ;
var _ ef = 69 ; values [ _ ef ] = _ ef ; var _ eg:==:70 ; values [ _ eg ]    _ eg ;
var Parent = Parse . Object . extend ( ' parent <CAM> object ' ) ; var Child:==:Parse . Object . extend ( ' child <CAM> object ' ) ;
var startrow = tile <CAM> layout . startrow ; var row <CAM> sign:==:this . row <CAM> sign ;
var width = layout <CAM> manager . width ; var height:==:layout <CAM> manager . height ;
var s = this ; var n:==:i . once ( function ( )
var first <CAM> edge <CAM> indexes = snapshot . _ first <CAM> edge <CAM> indexes ; var node <CAM> field <CAM> count:==:snapshot . _ node <CAM> field <CAM> count ;
var settings = imports . settings ; var Frame:==:debug . Frame ;
var gulp = require ( ' gulp ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var m = minutesvar s:==:seconds
var crypto = require ( ' crypto ' ) var rimraf:==:require ( ' rimraf ' )
var scm = imports . scm ; var c9:==:imports . c9 ;
var request <CAM> uri = pure ( data . request <CAM> uri ) var ext:==:path . extname ( request <CAM> uri )
var api = this . api ; var brush <CAM> type:==:this . _ brush <CAM> type ;
var style = options . style  |  |  ' ' ; var show <CAM> title:==:options . show <CAM> title  |  |  false ;
var point <CAM> primitives = point <CAM> primitive <CAM> collection . _ point <CAM> primitives ; var point <CAM> primitives <CAM> to <CAM> update:==:point <CAM> primitive <CAM> collection . _ point <CAM> primitives <CAM> to <CAM> update ;
var groups = geometry . groups ; var materials:==:material . materials ;
var _ str <UND> to <UND> html = Module . _ str <UND> to <UND> html ; var malloc:==:Module . _ malloc ;
var generics = options . generics ; var initialize:==:options . initialize ;
var prompt = require ( ' prompt ' ) ; var winston:==:require ( ' winston ' ) ;
var session = req . sessionvar auth:==:session & & session . auth ;
var deps = mod . deps ; var callback:==:mod . callback ;
var item = $ ( event . target ) . data ( ' item ' ) ; var name:==:item . data ( ' name ' ) ;
var ip = record . get ( ' ip ' ) ; var port:==:record . get ( ' port ' ) ;
var unsafe <CAM> unwrap = scope . unsafe <CAM> unwrap ; var enqueue <CAM> mutation:==:scope . enqueue <CAM> mutation ;
var skirt <CAM> height = this . _ skirt <CAM> height ; var exaggeration:==:this . _ mesh . exaggeration ;
var scale = ( event . original <CAM> event  |  |  event ) . scalevar index:==:this . index
var mixin = scope . mixin ; var one <CAM> of:==:scope . one <CAM> of ;
var test = refs . add ( get <CAM> type <CAM> test ( all <CAM> types [ i ] ) , ' test ' ) ; var convert:==:refs . add ( conversion <UND> i . convert , ' convert ' ) ;
var row <CAM> index = _ ref3 . row <CAM> index ; var row <CAM> wrapper <CAM> style:==:this . props . row <CAM> wrapper <CAM> style ;
var fixed <CAM> columns = coords . col < priv . fixed <CAM> columns ; var scrollable <CAM> element:==:this . hot . view . wt . wt <CAM> overlays . scrollable <CAM> element ;
var viewport = axes <CAM> layout . viewport ; var margin:==:axes <CAM> layout . margin ;
var _ window <CAM> time = this . _ window <CAM> time ; var events:==:this . events ;
var asset <CAM> registry = require ( ' asset <CAM> registry ' ) ; var Platform:==:require ( ' Platform ' ) ;
var origin = add <CAM> vector ( scale ( rays [ 0 ] . origin , xp ) , scale ( rays [ 1 ] . origin , 1 - xp ) ) ; var dir:==:normalise <CAM> vector ( add <CAM> vector ( scale ( rays [ 0 ] . dir , xp ) , scale ( rays [ 1 ] . dir , 1 - xp ) ) ) ;
var data = this . data ; var Shader:==:shaders [ shader <CAM> name ] & & shaders [ shader <CAM> name ] . Shader ;
var db = new PouchDB ( dbs . name ) ; var repl:==:db . replicate . to ( dbs . remote , retry : true , live : true ) ;
var create <CAM> assign <CAM> state <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> assign <CAM> state <CAM> statement ; var create <CAM> assignment <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> expression ;
var config = _ _ dependency10 _ _ . config ; var configure:==:_ _ dependency10 _ _ . configure ;
var p = this . properties ; var w:==:p . width ? s . width : 0 ;
var left <CAM> curly <CAM> count = this . left <CAM> curly <CAM> count ; var right <CAM> curly <CAM> count:==:this . right <CAM> curly <CAM> count ;
var config = ctx . config . highlight  |  |  ; var enable:==:config . enable ;
var Tokenizer = lexer . Tokenizer ; var Dict:==:definitions . Dict ;
var gulp    = require ( ' gulp ' ) ; var fs:==:require ( ' fs ' ) ;
var path = ref . path ; var query:==:ref . query ; if ( query      void 0 ) query    ;
var dwell <CAM> time <CAM> span = geofence <CAM> values . dwell <CAM> time <CAM> span ; var start <CAM> date <CAM> time:==:geofence <CAM> values . start <CAM> date <CAM> time ;
var scale = options . scale  |  |  1 ; var rotation:==:options . rotation  |  |  0 ;
var assert = utils . assert ; var rotr32:==:utils . rotr32 ;
var event <CAM> plugin <CAM> registry = require ( ' event <CAM> plugin <CAM> registry ' ) ; var react <CAM> browser <CAM> event <CAM> emitter:==:require ( ' react <CAM> browser <CAM> event <CAM> emitter ' ) ;
var get <CAM> proto = Object . get <CAM> prototype <CAM> of ; var slice:==:arr . slice ;
var range = math . range ; var fix:==:math . fix ;
var pixel <CAM> ratio   = pick ? plot . pick <CAM> pixel <CAM> ratio : plot . pixel <CAM> ratiovar view <CAM> box:==:plot . view <CAM> box
var View = require ( ' View ' ) ; var prop <CAM> types:==:React . prop <CAM> types ;
var left <CAM> bounds = incoming <CAM> layer . left <CAM> bounds  |  |  default <CAM> left <CAM> bounds ; var right <CAM> bounds:==:incoming <CAM> layer . right <CAM> bounds  |  |  default <CAM> right <CAM> bounds ;
var editor = this . ui . editor ; var graph:==:editor . graph ;
var path = e . path ; var len:==:path . length ;
var stage <CAM> width = this . config . stage <CAM> width ! = = undefined ? this . config . stage <CAM> width : ( window ? window . inner <CAM> width : 1024 ) ; var stage <CAM> height:==:this . config . stage <CAM> height !    undefined ? this . config . stage <CAM> height : ( window ? window . inner <CAM> height : 1024 ) ;
var origin = definition . origin ; var align:==:definition . align ;
var create <CAM> identifier <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> identifier <CAM> expression ; var create <CAM> member <CAM> lookup <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> member <CAM> lookup <CAM> expression ;
var Animated = require ( ' Animated ' ) ; var Easing:==:require ( ' Easing ' ) ;
var path = require ( ' path ' ) ; var gulp:==:require ( ' gulp ' ) ;
var is = ( this . indices  |  |  $ R ( 0,tspans . length-1 ) . to <CAM> array ( ) ) ; var length:==:is . length ;
var n = this . near ; var f:==:this . far ;
var orelse = s . orelse . length > 0 ? this . new <CAM> block ( ' while orelse ' ) : null ; var body:==:this . new <CAM> block ( ' while body ' ) ;
var axis <CAM> expand <CAM> width = layout <CAM> info . axis <CAM> expand <CAM> width ; var axis <CAM> count:==:layout <CAM> info . axis <CAM> count ;
var context = frame <CAM> state . context ; var scene3d <CAM> only:==:frame <CAM> state . scene3d <CAM> only ;
var align = dom . align . value ; var baseline:==:dom . baseline . value ;
var side <CAM> orientation = options . side <CAM> orientation  |  |  BABYLON . Mesh . DEFAULTSIDE ; var radius:==:options . radius  |  |  1 ;
var is <CAM> array = Array . is <CAM> array ; var is <CAM> number:==:number . is <CAM> number ;
var display <UND> name = DDG . get <CAM> property ( item , ' channel . display <UND> name ' ) ; var status:==:DDG . get <CAM> property ( item,'channel . status ' ) ;
var settings = imports . settings ; var util:==:imports . util ;
var _ im <UND> get <UND> sps <UND> str = Module [ ' _ im <UND> get <UND> sps <UND> str ' ] = asm [ ' _ im <UND> get <UND> sps <UND> str ' ] ; var _ memcmp:==:Module [ ' _ memcmp ' ]    asm [ ' _ memcmp ' ] ;
var main <CAM> el = $ ( main <CAM> el ) ; var i d:==:main <CAM> el . attr ( ' data - draggable - id ' ) ;
var for <CAM> each = _ angular . for <CAM> each ; var is <CAM> object:==:_ angular . is <CAM> object ;
var request = evt . request ; var body:==:request . body ;
var bone <CAM> name = skin . bone <CAM> names [ j ] ; var bone:==:nodes [ 0 ] . find <CAM> by <CAM> name ( bone <CAM> name ) ;
var Agent = require ( ' . . ' ) . Agent ; var Transport:==:require ( ' . . ' ) . Transport ;
var ref = $ this . attr ( ' ref ' ) ; var ref <CAM> url:==:$ this . attr ( ' ref <CAM> url ' )  |  |  '' ;
var sizereport = require ( ' gulp - sizereport ' ) var path:==:require ( ' path ' )
var g = this . grid ; var cols:==:g . cols . groups ;
var readdir <CAM> sync = require ( ' fs ' ) . readdir <CAM> sync ; var stat <CAM> sync:==:require ( ' fs ' ) . stat <CAM> sync ;
var dynCall <UND> vii = Module [ ' dynCall <UND> vii ' ] = asm [ ' dynCall <UND> vii ' ] ; var dynCall <UND> iiiiiii:==:Module [ ' dynCall <UND> iiiiiii ' ]    asm [ ' dynCall <UND> iiiiiii ' ] ;
var from = this . _ ranges [ name ] . from ; var to:==:this . _ ranges [ name ] . to ;
var mesh <CAM> instance = model . mesh <CAM> instances [ i ] ; var mesh:==:mesh <CAM> instance . mesh ;
var htmlbars <CAM> options = this . _ addon . htmlbars <CAM> options ( ) ; var template <CAM> compiler:==:htmlbars <CAM> options . template <CAM> compiler ;
var error <CAM> style = _ props2 . error <CAM> style ; var error <CAM> text:==:_ props2 . error <CAM> text ;
var options = this . options ; var scale:==:Math . pow ( viewport . _ scale , options . scale <CAM> response ) ;
var sub = axon . socket ( ' sub - emitter ' ) ; var sub <UND> sock:==:this . sub <UND> sock    sub . connect ( sub <UND> port ) ;
var replacer = opts . replacer  |  |  function ( key , value ) return value ; ; var cmp:==:opts . cmp & & ( function ( f )
var multiplier = clock <CAM> packet . clock . multiplier ; var range:==:clock <CAM> range [ clock <CAM> packet . clock . range ] ;
var prefix = obj . prefix ; var value:==:obj . value ;
var utils = des . utils ; var Cipher:==:des . Cipher ;
var tojso <CAM> nd = a : false , tojso <CAM> nd : truevar nested <CAM> tojso <CAM> nd:==:nested <CAM> tojso <CAM> nd : true ;
var register <CAM> object = scope . register <CAM> object ; var document <CAM> fragment:==:register <CAM> object ( document . create <CAM> document <CAM> fragment ( ) ) ;
var c = a . concat ( b ) ; var d:==:a . slice ( 10 ) ;
var time = $ . time <CAM> picker . _ time <CAM> string <CAM> to <CAM> date ( settings . start <CAM> time ) ; var end <CAM> time:==:$ . time <CAM> picker . _ time <CAM> string <CAM> to <CAM> date ( settings . end <CAM> time ) ;
var function <CAM> declaration = traceur . syntax . trees . function <CAM> declaration ; var object <CAM> pattern <CAM> field:==:traceur . syntax . trees . object <CAM> pattern <CAM> field ;
var page <CAM> state = $ ( opts . page <CAM> state <CAM> cell , slider ) ; var play <CAM> state:==:$ ( opts . play <CAM> state <CAM> cell , slider ) ;
var prompt = require ( ' prompt ' ) ; var semver:==:require ( ' semver ' ) ;
var Catch = traceur . syntax . trees . Catch ; var class <CAM> declaration:==:traceur . syntax . trees . class <CAM> declaration ;
var fixtures = path . resolve ( _ _ dirname , ' fixtures ' ) var rimraf:==:require ( ' rimraf ' )
var auth <CAM> key = bytes <CAM> from <CAM> hex ( auth <CAM> key <CAM> hex ) var server <CAM> salt:==:bytes <CAM> from <CAM> hex ( server <CAM> salt <CAM> hex )
var tile <CAM> provider = primitive . _ tile <CAM> provider ; var tiles <CAM> to <CAM> render:==:primitive . _ tiles <CAM> to <CAM> render ;
var fs = require ( ' graceful - fs ' ) ; var readdir:==:fs . readdir . bind ( fs ) ;
var wt <CAM> table = this . hot . view . wt . wt <CAM> table ; var TD:==:priv . target . TD ;
var inherits = require ( ' util ' ) . inherits ; var semver:==:require ( ' semver ' ) ;
var uglify = require ( ' gulp - uglify ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var focus <CAM> ripple <CAM> opacity = _ props2 . focus <CAM> ripple <CAM> opacity ; var touch <CAM> ripple <CAM> color:==:_ props2 . touch <CAM> ripple <CAM> color ;
var penetrated <CAM> face <CAM> normal = convexParticle <UND> penetratedFaceNormal ; var world <CAM> penetration <CAM> vec:==:convexParticle <UND> worldPenetrationVec ;
var width = endpoint <CAM> style . width  |  |  self . width ; var height:==:endpoint <CAM> style . height  |  |  self . height ;
var target = target <CAM> settings . target ; var t <CAM> ratio:==:this . get <CAM> target <CAM> ratio ( ) ;
var showid = is <CAM> undefined ( v [ ' showid ' ] ) ? ctrlid : v [ ' showid ' ] ; var menuid:==:is <CAM> undefined ( v [ ' menuid ' ] ) ? showid + ' _ menu ' : v [ ' menuid ' ] ;
var x = anchor <CAM> point . x ; var y:==:anchor <CAM> point . y ;
var S = db . model ( ' update <CAM> one <CAM> strict <CAM> schema ' ) ; var s:==:new S ( name : ' orange crush ' ) ;
var fs = require ( ' fs ' ) ; var less:==:require ( ' semicolon - less ' )
var page = require ( ' page ' ) ; var config:==:require ( ' config ' ) ,
var dt = settings . dt ; var t:==:dt . table ( ) ;
var helpers = this . helpers ; var version:==:helpers . set ( ' version ' ) ;
var path = require ( ' path ' ) ; var babel:==:require ( ' babel - core ' ) ;
var table = doc . create <CAM> element ( ' table ' ) ; var tbody:==:doc . create <CAM> element ( ' tbody ' ) ;
var class <CAM> name = _ props . class <CAM> name ; var no <CAM> rows <CAM> renderer:==:_ props . no <CAM> rows <CAM> renderer ;
var join = require ( ' path ' ) . join ; var sliced:==:require ( ' sliced ' ) ;
var env = process . env . NODE <UND> ENV  |  |  ' development ' ; var Server:==:exports . Server    function http <CAM> server ( middleware )
var font <CAM> color = new visuals . color <CAM> helper ( colors , properties [ ' font <CAM> color ' ] , default <CAM> settings . font <CAM> color ) . get <CAM> color <CAM> for <CAM> measure ( objects , ' ' ) ; var show:==:powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , properties [ ' show ' ] , default <CAM> settings . show ) ;
var expected <CAM> result = expectations [ i ] . expected <CAM> result ; var command:==:expectations [ i ] . command ;
var dense <CAM> matrix = type . dense <CAM> matrix ; var sparse <CAM> matrix:==:type . sparse <CAM> matrix ;
var col <CAM> container = container <CAM> ctrl . col <CAM> container ; var grid:==:ui <CAM> grid <CAM> ctrl . grid ;
var utils = hash . utils ; var rotl32:==:utils . rotl32 ;
var sass = require ( ' gulp - sass ' ) ; var webpack:==:require ( ' webpack ' ) ;
var margin <CAM> right = options . margin <CAM> right ; var padding <CAM> top:==:options . padding <CAM> top ;
var editors = imports . editors ; var commands:==:imports . commands ;
var c9 = imports . c9 ; var metadata:==:imports . metadata ;
var tab   = req . body . tab ; var content:==:req . body . t <UND> content ;
var url = this . find ( ' [ data - url ] ' ) . val ( ) ; var alt:==:this . find ( ' [ data - alt ] ' ) . val ( ) ;
var Class = kendo . Class ; var extend:==:$ . extend ;
var period = this . _ period ; var due <CAM> time:==:this . due <CAM> time ;
var selector = ( options & & typeof options . selector ! = ' undefined ' ) ? options . selector : that . selector ; var scope:==:( options & & typeof options . scope !   ' undefined ' ) ? options . scope : that . scope ;
var methods = require ( ' methods ' ) ; var slice:==:Array . prototype . slice ;
var counter <CAM> title = line <CAM> dot <CAM> chart . default <CAM> settings . counter <CAM> title ; var isanimated:==:line <CAM> dot <CAM> chart . default <CAM> settings . isanimated ;
var title = options . title  |  |  document . title ; var state:==:options . state  |  |  null ;
var red900 = exports . red900 = ' # b71c1c ' ; var redA100:==:exports . redA100    ' # ff8a80 ' ;
var cx = this . attribute ( ' cx ' ) . to <CAM> pixels ( ' x ' ) ; var cy:==:this . attribute ( ' cy ' ) . to <CAM> pixels ( ' y ' ) ;
var coordinates = geometry . coordinates ; var encode <CAM> offsets:==:geometry . encode <CAM> offsets ;
var timeout = options . timeout  |  |  default <CAM> options . timeout ; var jsonp <CAM> callback:==:options . jsonp <CAM> callback  |  |  default <CAM> options . jsonp <CAM> callback ;
var tabs = $ ( this . box ) . find ( ' > div . w2ui - form - tabs ' ) ; var page:==:$ ( this . box ) . find ( ' > div . w2ui - page ' ) ;
var Site = require ( ' Site ' ) ; var slugify:==:require ( ' slugify ' ) ;
var vid2 = document . get <CAM> element <CAM> by <CAM> id ( ' vid2 ' ) ; var btn1:==:document . get <CAM> element <CAM> by <CAM> id ( ' btn1 ' ) ;
var is <CAM> string = util . is <CAM> string ; var is <CAM> function:==:util . is <CAM> function ;
var content <CAM> doc = this . content <CAM> document ; var default <CAM> view:==:content <CAM> doc . default <CAM> view  |  |  content <CAM> doc . parent <CAM> window ;
var keys = this . keys ; var bboxes:==:this . bboxes ;
var unary <CAM> expression = traceur . syntax . trees . unary <CAM> expression ; var variable <CAM> declaration <CAM> list:==:traceur . syntax . trees . variable <CAM> declaration <CAM> list ;
var normal <CAM> scale = this . normal <CAM> scale & & this . normal ? this . normal <CAM> scale . build <CAM> code ( builder , ' v2 ' ) : undefined ; var clear <CAM> coat:==:this . clear <CAM> coat ? this . clear <CAM> coat . build <CAM> code ( builder , ' fv1 ' ) : undefined ;
var n = iframe . get ( ' node ' ) ; var e:==:Y . one ( ' # editor ' ) ;
var start = this . clipped <CAM> pos ( row , start <CAM> column ) ; var end:==:this . clipped <CAM> pos ( row , end <CAM> column ) ;
var join <CAM> classes = require ( ' join <CAM> classes ' ) ; var shallow <CAM> equal:==:require ( ' shallow <CAM> equal ' ) ;
var format <CAM> string = visuals . value <CAM> formatter . get <CAM> format <CAM> string ( values <CAM> metadata , format <CAM> string <CAM> prop ) ; var pct:==:visuals . value <CAM> formatter . format ( percentage , pct <CAM> format <CAM> string ) ;
var d = vdot ( vsub ( this . ta , a ) , n ) ; var r:==:this . r ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' parser ' ) ;
var req = http . request ( opt , function ( res ) var status:==:res . status <CAM> code ;
var SYNTAX <UND> ERROR <UND> TREE = ' SYNTAX <UND> ERROR <UND> TREE ' ; var TEMPLATE <UND> LITERAL <UND> EXPRESSION:==:' TEMPLATE <UND> LITERAL <UND> EXPRESSION ' ;
var latitude = cartographic . latitude ; var west:==:rectangle . west ;
var util = require ( ' util ' ) ; var debug:==:require ( ' debug ' ) ( ' marionette - js - runner : rpc ' ) ;
var storage <CAM> application <CAM> permissions = Windows . Storage . access <CAM> cache . storage <CAM> application <CAM> permissions ; var recent <CAM> storage <CAM> item <CAM> visibility:==:Windows . Storage . access <CAM> cache . recent <CAM> storage <CAM> item <CAM> visibility ;
var util = imports . util ; var watcher:==:imports . watcher ;
var query = url . query ; var pathname:==:url . pathname ;
var granularity = default <CAM> value ( options . granularity , cesium <CAM> math . RADIANS <UND> PER <UND> DEGREE ) ; var height:==:default <CAM> value ( options . height , 0 . 0 ) ;
var items = that . items ( ) ; var view:==:that . data <CAM> source . view ( ) ;
var author = ( msg . author  |  |  '' ) ; var apool:==:msg . apool ;
var scroll <CAM> view = require ( ' scroll <CAM> view ' ) ; var scroll <CAM> responder:==:require ( ' scroll <CAM> responder ' ) ;
var th = document . create <CAM> element ( ' th ' ) ; th . innerHTML = row ; var tr:==:document . create <CAM> element ( ' tr ' ) ; tr . append <CAM> child ( th ) ;
var native <CAM> handler = callback <CAM> list . native <CAM> handler ; var fake <CAM> name:==:callback <CAM> list . fake <CAM> name , capture    callback <CAM> list . capture ;
var extend <CAM> deep <CAM> all = extend <CAM> module . extend <CAM> deep <CAM> all ; var extend <CAM> deep <CAM> no <CAM> arrays:==:extend <CAM> module . extend <CAM> deep <CAM> no <CAM> arrays ;
var record = method . record ; var original:==:method . original ;
var download <CAM> preference = this . _ model . download <CAM> preference ; var data <CAM> connection <CAM> dialog:==:this . child <CAM> views . data <CAM> connection <CAM> dialog ;
var ec <CAM> model = this . _ ec <CAM> model ; var series <CAM> index:==:el . series <CAM> index ;
var mongoose = require ( ' mongoose ' ) ; var path:==:require ( ' path ' ) ;
var d = new index <CAM> node ( [ new constant <CAM> node ( 2 ) , new constant <CAM> node ( 1 ) , new constant <CAM> node ( 3 ) ] ) ; var e:==:new index <CAM> node ( [ new constant <CAM> node ( 2 ) , new constant <CAM> node ( 4 ) ] ) ;
var parent = list . parent ( ' . k - animation - container ' ) ; var height:==:that . options . height ;
var x = ( ' xoffset ' in parameters ) ? parameters [ ' xoffset ' ] : null ; var y:==:( ' yoffset ' in parameters ) ? parameters [ ' yoffset ' ] : null ;
var NUMBER3 = C . NUMBER3 = 0x53 ; var STRING1:==:C . STRING1    0x61 ;
var assert = require ( ' assert ' ) ; var socks:==:require ( ' socksv5 ' ) ;
var clear <CAM> timeout = global$1 . clear <CAM> timeout ; var document:==:window & & window . document ;
var item = items [ i ] ; var ch:==:children [ i ] ;
var events = require ( ' events ' ) var net:==:require ( ' net ' )
var client = game <CAM> server . clients [ i ] . player <CAM> tracker ; var len:==:client . cells . length ;
var box <CAM> width <CAM> list = group <CAM> item . box <CAM> width <CAM> list = [ ] ; var box <CAM> offset <CAM> list:==:group <CAM> item . box <CAM> offset <CAM> list    [ ] ;
var val = $ input . val ( ) ; var is <CAM> color:==:$ . zui . Color . is <CAM> color ( val ) ;
var Connection   = load <CAM> class ( ' Connection ' ) ; var connection <CAM> config:==:load <CAM> class ( ' connection <CAM> config ' ) ;
var buffer <CAM> view = runtime . gltf . buffer <CAM> views [ accessor . buffer <CAM> view ] ; var byte <CAM> offset:==:accessor . byte <CAM> offset  |  |  0 ;
var param <CAM> name = options . param <CAM> name  |  |  ' nk ' ; var http:==:[ ] . concat ( shared <CAM> to <CAM> class . http  |  |  [ ] ) [ 0 ] ;
var a = new jsbn ( params . a ) ; var b:==:new jsbn ( params . b ) ;
var main = document . get <CAM> element <CAM> by <CAM> id ( ' main ' ) ; var footer:==:document . get <CAM> element <CAM> by <CAM> id ( ' footer ' ) ;
var Contacts = Windows . application <CAM> model . Contacts ; var Contact:==:Contacts . Contact ;
var Object = platform . Object ; var reg <CAM> exp:==:platform . reg <CAM> exp ;
var q = qwery . no <CAM> conflict ( ) ; var table:==:' table ' ,
var components = this . subtable . table . components ; var ligature <CAM> list:==:this . subtable . table . ligature <CAM> list ;
var x = this . a . x + ( ua * this . v . x ) ; var y:==:this . a . y + ( ua * this . v . y ) ;
var i d = item . i d ; var module:==:get <UND> module <UND> details ( id , token ) ;
var susp = suspension <UND> stack [ i ] ; var code:==:repl . sk <UND> code <UND> editor . get <CAM> line ( susp . lineno - 1 ) ;
var year = date . year ( ) ; var month:==:date . month ( ) + 1 ;
var months = w2utils . settings . fullmonths ; var days:==:w2utils . settings . fulldays ;
var _ hk = 122 ; values [ _ hk ] = _ hk ; var _ hl:==:123 ; values [ _ hl ]    _ hl ;
var fs = require ( ' fs ' ) var https:==:require ( ' https ' )
var dir = path . join ( _ _ dirname , ' . . ' , ' controllers ' ) ; var verbose:==:options . verbose ;
var modify = require ( ' gulp - modify ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var key = options . key ; var style <CAM> spec:==:options . style <CAM> spec ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var selenium <CAM> host = grunt . option ( ' selenium <CAM> host ' ) ; var selenium <CAM> port:==:grunt . option ( ' selenium <CAM> port ' ) ;
var fs = require ( ' fs ' ) ; var marked:==:require ( ' marked ' ) ;
var c = ec * 8 ; var d:==:dB - du ;
var pi = math . pi ; var acosh:==:math . acosh ;
var connect = require ( ' gulp - connect ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var b = goog . bind ( get <CAM> foo , obj , ' hot ' ) ; var p:==:goog . partial ( b , ' dog ' ) ;
var localAABB = intersectTrimesh <UND> localAABB ; var local <CAM> direction:==:intersectTrimesh <UND> localDirection ;
var current = this . current <CAM> module _ ; var name:==:tree . name . value ;
var left = left <CAM> child <CAM> idx ( idx ) ; var right:==:right <CAM> child <CAM> idx ( idx ) ;
var exaggeration = default <CAM> value ( options . exaggeration , 1 . 0 ) ; var include <CAM> web <CAM> mercatort:==:default <CAM> value ( options . include <CAM> web <CAM> mercatort , false ) ;
var pluck = utils . pluckvar expose:==:utils . expose
var custom <CAM> callback = function custom <CAM> callback ( nodeA , nodeB , edge ) ; var level <CAM> by <CAM> direction:==:function level <CAM> by <CAM> direction ( nodeA , nodeB , edge )
var instantiate <CAM> react <CAM> component = require ( ' instantiate <CAM> react <CAM> component ' ) ; var should <CAM> update <CAM> react <CAM> component:==:require ( ' should <CAM> update <CAM> react <CAM> component ' ) ;
var ellipsoid = default <CAM> value ( options . ellipsoid , Ellipsoid . WGS84 ) ; var semi <CAM> major <CAM> axis:==:options . semi <CAM> major <CAM> axis ;
var expand = Utils . make <CAM> button <CAM> element ( ' class ' : ' aloha - ui - menubutton - expand ' ) ; var menu:==:$ ( ' < ul > ' , ' class ' : ' aloha - ui - menubutton - menu ' ) ;
var tag = options [ ' tag ' ] ! = null ? options [ ' tag ' ] : 0 ; var action <CAM> tag:==:options [ ' action <CAM> tag ' ] !   null ? options [ ' action <CAM> tag ' ] : 0 ;
var filename = options . filename  |  |  ' xmind . xmind ' ; var form:==:document . create <CAM> element ( ' form ' ) ;
var receive <CAM> shadows = shadow <CAM> mode . receive <CAM> shadows ( model . shadows ) ; var node <CAM> commands:==:model . _ node <CAM> commands ;
var style = el . style ; var image:==:style . image ;
var path   = require ( ' path ' ) ; var winston:==:require ( ' winston ' ) ;
var b = new symbol <CAM> node ( ' Epsilon ' ) ; var mult:==:new operator <CAM> node ( ' * ' , ' multiply ' , [ a , b ] ) ;
var has <CAM> own <CAM> property = object . has <CAM> own <CAM> property ; var for <CAM> own:==:function for <CAM> own ( object , callback )
var stride = this . stride , offset = a . offset + this . ent <UND> offset * stride , w = a . width ; var l:==:( arguments . length - 1 ) ;
var event <CAM> emitter = require ( ' events ' ) . event <CAM> emitter ; var debug:==:require ( ' debug ' ) ( ' connector ' ) ;
var range <CAM> to <CAM> segments = t . range <CAM> to <CAM> segments ; var format <CAM> date:==:calendar . format <CAM> date ;
var controlgroup = $ ( ' . controlgroup - refresh ' ) . controlgroup ( ) ; var selectmenu:==:$ ( ' # select - refresh ' ) . selectmenu (
var options = _ state . options ; var value:==:_ state . value ;
var validator <CAM> result = helpers . validator <CAM> result ; var schema <CAM> error:==:helpers . schema <CAM> error ;
var node = nodes [ offset ] ; var bb <UND> l:==:node . bb <UND> l ,
var tvdb <UND> id = _ this . model . get ( ' tvdb <UND> id ' ) ; var imdb <UND> id:==:_ this . model . get ( ' imdb <UND> id ' ) ;
var func = _ react$ <CAM> prop <CAM> types . func ; var one <CAM> of <CAM> type:==:_ react$ <CAM> prop <CAM> types . one <CAM> of <CAM> type ;
var ymid = sol . ymid ; var n:==:xs . length ;
var tile <CAM> size = Windows . UI . start <CAM> screen . tile <CAM> size ; var Uri:==:Windows . Foundation . Uri ;
var operator <CAM> node = math . expression . node . operator <CAM> node ; var symbol <CAM> node:==:math . expression . node . symbol <CAM> node ;
var react <CAM> element = require ( ' react <CAM> element ' ) ; var can <CAM> define <CAM> property:==:require ( ' can <CAM> define <CAM> property ' ) ;
var edge <CAM> vertexb = sphereTrimesh <UND> edgeVertexB ; var edge <CAM> vector:==:sphereTrimesh <UND> edgeVector ;
var constant = protobuf . constants ; var util:==:protobuf . util ;
var velocityX = e . gesture . velocityX ; var direction:==:e . gesture . direction ;
var unserialize = require ( ' unserialize ' ) ; var each:==:require ( ' each ' ) ;
var should = require ( ' chai ' ) . should ( ) ; var mockery:==:require ( ' mockery ' ) ;
var c = this . dispatcher . get <CAM> debug <CAM> context ( this . _ current <CAM> binding ( ) . element <CAM> index , null ) ; var context:==:lang <UND> 1 . is <CAM> present ( c ) ? new _ Context ( c . element , c . component <CAM> element , c . context , c . locals , c . injector , this . _ current <CAM> binding ( ) . debug ) : null ;
var d = data . portal . options . data ; var health:==:d . health ;
var caret = kendo . caret ; var keys:==:kendo . keys ;
var clear = ol . obj . clear ; var is <CAM> empty:==:ol . obj . is <CAM> empty ;
var input <CAM> state = vim . input <CAM> state ; var motion:==:input <CAM> state . motion ;
var drawing <CAM> buffer <CAM> height = context . drawing <CAM> buffer <CAM> height ; var distance:==:camera . distance <CAM> to <CAM> bounding <CAM> sphere ( sphere ) ;
var react <CAM> native = require ( ' react <CAM> native ' ) ; var Touchable:==:require ( ' Touchable ' ) ;
var spawn = require ( ' child <UND> process ' ) . spawnvar child:==:spawn ( process . exec <CAM> path , [ _ _ filename , ' child ' ] )
var handle <CAM> key <CAM> down = function handle <CAM> key <CAM> down ( event , params , modal ) var e:==:event  |  |  window . event ;
var define <CAM> getter = scope . define <CAM> getter ; var mixin:==:scope . mixin ;
var f8 <CAM> friend <CAM> going = require ( ' f8 <CAM> friend <CAM> going ' ) ; var f8 <CAM> speaker <CAM> profile:==:require ( ' f8 <CAM> speaker <CAM> profile ' ) ;
var contexts = this . contexts ; var destination:==:this . destination ;
var y = rect . y ; var height:==:rect . height ;
var create <CAM> server = require ( ' http ' ) . create <CAM> servervar spawn:==:require ( ' child <UND> process ' ) . spawn
var on <CAM> keyboard <CAM> focus = _ props3 . on <CAM> keyboard <CAM> focus ; var on <CAM> touch <CAM> tap:==:_ props3 . on <CAM> touch <CAM> tap ;
var cell <CAM> to <CAM> date = t . cell <CAM> to <CAM> date ; var get <CAM> is <CAM> cell <CAM> all <CAM> day:==:t . get <CAM> is <CAM> cell <CAM> all <CAM> day ;
var h = config . line <CAM> height ; var top:==:pixel <CAM> pos . top ;
var unpadded <CAM> index = intl <CAM> helper . get ( ' unpadded <CAM> index ' ) ; var padded <CAM> index:==:intl <CAM> helper . get ( ' padded <CAM> index ' ) ;
var assert   = require ( ' assert ' ) ; var Buffer:==:require ( ' safe - buffer ' ) . Buffer ;
var zip = require ( ' gulp - zip ' ) ; var prompt:==:require ( ' gulp - prompt ' ) ;
var left = event . center . x - rect . left ; var top:==:event . center . y - rect . top ;
var receiver = ast . receiver . visit ( this ) ; var args:==:this . _ visit <CAM> all ( ast . args ) ;
var Packets   = common . Packets ; var packet <CAM> writer:==:common . packet <CAM> writer ;
var canvas = this . canvas ; var width:==:canvas . width ;
var w = canvas . width ; var h:==:canvas . height ;
var edge <CAM> fields <CAM> count = this . _ edge <CAM> fields <CAM> count ; var edge <CAM> type <CAM> offset:==:this . _ edge <CAM> type <CAM> offset ;
var upsert = PouchDB . utils . upsert ; var utils:==:PouchDB . utils . map <CAM> reduce <CAM> utils ;
var when = require ( ' when ' ) ; var clone:==:require ( ' clone ' ) ;
var _ _ GLOBAL <UND>  <UND> I <UND> a18 = Module [ ' _ _ GLOBAL <UND>  <UND> I <UND> a18 ' ] = asm [ ' _ _ GLOBAL <UND>  <UND> I <UND> a18 ' ] ; var run <CAM> post <CAM> sets:==:Module [ ' run <CAM> post <CAM> sets ' ]    asm [ ' run <CAM> post <CAM> sets ' ] ;
var white = Color . from <CAM> string ( ' white ' ) . to <CAM> rgba ( ) ; var maroon:==:Color . from <CAM> string ( ' maroon ' ) . to <CAM> rgba ( ) ;
var p1 = Cartesian3 . from <CAM> array ( positions , i1 * 3 , p1 <CAM> scratch ) ; var p2:==:Cartesian3 . from <CAM> array ( positions , i2 * 3 , p2 <CAM> scratch ) ;
var is <CAM> same <CAM> origin = shared <CAM> util . is <CAM> same <CAM> origin ; var load <CAM> jpeg <CAM> stream:==:shared <CAM> util . load <CAM> jpeg <CAM> stream ;
var Buffer = require ( ' buffer ' ) . Buffer ; var r:==:new stream . Readable ( ) ;
var sparse = math . sparse ; var mod:==:math . mod ;
var new <CAM> value = context . new <CAM> value ; var data <CAM> type:==:property . data <CAM> type ;
var before <UND> close = ( $ . is <CAM> function ( params . before <UND> close ) ) ? params . before <UND> close : function ( ) ; var after <UND> close:==:( $ . is <CAM> function ( params . after <UND> close ) ) ? params . after <UND> close : function ( ) ;
var Readable = require ( ' stream ' ) . Readable ; var util:==:require ( ' util ' ) ;
var fs = imports . fs ; var save:==:imports . save ;
var view <CAM> model = widget . _ view <CAM> model ; var shuttle <CAM> ring <CAM> dragging:==:view <CAM> model . shuttle <CAM> ring <CAM> dragging ;
var active = skeletons [ active <CAM> skeleton ] ; var skeleton:==:active . skeleton ;
var C = Constructor ; var proto:==:C . prototype ;
var g     = require ( ' gulp ' ) var concat:==:require ( ' gulp - concat ' )
var subtitle <CAM> color = _ props . subtitle <CAM> color ; var subtitle <CAM> style:==:_ props . subtitle <CAM> style ;
var stop = params . has <CAM> own <CAM> property ( ' stop ' ) ? params . stop : -1 ; var weights:==:params . weights  |  |  [ ] ;
var name = this . transform <CAM> any ( tree . name ) ; var value:==:this . transform <CAM> any ( tree . value ) ;
var UNARY <UND> OPERATORS = exports . UNARY <UND> OPERATORS = [ ' void ' ] . concat ( BOOLEAN <UND> UNARY <UND> OPERATORS , NUMBER <UND> UNARY <UND> OPERATORS , STRING <UND> UNARY <UND> OPERATORS ) ; var INHERIT <UND> KEYS:==:exports . INHERIT <UND> KEYS
var denodeify = require ( ' denodeify ' ) ; var browserify:==:require ( ' browserify ' ) ;
var fullname = user <CAM> ids . fullname ; var email:==:user <CAM> ids . email ;
var margin = this . margin ; var width:==:options . viewport . width - ( margin . left + margin . right ) ;
var ish = this . ish ; var destination:==:this . destination ;
var texture <CAM> unit <CAM> index = gl . TEXTURE0 + this . texture <CAM> unit <CAM> index ; var value:==:this . value ;
var group = this . create <CAM> vml <CAM> element ( ' group ' ) ; var style:==:group . style ;
var message = parsed . message ; var amount:==:parsed . amount ? parsed . amount : '' ;
var object = objects [ o ] . object ; var geometry:==:object . geometry ;
var press <CAM> time = aggregator . _ press <CAM> time ; var release <CAM> time:==:aggregator . _ release <CAM> time ;
var core = breeze . core ; var complex <CAM> aspect:==:breeze . complex <CAM> aspect ;
var request = bb <CAM> promise . promisify ( require ( ' request ' ) ) ; var util:==:require ( ' gulp - util ' ) ;
var add <CAM> spy = jasmine . create <CAM> spy ( ' add <CAM> spy ' ) ; var remove <CAM> spy:==:jasmine . create <CAM> spy ( ' remove <CAM> spy ' ) ;
var flags   = opts . cli . flags ; var output:==:flags . output ? path . resolve ( flags . output ) : path . join ( process . cwd ( ) , input ) ;
var index <CAM> of = utils . index <CAM> of ; var keys:==:utils . keys ;
var point = b2 <CAM> contact <CAM> solver . s <UND> psm . m <UND> points [ j ] ; var separation:==:b2 <CAM> contact <CAM> solver . s <UND> psm . m <UND> separations [ j ] ;
var i d = item . i d ; var download:==:downloads <CAM> cache [ i d ] ;
var apps <CAM> helper = _ js <CAM> lib <CAM> helpers . apps <CAM> helper ; var icon <CAM> helper:==:_ js <CAM> lib <CAM> helpers . icon <CAM> helper ;
var s <CAM> filter = blanket . options ( ' sap - ui - cover - only ' )  |  |  s <CAM> filter <CAM> attr ; var s <CAM> anti <CAM> filter:==:blanket . options ( ' sap - ui - cover - never ' )  |  |  s <CAM> anti <CAM> filter <CAM> attr ;
var tree <CAM> node = test <CAM> set . tree <CAM> node ; var display <CAM> node:==:test <CAM> set . display <CAM> node ;
var models = _ _ alloy <CAM> id15 . models ; var len:==:models . length ;
var errors = require ( ' restify - errors ' ) ; var bad <CAM> digest <CAM> error:==:errors . bad <CAM> digest <CAM> error ;
var a = face . a ; var b:==:face . b ;
var transition = get <CAM> option ( ' transition ' ) ; var transition <CAM> easing:==:get <CAM> option ( ' transition <CAM> easing ' ) ;
var assert = require ( ' chai ' ) . assert ; var spawn:==:require ( ' child <UND> process ' ) . spawn ;
var size = require ( ' gulp - size ' ) ; var streamify:==:require ( ' gulp - streamify ' ) ;
var gl = that . gl ; var program:==:that . program ;
var magenta = game . add . sprite ( 0 , 0 , ' magenta ' ) ; var yellow:==:game . add . sprite ( 16 , 0 , ' yellow ' ) ;
var shallow <CAM> equal = require ( ' shallow <CAM> equal ' ) ; var cell <CAM> default:==:require ( ' fixed <CAM> data <CAM> table <CAM> cell <CAM> default . react ' ) ;
var resolve = require ( ' path ' ) . resolvevar fs:==:require ( ' graceful - fs ' )
var t = this . get <CAM> item ( node . i d ) ; var n:==:node . clone <CAM> node ( true ) ;
var topic <UND> id = row . _ i d . topic <UND> id ; var count:==:row . count ;
var $ element = this . $ element ; var $ pureview:==:this . $ pureview ;
var buffer <CAM> size = this . buffer <CAM> size ; var start <CAM> buffer <CAM> every:==:( this . start <CAM> buffer <CAM> every     null ) ? buffer <CAM> size : this . start <CAM> buffer <CAM> every ;
var a = ab . center ( ) ; var b:==:bb . center ( ) ;
var INVALID = ' INVALID ' ; var PENDING:==:' PENDING ' ;
var host = a . host ; var protocol:==:a . protocol ;
var readable = opts . readable  |  |  ( opts . readable ! = = false & & stream . readable ) ; var writable:==:opts . writable  |  |  ( opts . writable !    false & & stream . writable ) ;
var socket   = options . get ( ' socket ' ) ; var template:==:fs . read <CAM> file <CAM> sync ( config . templates . connector , ' utf-8 ' ) ;
var i d = options . i d ; var default <CAM> viewport:==:options . default <CAM> viewport ;
var wrap   = require ( ' gulp - wrap ' ) ; var qunit:==:require ( ' gulp - qunit ' ) ;
var path = require ( ' path ' ) ; var dirname:==:path . dirname ;
var uglify = require ( ' uglify - js ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var try <CAM> catch = try <CAM> catch <CAM> utils . try <CAM> catch , error <CAM> obj = try <CAM> catch <CAM> utils . error <CAM> obj ; var inherits:==:require ( ' inherits ' ) ;
var times = options . times ; var points:==:options . points ;
var label = document . get <CAM> element <CAM> by <CAM> id ( ' label ' ) ; var start:==:document . get <CAM> element <CAM> by <CAM> id ( ' start ' ) ;
var sources <CAM> content = util . get <CAM> arg ( source <CAM> map , ' sources <CAM> content ' , null ) ; var mappings:==:util . get <CAM> arg ( source <CAM> map , ' mappings ' ) ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ calloc:==:Module [ ' _ calloc ' ]    asm [ ' _ calloc ' ] ;
var Span = firepad . Span ; var h:==:helpers ;
var assert = require ( ' assert ' ) ; var cst:==:require ( ' cst ' ) ;
var attribute = ' the attribute ' ; var value:==:' the value ' ;
var domain     = zombie <UND> array [ index ] [ ' domain ' ] ; var port:==:zombie <UND> array [ index ] [ ' port ' ] ;
var direction = self . get <CAM> direction ( data . direction ) ; var easing:==:EASING <UND> FUNCTIONS [ data . easing ] ;
var preview = $ this . preview ; var code <CAM> mirror:==:$ this . code <CAM> mirror ;
var d = date . getutc <CAM> date ( ) ; d = d > = 10 ? d : ' 0'+d ; var h:==:date . getutc <CAM> hours ( ) ; h    h >   10 ? h : ' 0'+h ;
var d3 = _ add <CAM> div ( ' d3 ' ) , d4 = _ add <CAM> div ( ' d4 ' ) ; var c:==:_ js <CAM> plumb . connect ( source : d3 , target : d4 , anchors : [ ' auto <CAM> default ' , ' auto <CAM> default ' ] ) ;
var http = require ( ' http ' ) ; var path:==:require ( ' path ' ) ;
var wrapS = info . wrapS ; var wrapT:==:info . wrapT ;
var user = Meteor . user ( ) ; var post:==:_ . extend ( post <CAM> attributes ,
var description = options . description  |  |  page . description  |  |  page . excerpt  |  |  content  |  |  config . description ; var keywords:==:page . keywords  |  |  ( page . tags & & page . tags . length ? page . tags : undefined )  |  |  config . keywords ;
var Unit = math . type . Unit ; var median:==:math . median ;
var item <CAM> container = fragment  |  |  this . els . item <CAM> container ; var items <CAM> indom:==:this . els . items <CAM> indom ;
var predefined <CAM> name = traceur . syntax . predefined <CAM> name ; var State:==:traceur . codegeneration . generator . State ;
var notebook <UND> path = utils . encode <UND> uri <UND> components ( that . notebook . notebook <UND> path ) ; var url:==:utils . url <UND> path <UND> join (
var reactdom <CAM> component <CAM> tree = require ( ' reactdom <CAM> component <CAM> tree ' ) ; var reactdom <CAM> container <CAM> info:==:require ( ' reactdom <CAM> container <CAM> info ' ) ;
var readline = require ( ' readline ' ) ; var request:==:require ( ' request ' ) ;
var wrap    = options . utils . wrap <CAM> pattern ; var assert:==:require ( ' chai ' ) . assert ;
var api = this . client . api ; var page:==:api . page . simple <CAM> page <CAM> obj ( ) ;
var for <CAM> of <CAM> transformer = traceur . codegeneration . for <CAM> of <CAM> transformer ; var free <CAM> variable <CAM> checker:==:traceur . semantics . free <CAM> variable <CAM> checker ;
var m = SIMD . Uint32x4 . from <CAM> int32x4 <CAM> bits ( SIMD . Int32x4 ( 0x3F800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:SIMD . Int32x4 . from <CAM> uint32x4 <CAM> bits ( m ) ;
var slice = Array . prototype . slice ; var to <CAM> string:==:Object . prototype . to <CAM> string ;
var start = ' startkey ' in opts ? opts . startkey : false ; var end:==:' endkey ' in opts ? opts . endkey : false ;
var method = this . method ; var s:==:this . res . status <CAM> code ;
var shader = render <CAM> session . shader <CAM> manager . strip <CAM> shader ; var draw <CAM> mode:==:( this . draw <CAM> mode      Phaser . Rope . TRIANGLE <UND> STRIP ) ? gl . TRIANGLE <UND> STRIP : gl . TRIANGLES ;
var x = Math . pow ( 1 - t , 2 ) * origin . x + 2 . 0 * ( 1 - t ) * t * control . x + t * t * destination . x ; var y:==:Math . pow ( 1 - t , 2 ) * origin . y + 2 . 0 * ( 1 - t ) * t * control . y + t * t * destination . y ;
var querystring = require ( ' querystring ' ) ; var request:==:require ( ' request ' ) ;
var i d = new <CAM> busytime . _ i d ; var trans:==:db . transaction ( ' busytimes ' ) ;
var fs = require ( ' fs ' ) ; var through:==:require ( ' through ' ) ;
var start = me . options . start ! = undefined ? me . options . start : range . min ; var end:==:me . options . end !   undefined ? me . options . end : range . max ;
var diffs = this . diffs = [ ] ; var real <CAM> out:==:this . real <CAM> out    [ ] ;
var kind = node . kind ; var key:==:node . key ;
var confirm = imports [ ' dialog . confirm ' ] . show ; var access <CAM> control:==:imports . access <CAM> control ;
var ty = wt . ty ; var colors:==:this . colors ;
var lex = require ( ' pug - lexer ' ) ; var load:==:require ( ' pug - load ' ) ;
var pixel <CAM> ratio = require ( ' pixel <CAM> ratio ' ) ; var react <CAM> native <CAM> prop <CAM> registry:==:require ( ' react <CAM> native <CAM> prop <CAM> registry ' ) ;
var sources = util . get <CAM> arg ( source <CAM> map , ' sources ' ) ; var names:==:util . get <CAM> arg ( source <CAM> map , ' names ' , [ ] ) ;
var min = x : contains180 ? -1 : Math . min ( start . x * ( start . x < 0 ? 1 : cutout ) , end . x * ( end . x < 0 ? 1 : cutout ) ) , y : contains270 ? -1 : Math . min ( start . y * ( start . y < 0 ? 1 : cutout ) , end . y * ( end . y < 0 ? 1 : cutout ) ) ; var max:==:x : contains0 ? 1 : Math . max ( start . x * ( start . x > 0 ? 1 : cutout ) , end . x * ( end . x > 0 ? 1 : cutout ) ) , y : contains90 ? 1 : Math . max ( start . y * ( start . y > 0 ? 1 : cutout ) , end . y * ( end . y > 0 ? 1 : cutout ) ) ;
var cityB = points [ cityb <CAM> index ] ; var d:==:dist ( cityA . x , cityA . y , cityB . x , cityB . y ) ;
var hit <CAM> point <CAM> world = intersectHeightfield <UND> hitPointWorld ; var world <CAM> normal:==:intersectHeightfield <UND> worldNormal ;
var fs    = require ( ' fs ' ) ; var p:==:require ( ' path ' ) ;
var start <CAM> window <CAM> every = this . start <CAM> window <CAM> every > 0 ? this . start <CAM> window <CAM> every : this . window <CAM> size ; var window <CAM> size:==:this . window <CAM> size ;
var o = mobx . observable ; var value:==:mobx . value ;
var data = geometry <CAM> attribute . data ; var stride:==:data . stride ;
var option <CAM> label = dropdownlist . option <CAM> label ; var current:==:dropdownlist . current ( ) ;
var up = $ ( this ) . has <CAM> class ( ' th - sort - up ' ) ; var down:==:$ ( this ) . has <CAM> class ( ' th - sort - down ' ) ;
var force = _ ref7 . force ; var event:==:_ ref7 . event ;
var state = test <CAM> set . state ; var stats:==:test <CAM> set . stats ;
var circle = _ props . circle ; var rounded:==:_ props . rounded ;
var positions = polyline . _ segments . positions ; var lengths:==:polyline . _ segments . lengths ;
var p   = require ( ' path ' ) ; var util:==:require ( ' util ' ) ;
var inherits = require ( ' inherits ' ) var sha1:==:require ( ' simple - sha1 ' )
var on <CAM> validate = jasmine . create <CAM> spy ( ' on <CAM> validate ' ) ; var on <CAM> after <CAM> validate:==:jasmine . create <CAM> spy ( ' on <CAM> after <CAM> validate ' ) ;
var net = require ( ' net ' ) ; var join:==:require ( ' path ' ) . join ;
var REST <UND> PARAMETER = ' REST <UND> PARAMETER ' ; var RETURN <UND> STATEMENT:==:' RETURN <UND> STATEMENT ' ;
var regexp <CAM> source = _ compile <CAM> pattern2 . regexp <CAM> source ; var param <CAM> names:==:_ compile <CAM> pattern2 . param <CAM> names ;
var show = _ props . show ; var touch:==:_ props . touch ;
var password = auth . password . trim ( ) var email:==:auth . email . trim ( )
var typescript = require ( ' gulp - typescript ' ) ; var assign:==:Object . assign  |  |  require ( ' object . assign ' ) ;
var spawn = require ( ' child <UND> process ' ) . spawn ; var plat:==:require ( ' os ' ) . platform ( ) ;
var verticies = strip . verticies ; var uvs:==:strip . uvs ;
var from = ref . segment . from ; var to:==:ref . segment . to ;
var m = margin  |  |  0 ; var me:==:aabb . elements ;
var scroll <CAM> top = this . scroll <CAM> top ; var scroll <CAM> height:==:this . scroll <CAM> height ;
var jump <CAM> list = start <CAM> screen . jump <CAM> list ; var jump <CAM> list <CAM> system <CAM> group <CAM> kind:==:start <CAM> screen . jump <CAM> list <CAM> system <CAM> group <CAM> kind ;
var jsonminify = require ( ' jsonminify ' ) ; var log4js:==:require ( ' log4js ' ) ;
var predicate = this . predicates _ [ i ] ; var iter:==:nodeset . iterator ( ) ;
var b = a : b : ' B2 ' , d : ' D ' , z : ' Z ' ; var c:==:R . merge <CAM> deep <CAM> with <CAM> key ( function ( k , a , b ) return k + a + b ; , a , b ) ;
var express = require ( ' express ' ) var webpack:==:require ( ' webpack ' )
var map <CAM> url = module . exports . map <CAM> url = function ( req <CAM> url <CAM> string ) var req <CAM> url:==:url . parse ( req <CAM> url <CAM> string , true ) ;
var fill = ' local fill ' ; var find:==:' local find ' ;
var multi = this . multiple & & is <CAM> array ( value ) ; var options:==:el . options ;
var module <CAM> records = loader . _ loader . module <CAM> records ; var module:==:entry . module    get <CAM> or <CAM> create <CAM> module <CAM> record ( entry . name , module <CAM> records ) ;
var tar = require ( ' tar - fs ' ) ; var destroy:==:require ( ' destroy ' ) ;
var new <CAM> height = pair . value . new <CAM> height ; var old <CAM> height:==:pair . value . old <CAM> height ;
var on <CAM> header <CAM> click = _ props2 . on <CAM> header <CAM> click ; var sort:==:_ props2 . sort ;
var on <CAM> change = _ props2 . on <CAM> change ; var on <CAM> focus:==:_ props2 . on <CAM> focus ;
var type = info . type ; var width:==:info . width ;
var index = this . index <CAM> from <CAM> char <CAM> code ( char <CAM> code ) ; var keys:==:this . json . keys ;
var date = require ( ' load - date ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var render = require ( ' consolidate ' ) . handlebars . rendervar path:==:require ( ' path ' )
var commands = imports . commands ; var layout:==:imports . layout ;
var use <CAM> webvr = scene . _ use <CAM> webvr & & scene . mode ! = = scene <CAM> mode . SCENE2D ; var passes:==:scene . _ frame <CAM> state . passes ;
var Element = window . Element ; var mutation <CAM> observer:==:window . mutation <CAM> observer ;
var OTHER = ci . OTHER ; var AT:==:ci . AT ;
var scope = this . options . scope ; var parent:==:this . element . parents ( ' : data ( droppable ) ' ) . filter ( function ( )
var properties = page . proxy ( ' properties ' ) ; var category:==:page . category ( ) ;
var c = Y . Cookie . get <CAM> sub ( ' data ' , ' c ' ) ; var e:==:Y . Cookie . get <CAM> sub ( ' data ' , ' e ' ) ;
var moment = require ( ' moment ' ) ; var adapter:==:config [ config . adapter ] ;
var semver = require ( ' semver ' ) ; var spdy:==:require ( ' spdy ' ) ;
var rounded = _ props . rounded ; var style:==:_ props . style ;
var ui = imports . ui ; var collab:==:imports . collab ;
var net = require ( ' net ' ) ; var d:==:dnode ( ) ;
var _ oe = 228 ; values [ _ oe ] = _ oe ; var _ of:==:229 ; values [ _ of ]    _ of ;
var months = make <CAM> getter ( ' months ' ) var years:==:make <CAM> getter ( ' years ' )
var multi = _ state . multi ; var multi <CAM> value:==:_ state . multi <CAM> value ;
var util = imports . util ; var vfs:==:imports . vfs ;
var map = _ _ webpack <UND> require _ _ ( 3 ) . map ; var join:==:_ _ webpack <UND> require _ _ ( 3 ) . join ;
var Subscribable = require ( ' Subscribable ' ) ; var Text:==:require ( ' f8 <CAM> text ' ) ;
var uniforms = shader . uniformsvar model:==:camera . model    |  |  IDENTITY
var w = Math . min ( width , $ ( window ) . width ( ) -10 ) ; var h:==:Math . min ( height , $ ( window ) . height ( ) -80 ) ;
var active <CAM> class = button <CAM> config . active <CAM> class  |  |  ' active ' ; var toggle <CAM> event:==:button <CAM> config . toggle <CAM> event  |  |  ' click ' ;
var async = require ( ' async ' ) ; var moment:==:require ( ' moment ' ) ;
var box = $ ( box2 <CAM> darr [ row ] [ col ] ) ; var w:==:box . width ( ) ;
var src = Blockly . utils . replace <CAM> message <CAM> references ( options [ ' src ' ] ) ; var width:==:Number ( Blockly . utils . replace <CAM> message <CAM> references ( options [ ' width ' ] ) ) ;
var a = ' global ' ; var b:==:' global ' ;
var height = _ props4 . height ; var no <CAM> content <CAM> renderer:==:_ props4 . no <CAM> content <CAM> renderer ;
var widget = $ ( ' # widget ' ) . classes <CAM> widget ( ) ; var instance:==:widget . classes <CAM> widget ( ' instance ' ) ;
var plupload = that . plupload ; var $ status:==:that . $ status ;
var n   = this . normal ; var diffP:==:this . diffP ;
var Parser = core <CAM> parser . Parser ; var isEOF:==:core <CAM> parser . isEOF ;
var serialport = require ( ' serialport ' ) ; var serial <CAM> port:==:serialport . serial <CAM> port ;
var manufacturer = properties [ ' ro . product . manufacturer ' ] var operator:==:properties [ ' gsm . sim . operator . alpha ' ]  |  |
var a = a : b : ' B1 ' , c : ' C ' , y : ' Y ' ; var b:==:a : b : ' B2 ' , d : ' D ' , z : ' Z ' ;
var net <CAM> utils = goog . labs . net . web <CAM> channel . net <CAM> utils ; var request <CAM> stats:==:goog . labs . net . web <CAM> channel . request <CAM> stats ;
var adbkit = require ( ' adbkit ' ) var uuid:==:require ( ' uuid ' )
var def = $ ( ' def ' ) ; var jkl:==:$ ( ' jkl ' ) ;
var exterior = geometries [ i ] . exterior ; var interiors:==:geometries [ i ] . interiors ;
var KINEMATIC = Body . KINEMATIC ; var STATIC:==:Body . STATIC ;
var non <CAM> element <CAM> parent <CAM> node <CAM> interface = scope . non <CAM> element <CAM> parent <CAM> node <CAM> interface ; var Selection:==:scope . wrappers . Selection ;
var component = components . get ( node ) ; var declared <CAM> prop <CAM> types:==:component & & component . declared <CAM> prop <CAM> types  |  |  [ ] ;
var dfa = this . stack [ this . stack . length - 1 ] . dfa ; var state:==:this . stack [ this . stack . length - 1 ] . state ;
var group = cfg . group = = = undefined?0 : cfg . group ; var layers:==:cfg . layers      undefined?~0 : cfg . layers ;
var generate <CAM> random <CAM> key = require ( ' generate <CAM> random <CAM> key ' ) ; var invariant:==:require ( ' invariant ' ) ;
var proxy = bs . options . get ( ' proxy ' ) ; var server:==:bs . options . get ( ' server ' ) ;
var conflicts = diff . conflicts ; var resolutions:==:diff . resolutions ;
var size = data [ ' size ' ] ; var size <UND> human:==:data [ ' size <UND> human ' ] ;
var neighbors = this . neighbors ; var faces:==:this . faces ;
var identifier = this . transform <CAM> any ( tree . identifier ) ; var type <CAM> annotation:==:this . transform <CAM> any ( tree . type <CAM> annotation ) ;
var yosay = require ( ' yosay ' ) ; var wiredep:==:require ( ' wiredep ' ) ;
var changelog = require ( ' gulp - conventional - changelog ' ) ; var tag:==:require ( ' gulp - tag - version ' ) ;
var parse = property <CAM> types . selector <CAM> all . parse ; var stringify:==:property <CAM> types . selector <CAM> all . stringify ;
var O <UND> APPEND = constants . O <UND> APPEND  |  |  0 ; var O <UND> CREAT:==:constants . O <UND> CREAT  |  |  0 ;
var crypto = require ( ' crypto ' ) var ecurve:==:require ( ' ecurve ' )
var item <CAM> width = legend <CAM> model . get ( ' item <CAM> width ' ) ; var item <CAM> height:==:legend <CAM> model . get ( ' item <CAM> height ' ) ;
var a = db . model ( ' gh5128 ' , a <CAM> schema ) ; var b:==:db . model ( ' gh5128 <UND> 0 ' , b <CAM> schema ) ;
var net = imports . net ; var c9:==:imports . c9 ;
var is = require ( ' is ' ) ; var matter:==:require ( ' gray - matter ' ) ;
var y = shape . cy ; var r:==:shape . r ;
var fs = require ( ' fs ' ) var webpage:==:require ( ' webpage ' )
var render <CAM> agenda = t . render <CAM> agenda ; var skip <CAM> hidden <CAM> days:==:t . skip <CAM> hidden <CAM> days ;
var shape = area . shape . to <CAM> lower <CAM> case ( ) ; var coords:==:area . coords . split ( ' , ' ) ;
var CLASS <UND> EXPRESSION = ' CLASS <UND> EXPRESSION ' ; var COMMA <UND> EXPRESSION:==:' COMMA <UND> EXPRESSION ' ;
var email = ( user . email  |  |  '' ) . trim ( ) . to <CAM> lower <CAM> case ( ) ; var name:==:user . name  |  |  ' default ' ;
var end <CAM> state = traceur . codegeneration . generator . end <CAM> state ; var yield <CAM> state:==:traceur . codegeneration . generator . yield <CAM> state ;
var ele = _ get <CAM> element <CAM> object ( element ) ; var i d:==:_ get <CAM> attribute ( ele , ' i d ' ) ;
var set <CAM> timeout = window . set <CAM> timeout ; var set <CAM> interval:==:window . set <CAM> interval ;
var error = require ( ' http - error ' ) ; var kaefer:==:require ( ' kaefer ' ) ;
var create <CAM> variable <CAM> declaration = parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> declaration ; var create <CAM> variable <CAM> declaration <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> declaration <CAM> list ;
var s = new Schema ( set <CAM> max <CAM> listeners : String ) ; var M:==:mongoose . model ( ' set <CAM> max <CAM> listeners - as - property - name ' , s ) ;
var device <CAM> information = Windows . Devices . Enumeration . device <CAM> information ; var pos <CAM> connection <CAM> types:==:Windows . Devices . point <CAM> of <CAM> service . pos <CAM> connection <CAM> types ;
var attr = DS . attr ; var belongs <CAM> to:==:DS . belongs <CAM> to ;
var events = require ( ' events ' ) ; var async:==:require ( ' async ' ) ;
var a = new int8 <CAM> array ( 2 ) ; var b:==:a . subarray ( 2 , 4 ) ;
var pg = require ( paths . pg ) ; var query <UND> native:==:require ( paths . query <UND> native ) ;
var root = this . _ shadow <CAM> root . create <CAM> child ( ' div ' , ' root ' ) ; var svg:==:this . _ createsvg <CAM> child ( root , ' svg ' ) ;
var options = $ tooltip . $ options = angular . extend ( , defaults , config ) ; var promise:==:$ tooltip . $ promise    $ bs <CAM> compiler . compile ( options ) ;
var east = rectangle . east ; var west:==:rectangle . west ;
var display = opts . display ; var is <CAM> horizontal:==:me . is <CAM> horizontal ( ) ;
var pid = req . params . pid ; var version:==:req . params . version ;
var check = args . check ; var periods:==:args . periods  |  |  [ ] ;
var image = self . image ; var rotate:==:image . rotate ;
var border <CAM> colors = options . border <CAM> colors  |  |  [ ] var gl:==:this . plot . gl
var east = cesium <CAM> math . to <CAM> degrees ( rectangle . east ) ; var north:==:cesium <CAM> math . to <CAM> degrees ( rectangle . north ) ;
var w = this . _ width-1 ; var h:==:this . _ height-1 ;
var task <CAM> defaults = common . task <CAM> defaults ; var mongo <CAM> client:==:MongoDB . mongo <CAM> client ;
var user = this . analytics . user ( ) ; var products:==:track . products ( ) ;
var Text = register <CAM> object ( document . create <CAM> text <CAM> node ( '' ) ) ; var Comment:==:register <CAM> object ( document . create <CAM> comment ( '' ) ) ;
var data <CAM> roles = options . data <CAM> roles ; var object <CAM> descriptors:==:options . object <CAM> descriptors ;
var PREDEFINED <UND> TYPE = ' PREDEFINED <UND> TYPE ' ; var PROPERTY <UND> NAME <UND> ASSIGNMENT:==:' PROPERTY <UND> NAME <UND> ASSIGNMENT ' ;
var ui = imports . ui ; var ace:==:imports . ace ;
var store = trans . object <CAM> store ( this . _ store ) ; var index:==:store . index ( ' busytime <CAM> id ' ) ;
var timelines <CAM> rotation = current . timelines <CAM> rotation ; var timelines <CAM> first:==:current . timelines <CAM> first ;
var synthetic <CAM> mouse <CAM> event = require ( ' synthetic <CAM> mouse <CAM> event ' ) ; var synthetic <CAM> drag <CAM> event:==:require ( ' synthetic <CAM> drag <CAM> event ' ) ;
var folder <UND> view = require ( ' folder <UND> view ' ) ; var gui:==:require ( ' nw . gui ' ) ;
var rotation = default <CAM> value ( options . rotation , 0 ) ; var tiltX:==:default <CAM> value ( options . tiltX , 0 ) ;
var duration <CAM> value = document . query <CAM> selector ( ' span#duration <CAM> value ' ) ; var gap <CAM> value:==:document . query <CAM> selector ( ' span#gap <CAM> value ' ) ;
var pixel <CAM> ratio = frame <CAM> state . pixel <CAM> ratio ; var extent:==:frame <CAM> state . extent ;
var anchor = element . data ( ' anchor ' ) ; var index:==:element . index ( ) ;
var pink700 = exports . pink700 = ' # c2185b ' ; var pink800:==:exports . pink800    ' # ad1457 ' ;
var fs = Npm . require ( ' fs ' ) ; var child <UND> process:==:Npm . require ( ' child <UND> process ' ) ;
var updatable = options . updatable ; var side <CAM> orientation:==:( options . side <CAM> orientation      0 ) ? 0 : options . side <CAM> orientation  |  |  BABYLON . Mesh . DEFAULTSIDE ;
var node <CAM> filter = window . node <CAM> filter ; var named <CAM> node <CAM> map:==:window . named <CAM> node <CAM> map  |  |  window . moz <CAM> named <CAM> attr <CAM> map ;
var from = Math . max ( update . visible . from - cm . options . viewport <CAM> margin , doc . first ) ; var to:==:Math . min ( end , update . visible . to + cm . options . viewport <CAM> margin ) ;
var fraction = output . fraction ; var point:==:new b2 <CAM> vec2 ( ( 1 . 0 - fraction ) * point1 . x + fraction * point2 . x , ( 1 . 0 - fraction ) * point1 . y + fraction * point2 . y ) ;
var js = json . springs [ i ] ; var bodyA:==:bodies [ js . bodyA ] ,
var value = _ ref . value ; var css:==:_ ref . prefix . css ;
var ctrl <CAM> key = e . ctrl <CAM> key ; var shift <CAM> key:==:e . shift <CAM> key ;
var key <CAM> escape <CAM> utils = require ( ' key <CAM> escape <CAM> utils ' ) ; var traverse <CAM> all <CAM> children:==:require ( ' traverse <CAM> all <CAM> children ' ) ;
var query <CAM> file = require ( ' pg - promise ' ) . query <CAM> file ; var path:==:require ( ' path ' ) ;
var scroll <CAM> to <CAM> index = _ ref . scroll <CAM> to <CAM> index ; var update <CAM> scroll <CAM> offset <CAM> for <CAM> scroll <CAM> to <CAM> index:==:_ ref . update <CAM> scroll <CAM> offset <CAM> for <CAM> scroll <CAM> to <CAM> index ;
var event <CAM> resize = t . event <CAM> resize ; var get <CAM> row <CAM> cnt:==:t . get <CAM> row <CAM> cnt ;
var debug = require ( ' debug ' ) ( ' connect : dispatcher ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var blue400 = exports . blue400 = ' # 42a5f5 ' ; var blue500:==:exports . blue500    ' # 2196f3 ' ;
var settings = imports . settings ; var panels:==:imports . panels ;
var nock = require ( ' nock ' ) ; var assert:==:require ( ' assert ' ) ;
var util = require ( ' util ' ) ; var htmlsafe:==:helper . htmlsafe ;
var email = form . elements [ ' email ' ] var coc:==:form . elements [ ' coc ' ]
var right = parse <CAM> percent ( position <CAM> info . right , container <CAM> width ) ; var bottom:==:parse <CAM> percent ( position <CAM> info . bottom , container <CAM> height ) ;
var key = key <CAM> code ; var key <CAM> identifier:==:be . key <CAM> identifier ;
var name = attribute . name ; var arg:==:args . attributes [ name ] ;
var apply = function <CAM> prototype . apply ; var max:==:Math . max ;
var Surface = react <CAM> canvas . Surface ; var list <CAM> view:==:react <CAM> canvas . list <CAM> view ;
var ascii <CAM> hex <CAM> stream = core <CAM> stream . ascii <CAM> hex <CAM> stream ; var ccitt <CAM> fax <CAM> stream:==:core <CAM> stream . ccitt <CAM> fax <CAM> stream ;
var key = key <CAM> value . key ; var value:==:key <CAM> value . value ;
var _ li = 184 ; values [ _ li ] = _ li ; var _ lj:==:185 ; values [ _ lj ]    _ lj ;
var glyphs   = options . glyphs    |  |  [ ] var sizes:==:options . sizes    |  |  [ ]
var util = require ( ' hexo - util ' ) ; var highlight:==:util . highlight ;
var bind <CAM> to <CAM> any = document . get <CAM> element <CAM> by <CAM> id ( ' bind <CAM> to <CAM> any ' ) ; var adapter <CAM> list:==:document . get <CAM> element <CAM> by <CAM> id ( ' adapter <CAM> list ' ) ;
var _ nh = 215 ; values [ _ nh ] = _ nh ; var _ ni:==:216 ; values [ _ ni ]    _ ni ;
var _ url = this . _ _ url ; var _ i d:==:this . _ _ i d ;
var define <CAM> property = Object . define <CAM> property ; var has <CAM> own <CAM> property:==:Object . has <CAM> own <CAM> property ;
var type = opts . type  |  |  ' cpu ' ; var timeout <CAM> ms:==:opts . timeout <CAM> ms  |  0 ;
var unselect = t . unselect ; var day <CAM> selection <CAM> mousedown:==:t . day <CAM> selection <CAM> mousedown ;
var PUT = ' PUT ' ; var ALL:==:' ALL ' ;
var sphere = BABYLON . Mesh . create <CAM> sphere ( ' sphere ' , 10 . 0 , 10 . 0 , scene ) ; var plan:==:BABYLON . Mesh . create <CAM> plane ( ' plane ' , 10 . 0 , scene ) ;
var parse = _ _ dependency3 _ _ . parse ; var Compiler:==:_ _ dependency4 _ _ . Compiler ;
var category <CAM> thickness = layout . category <CAM> thickness ; var is <CAM> scalar:==:layout . is <CAM> scalar ;
var device <CAM> info = require ( ' device <CAM> info ' ) ; var event <CAM> emitter:==:require ( ' event <CAM> emitter ' ) ;
var autoprefixer = require ( ' autoprefixer ' ) ; var clean:==:require ( ' postcss - clean ' ) ;
var post <CAM> id = req . params . post <CAM> id ; var content:==:req . fields . content ;
var fs = require ( ' fs ' ) ; var path:==:require ( ' canonical - path ' ) ;
var head = document . head  |  |  document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' head ' ) [ 0 ] ; var link:==:document . create <CAM> element ( ' link ' ) ;
var n = width * percent  |  0 ; var i:==:width - n ;
var two <CAM> argument <CAM> pooler = pooled <CAM> class . two <CAM> argument <CAM> pooler ; var four <CAM> argument <CAM> pooler:==:pooled <CAM> class . four <CAM> argument <CAM> pooler ;
var reactdom <CAM> invalidaria <CAM> hook = require ( ' reactdom <CAM> invalidaria <CAM> hook ' ) ; var reactdom <CAM> null <CAM> input <CAM> value <CAM> prop <CAM> hook:==:require ( ' reactdom <CAM> null <CAM> input <CAM> value <CAM> prop <CAM> hook ' ) ;
var child <UND> process = require ( ' child <UND> process ' ) ; var crypto:==:require ( ' crypto ' ) ;
var actions = options . actions ; var pinned:==:options . pinned ;
var left = item <CAM> position . left ; var top:==:item <CAM> position . top ;
var dirname = path . dirname ; var join:==:path . join ;
var L10n = navigator . mozL10n . _ get <CAM> internalapi ( ) ; var Resolver:==:L10n . Resolver ;
var temp <CAM> var <CAM> transformer = traceur . codegeneration . temp <CAM> var <CAM> transformer ; var create <CAM> assignment <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> expression ;
var network = _ mobile <CAM> connections [ 0 ] . voice . network ; var icc <CAM> info:==:icc <CAM> card . icc <CAM> info ;
var y <CAM> yexit = Caml <UND> exceptions . create ( ' Parsing . y <CAM> yexit ' ) ; var Parse <UND> error:==:Caml <UND> exceptions . create ( ' Parsing . Parse <UND> error ' ) ;
var offset <CAM> height = b . offset <CAM> height ; var offset <CAM> left:==:b . offset <CAM> left ;
var p = createjs . extend ( Text , createjs . display <CAM> object ) ; var canvas:==:( createjs . create <CAM> canvas?createjs . create <CAM> canvas ( ) : document . create <CAM> element ( ' canvas ' ) ) ;
var geometry = line . geometry ; var type:==:line . type ;
var dirname = path . dirname ( main <CAM> app <CAM> script ) ; var basename:==:path . basename ( main <CAM> app <CAM> script ) ;
var fs = require ( ' fs ' ) var get:==:require ( ' simple - get ' )
var is <CAM> tab <CAM> key = utilities . is <CAM> tab <CAM> key ; var is <CAM> up <CAM> arrow:==:utilities . is <CAM> up <CAM> arrow ;
var txt = this . $ txt ; var f:==:function ( )
var y = p . y ; var z:==:p . z ;
var group = $ root . data ( ' group ' ) ; var name:==:$ root . data ( ' name ' ) ;
var A = db . model ( ' A ' , name : String , _ i d : Number ) ; var B:==:db . model ( ' B ' , other : Number ) ;
var start = Dom . node <CAM> at <CAM> offset ( range . start <CAM> container , range . start <CAM> offset ) ; var end:==:Dom . node <CAM> at <CAM> offset ( range . end <CAM> container , range . end <CAM> offset ) ;
var LITERAL <UND> EXPRESSION = ' LITERAL <UND> EXPRESSION ' ; var LITERAL <UND> PROPERTY <UND> NAME:==:' LITERAL <UND> PROPERTY <UND> NAME ' ;
var namespace = e . related <CAM> node . namespaceURI ; var target:==:e . target ;
var TABLE = this . instance . wt <CAM> table . TABLE ; var TD:==:closest <CAM> down ( elem , [ ' TD ' , ' TH ' ] , TABLE ) ;
var type = matching <CAM> tel . type  |  |  ' mobile ' ; var carrier:==:matching <CAM> tel . carrier ;
var element = info . element ; var data:==:info . data ;
var events = target & & target . $ eventsvar guid:==:events & & events . _ _ dep _ _ . guid
var callback = require ( ' callback ' ) ; var clone:==:require ( ' clone ' ) ;
var first = document . get <CAM> element <CAM> by <CAM> id ( ' first ' ) ; var last:==:document . get <CAM> element <CAM> by <CAM> id ( ' last ' ) ;
var editor = this . editor ; var $ elem:==:this . $ elem ;
var Person = db . model ( ' Person1907 ' , person <CAM> schema ) ; var Band:==:db . model ( ' Band1907 ' , band <CAM> schema ) ;
var info = imports . info ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var pi = math . pi ; var atanh:==:math . atanh ;
var disp   = this . disp ; var strength:==:options . strength ;
var graph = this . editor . graph ; var model:==:graph . model ;
var node <CAM> width = series <CAM> model . get ( ' node <CAM> width ' ) ; var node <CAM> gap:==:series <CAM> model . get ( ' node <CAM> gap ' ) ;
var damping <CAM> ratio = options . damping <CAM> ratio ; var period:==:options . period ;
var line <CAM> height = config . line <CAM> height ; var blame <CAM> data:==:this . blame <CAM> column . blame <CAM> data ;
var div = document . create <CAM> element ( ' div ' ) ; var text:==:div . append <CAM> child ( document . create <CAM> text <CAM> node ( ' text ' ) ) ;
var u <CAM> values = this . _ u <CAM> values = this . _ quantized <CAM> vertices . subarray ( 0 , vertex <CAM> count ) ; var v <CAM> values:==:this . _ v <CAM> values    this . _ quantized <CAM> vertices . subarray ( vertex <CAM> count , 2 * vertex <CAM> count ) ;
var focus <CAM> ripple <CAM> color = _ props2 . focus <CAM> ripple <CAM> color ; var focus <CAM> ripple <CAM> opacity:==:_ props2 . focus <CAM> ripple <CAM> opacity ;
var utilities = $ . fn . utilities ; var CONST:==:$ . fn . utilities . CONST ;
var User = db . model ( ' User ' , user <CAM> schema ) ; var Message:==:db . model ( ' Message ' , message <CAM> schema ) ;
var pooled <CAM> class = require ( ' pooled <CAM> class ' ) ; var react <CAM> browser <CAM> event <CAM> emitter:==:require ( ' react <CAM> browser <CAM> event <CAM> emitter ' ) ;
var type = this . type ; var curve:==:this . curve ;
var vertex <CAM> format = options . vertex <CAM> format ; var center:==:options . center ;
var is <CAM> new <CAM> line = _ whitespace . is <CAM> new <CAM> line ; var nonasci <CAM> iwhitespace:==:_ whitespace . nonasci <CAM> iwhitespace ;
var opts = _ _ alloy <CAM> id35 . opts  |  |  ; var models:==:_ _ alloy <CAM> id34 . models ;
var len = string . length ; var sub:==:word . substr ( 0 , len ) ;
var coords <CAM> arr = this . coords <CAM> arr ; var shading <CAM> type:==:this . shading <CAM> type ;
var positions = hierarchy . positions ; var holes:==:hierarchy . holes ;
var prepare <CAM> border <CAM> from <CAM> custom <CAM> added <CAM> range = function prepare <CAM> border <CAM> from <CAM> custom <CAM> added <CAM> range ( row <CAM> obj ) var range:==:row <CAM> obj . range ;
var cloud1 = cloud <CAM> layer . create ( -60 , 120 , ' cloud1 ' ) ; var cloud2:==:cloud <CAM> layer . create ( 900 , 170 , ' cloud2 ' ) ;
var name = ' ' + categories [ i ] . name ; var short <UND> name:==:categories [ i ] . short <UND> name ;
var lat = element . attr ( ' data - lat ' ) ; var lng:==:element . attr ( ' data - lng ' ) ;
var g = this . hexify ( this . rgba [ 1 ] ) ; var b:==:this . hexify ( this . rgba [ 2 ] ) ;
var fs = require ( ' fs ' ) ; var escape:==:utils . escape ;
var action = log <CAM> entry . action ; var prev <CAM> state:==:log <CAM> entry . prev <CAM> state ;
var X = this . XW * g ( L ) ; var Y:==:this . YW * g ( M ) ;
var O = new Schema ( _ i d : Schema . object <CAM> id ) ; var B:==:new Schema ( _ i d : mongoose . Schema . Types . Buffer ) ;
var line = this . dom . line ; var dot:==:this . dom . dot ;
var event <CAM> plugin <CAM> hub = require ( ' event <CAM> plugin <CAM> hub ' ) ; var event <CAM> propagators:==:require ( ' event <CAM> propagators ' ) ;
var minimum <CAM> batch <CAM> size = _ ref3 . minimum <CAM> batch <CAM> size ; var row <CAM> count:==:_ ref3 . row <CAM> count ;
var p = k . pos ; var r:==:k . rot ;
var win = window ; var location:==:win . location ;
var conn = options . connection ; var readme <CAM> info:==:options . readme <CAM> info ;
var card <CAM> index = options . card <CAM> index ; var contact:==:options . contact ;
var dox = require ( ' gulp - dox ' ) var map:==:require ( ' map - stream ' )
var index <CAM> of = utils . index <CAM> of ; var some:==:utils . some ;
var bbox = this . bbox ; var xstep:==:this . xstep ;
var $ cropper = self . $ cropper ; var hidden:==:' cropper - hidden ' ;
var x = event <CAM> data . x ; var y:==:event <CAM> data . y ;
var helpers = Chart . helpers = ; var each:==:helpers . each    function ( loopable , callback , self )
var CONNECTION <UND> STRING = DEFAULT <UND> CONNECTION <UND> STRING ; var rules:==:default <UND> rules ;
var id3 <CAM> track <CAM> controller = new _ id3 <CAM> track <CAM> controller2 . default ( this ) ; var level <CAM> controller:==:this . level <CAM> controller    new _ level <CAM> controller2 . default ( this ) ;
var sh        = option . shape ; var parent:==:option . parent ;
var col <CAM> coord <CAM> cache = this . col <CAM> coord <CAM> cache ; var slat <CAM> coord <CAM> cache:==:this . slat <CAM> coord <CAM> cache ;
var cell <CAM> layout <CAM> manager = _ props . cell <CAM> layout <CAM> manager ; var scroll <CAM> left:==:_ props . scroll <CAM> left ;
var svg = new window . Chartist . Svg ( ' svg ' ) ; var text:==:svg . elem ( ' text ' ) ;
var mongo <CAM> client = configuration . require . mongo <CAM> client ; var domain:==:require ( ' domain ' ) ;
var dispatch = _ props . dispatch ; var todos:==:_ props . todos ;
var input = new code <CAM> mirror . input <CAM> styles [ options . input <CAM> style ] ( this ) var display:==:this . display    new Display ( place , doc , input )
var ARRAY <UND> TYPE = ' ARRAY <UND> TYPE ' ; var ARROW <UND> FUNCTION:==:' ARROW <UND> FUNCTION ' ;
var on <CAM> scroll = this . props . on <CAM> scroll ; var scrollY:==:' scrollY ' in window ? window . scrollY : document . document <CAM> element . scroll <CAM> top ;
var concat = require ( ' gulp - concat ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var o = new function <CAM> node ( ' output <CAM> scope ' , [ x ] ) ; var n:==:new function <CAM> assignment <CAM> node ( ' f ' , [ ' x ' ] , o ) ;
var type = index <CAM> def . type  |  |  ' json ' ; var name:==:index <CAM> def . name ;
var retries = options . has <CAM> own <CAM> property ( ' retries ' ) ? options . retries : 5 ; var retry <CAM> delay:==:options . has <CAM> own <CAM> property ( ' retry <CAM> delay ' ) ? options . retry <CAM> delay : 50 ;
var expert <CAM> encoding = core <CAM> encodings . expert <CAM> encoding ; var get <CAM> encoding:==:core <CAM> encodings . get <CAM> encoding ;
var errorhandler = require ( ' errorhandler ' ) ; var cors:==:require ( ' cors ' ) ;
var vdom = this . vdomvar fields:==:validator . fields    [ ]
var start = partialstart ? parse <CAM> int ( partialstart , 10 ) : 0 ; var end:==:partialend ? parse <CAM> int ( partialend , 10 ) : stream . length - 1 ;
var skip = options . skip ; var limit:==:options . limit ;
var write <CAM> bits = this . sandbox . spy ( lcd , ' write <CAM> bits ' ) ; var pulse:==:this . sandbox . spy ( lcd , ' pulse ' ) ;
var store = amplify . store = function ( key , value , options ) var type:==:store . type ;
var min <CAM> width = this . _ min <CAM> width ; var entry <CAM> total <CAM> times:==:timeline <CAM> data . entry <CAM> total <CAM> times ;
var DIRECTION <UND> DOWN = gesture <CAM> detector . DIRECTION <UND> DOWN = ' down ' ; var DIRECTION <UND> LEFT:==:gesture <CAM> detector . DIRECTION <UND> LEFT    ' left ' ;
var level = config . levels <CAM> to <CAM> show ; var constrained:==:config . constrained ;
var name = state . name . identifier <CAM> token ; var func:==:create <CAM> function <CAM> declaration ( name , parameters , function <CAM> body ) ;
var TOTAL <UND> MEMORY = Module [ ' TOTAL <UND> MEMORY ' ]  |  |  16777216 ; var FAST <UND> MEMORY:==:Module [ ' FAST <UND> MEMORY ' ]  |  |  2097152 ;
var p1 = $ ( ' p1 ' ) ; var p2:==:$ ( ' p2 ' ) ;
var value = props . value ; var checked:==:props . checked ;
var model = models [ model <CAM> type ]  |  |  ; var type:==:model . type  |  |  ' object ' ;
var c9 = imports . c9 ; var preferences:==:imports . preferences ;
var Dummy8 = mongoose . model ( ' Dummy8 ' , dummy8 <CAM> schema ) ; var Dummy9:==:mongoose . model ( ' Dummy9 ' , dummy9 <CAM> schema ) ;
var slide = s . slides . eq ( index ) ; var img:==:slide . find ( ' img . swiper - lazy : not ( . swiper - lazy - loaded ) : not ( . swiper - lazy - loading ) ' ) ;
var binding = item . binding ; var command:==:item . command ;
var tool = worker <CAM> tools [ _ i ] . tool ; var name:==:worker <CAM> tools [ _ i ] . name ;
var col = obj . columns [ column ] ; var edit:==:col ? col . editable : null ;
var cell <CAM> layout <CAM> manager = _ props7 . cell <CAM> layout <CAM> manager ; var height:==:_ props7 . height ;
var selection <CAM> manager = powerbi . visuals . utility . selection <CAM> manager ; var color <CAM> helper:==:powerbi . visuals . color <CAM> helper ;
var $ container = self . $ container ; var $ cropper:==:self . $ cropper ;
var breaks = self . options . breaks ; var length:==:value . length ;
var scale9 <CAM> sprite = ccui . scale9 <CAM> sprite ; var proto:==:ccui . scale9 <CAM> sprite . webgl <CAM> render <CAM> cmd . prototype    Object . create ( cc . Node . webgl <CAM> render <CAM> cmd . prototype ) ;
var vertex <CAM> ids   = level . vertex <CAM> idsvar vertex <CAM> weights:==:level . vertex <CAM> weights
var q = $ q . defer ( ) ; var navigate:==:app <CAM> rate . navigate <CAM> to <CAM> app <CAM> store ( ) ;
var leave <CAM> routes = _ compute <CAM> changed <CAM> routes . leave <CAM> routes ; var change <CAM> routes:==:_ compute <CAM> changed <CAM> routes . change <CAM> routes ;
var funnel <CAM> align = series <CAM> model . get ( ' funnel <CAM> align ' ) ; var gap:==:series <CAM> model . get ( ' gap ' ) ;
var o = self . overlays [ i ] ; var s:==:o . compute <CAM> max <CAM> size ( self . connector ) ;
var current <CAM> target = tuple . current <CAM> target ; var listeners:==:listeners <CAM> table . get ( current <CAM> target ) ;
var fs = require ( ' fs ' ) ; var mime:==:require ( ' mime - types ' ) ;
var corner <CAM> type = params . corner <CAM> type ; var save <CAM> attributes:==:params . save <CAM> attributes ;
var b = face . b ; var c:==:face . c ;
var height = _ props5 . height ; var on <CAM> scroll:==:_ props5 . on <CAM> scroll ;
var d1 = _ add <CAM> div ( ' d1 ' ) ; var d2:==:_ add <CAM> div ( ' d2 ' ) ;
var dynCall <UND> vf = Module [ ' dynCall <UND> vf ' ] = asm [ ' dynCall <UND> vf ' ] ; var dynCall <UND> i:==:Module [ ' dynCall <UND> i ' ]    asm [ ' dynCall <UND> i ' ] ;
var wd = require ( ' wd ' ) ; var http:==:require ( ' http ' ) ;
var tts <CAM> status <CAM> box = document . get <CAM> element <CAM> by <CAM> id ( ' tts <CAM> status <CAM> box ' ) ; var tts <CAM> status:==:document . get <CAM> element <CAM> by <CAM> id ( ' tts <CAM> status ' ) ;
var all <CAM> items = this . els . all <CAM> items ; var pageY:==:e . changed <CAM> touches ? e . changed <CAM> touches [ 0 ] . pageY : e . pageY ;
var dominated <CAM> nodes = this . _ dominated <CAM> nodes ; var node <CAM> field <CAM> count:==:this . _ node <CAM> field <CAM> count ;
var dim = options . dim  |  |  ; var h:==:dim . h  |  |  0 ;
var path = require ( ' path ' ) ; var code <CAM> field <CAM> test <CAM> object:==:require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' code <CAM> field <CAM> test <CAM> object ' ) ) ;
var error = shared <CAM> util . error ; var info:==:shared <CAM> util . info ;
var current <CAM> style = _ state . current <CAM> style ; var current <CAM> velocity:==:_ state . current <CAM> velocity ;
var element = this . element , o = this . options ; var parent:==:element . parent ( ) ;
var react <CAM> fiber <CAM> commit <CAM> work = require ( ' react <CAM> fiber <CAM> commit <CAM> work ' ) ; var react <CAM> fiber <CAM> host <CAM> context:==:require ( ' react <CAM> fiber <CAM> host <CAM> context ' ) ;
var url = request . urlvar start:==:request . start
var react <CAM> test <CAM> reconcile <CAM> transaction = require ( ' react <CAM> test <CAM> reconcile <CAM> transaction ' ) ; var react <CAM> updates:==:require ( ' react <CAM> updates ' ) ;
var skip <CAM> shape <CAM> props = configuration . skip <CAM> shape <CAM> props ; var custom <CAM> validators:==:configuration . custom <CAM> validators  |  |  [ ] ;
var feature = this . feature ; var geom:==:feature . geometry ;
var scroll <CAM> to <CAM> alignment = _ state . scroll <CAM> to <CAM> alignment ; var scroll <CAM> top:==:_ state . scroll <CAM> top ;
var b = this . el . child ( ' em . x - btn - split ' ) ; var a:==:b . get <CAM> region ( ) . right - b . get <CAM> padding ( ' r ' ) ;
var required = element ( by . binding ( ' form . input . $ error . required ' ) ) ; var model:==:element ( by . binding ( ' model ' ) ) ;
var insert = require ( ' gulp - insert ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var language = imports . language ; var tooltip:==:imports [ ' language . tooltip ' ] ;
var languages = require ( ' prism - languages ' ) ; var highlight:==:Prism . highlight ;
var files = o . files ; var index:==:o . index ;
var client <CAM> left = element . client <CAM> left  |  |  document . body . client <CAM> left  |  |  0 ; var scroll <CAM> top:==:window . pagey <CAM> offset  |  |  element . scroll <CAM> top  |  |  document . body . scroll <CAM> top ;
var join = require ( ' path ' ) . join ; var extend:==:require ( ' util ' ) . _ extend ;
var i = _ i ; var previous:==:_ previous ;
var end <CAM> container = range <CAM> object . end <CAM> container ; var end <CAM> offset:==:range <CAM> object . end <CAM> offset ;
var sp = col . cell <CAM> filter . split ( ' : ' ) ; var filter:==:col . cell <CAM> filter ? $ filter ( sp [ 0 ] ) : null ;
var left = this . margin . left ; var top:==:this . margin . top ;
var dx3 = Math . max ( parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx2 ' , 0 ) ) , Math . min ( parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx4 ' , 0 ) ) , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx3 ' , 0 ) ) ) ) ; var dy3:==:Math . max ( 0 , Math . min ( 100 , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy3 ' , 0 ) ) ) ) ;
var html <CAM> tag = util . html <CAM> tag ; var stripHTML:==:util . stripHTML ;
var p1 = new Promise ( function ( resolve ) resolve ( ' p1 ' ) ; ) ; var p2:==:new Promise ( function ( resolve ) resolve ( ' p2 ' ) ; ) ;
var settings = imports . settings ; var cli:==:imports [ ' vim . cli ' ] ;
var slice = [ ] . slice ; var proto:==:Function . prototype ;
var path = require ( ' path ' ) var spawn:==:require ( ' child <UND> process ' ) . spawn
var request = require ( ' request ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var d = a . preds _ ; var e:==:a . preds <UND> off - 1 ;
var react <CAM> native <CAM> component <CAM> environment = require ( ' react <CAM> native <CAM> component <CAM> environment ' ) ; var react <CAM> native <CAM> text <CAM> component:==:require ( ' react <CAM> native <CAM> text <CAM> component ' ) ;
var document = window . document ; var slice:==:arr . slice ;
var NEXT = common . def ( NEXT <UND> STATE , ' . ' , flag ) ; var block:==:env . block ( ) ;
var Linking = require ( ' Linking ' ) ; var Platform:==:require ( ' Platform ' ) ;
var store = stdlib . Atomics . store ; var fround:==:stdlib . Math . fround ;
var tmpdir = require ( ' os ' ) . tmpdir ( ) ; var fs:==:require ( ' fs ' ) ;
var gl    = plot . glvar pixel <CAM> ratio:==:plot . pixel <CAM> ratio
var x = Math . max ( read <CAM> state . x  |  |  0 , 0 ) ; var y:==:Math . max ( read <CAM> state . y  |  |  0 , 0 ) ;
var barrier <CAM> callbacks = window . barrier <CAM> callbacks = ; var barrier <CAM> signals:==:window . barrier <CAM> signals    ;
var express = require ( ' express ' ) var basic:==:auth . basic (
var String = platform . String ; var Date:==:platform . Date ;
var fs = require ( ' graceful - fs ' ) var http:==:require ( ' http ' )
var m = new THREE . Matrix4 ( ) . make <CAM> perspective ( -1 , 1 , 1 , -1 , 1 , 100 ) ; var a:==:new THREE . Frustum ( ) . set <CAM> from <CAM> matrix ( m ) ;
var ready = require ( ' ready ' ) ; var eventproxy:==:require ( ' eventproxy ' ) ;
var img = self . data [ idx ] [ 7 ]  |  |  self . img <UND> sets [ img <UND> set ] . path + idx + ' . png ' + self . img <UND> suffix ; var title:==:self . include <UND> title ? ' title ' ' + ( actual  |  |  self . data [ idx ] [ 3 ] [ 0 ] ) + ' ' ' : '' ;
var combine <CAM> latest = Observable . combine <CAM> latest = function ( ) var len:==:arguments . length , args    new Array ( len ) ;
var gulp = require ( ' gulp ' ) var uglify:==:require ( ' gulp - uglify ' ) ;
var label <CAM> color = _ props . label <CAM> color ; var label <CAM> position:==:_ props . label <CAM> position ;
var city = this . _ $ city <CAM> picker . val ( ) . trim ( ) ; var code:==:this . _ code  |  |  null ;
var first <CAM> day <CAM> of <CAM> week = this . date <CAM> locale . first <CAM> day <CAM> of <CAM> week ; var short <CAM> days:==:this . date <CAM> locale . short <CAM> days ;
var mkdirp = require ( ' mkdirp ' ) var tmp:==:osenv . tmpdir ( )
var path = require ( ' path ' ) ; var axios:==:require ( ' axios ' ) ;
var modA = path . resolve ( base , ' modA ' ) var modB:==:path . resolve ( base , ' modB ' )
var fs = require ( ' fs ' ) ; var helper:==:require ( ' helper ' ) ;
var Response = function Response ( body , ref ) var url:==:ref . url ;
var parent = goog . dom . get <CAM> element ( ' offset - parent - overflow ' ) ; var child:==:goog . dom . get <CAM> element ( ' offset - child - overflow ' ) ;
var blame <CAM> data = this . blame <CAM> column . blame <CAM> data ; var selected <CAM> text:==:this . selected <CAM> text ;
var commands = imports . commands ; var navigate:==:imports . navigate ;
var dynCall <UND> vidii = Module [ ' dynCall <UND> vidii ' ] = asm [ ' dynCall <UND> vidii ' ] ; var dynCall <UND> iiiii:==:Module [ ' dynCall <UND> iiiii ' ]    asm [ ' dynCall <UND> iiiii ' ] ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var touchable <CAM> without <CAM> feedback:==:require ( ' touchable <CAM> without <CAM> feedback ' ) ;
var source <CAM> map <CAM> module = global . source <CAM> map <CAM> module = global . source <CAM> map <CAM> module  |  |  ; var util:==:source <CAM> map <CAM> module [ ' util ' ] ;
var height = options . height  |  |  10 . 0 ; var subdivisions:==:options . subdivisions  |  |  1  |  0 ;
var reliable <CAM> socket = kaefer . reliable <CAM> socket ; var reconnect <CAM> socket:==:kaefer . reconnect <CAM> socket ;
var text <CAM> content = Object . get <CAM> own <CAM> property <CAM> descriptor ( Node . prototype , ' text <CAM> content ' ) ; var innerHTML:==:Object . get <CAM> own <CAM> property <CAM> descriptor ( Element . prototype , ' innerHTML ' ) ;
var start = new moment ( start <CAM> time , format ) ; var end:==:new moment ( end <CAM> time , format ) ;
var btn3 = plugin . get <CAM> element ( ' btn3 ' ) ; var btn4:==:plugin . get <CAM> element ( ' btn4 ' ) ;
var get <CAM> node <CAM> length = dom . get <CAM> node <CAM> length ; var array <CAM> contains:==:dom . array <CAM> contains ;
var data = this . _ data ; var headers:==:this . _ metadata . _ headers ;
var util = require ( ' util ' ) var oauth2:==:require ( ' passport - oauth2 ' )
var scheduler = instance . get ( ' scheduler ' ) ; var locale:==:scheduler . get ( ' locale ' ) ;
var test <CAM> module = react <CAM> native . native <CAM> modules ; var deep <CAM> differ:==:require ( ' deep <CAM> differ ' ) ;
var complex = math . complex ; var Unit:==:math . type . Unit ;
var Dispatcher = require ( ' Dispatcher ' ) ; var flux <CAM> reduce <CAM> store:==:require ( ' flux <CAM> reduce <CAM> store ' ) ;
var amber700 = exports . amber700 = ' # ffa000 ' ; var amber800:==:exports . amber800    ' # ff8f00 ' ;
var r = row . clone <CAM> node ( ) ; var t:==:title . clone <CAM> node ( ) ;
var x = -dimensions . bounds . minx ; var width:==:Math . ceil ( dimensions . width ) + x + double <CAM> padding ;
var is = require ( ' is ' ) ; var tick:==:require ( ' next - tick ' ) ;
var React = require ( ' React ' ) ; var react <CAM> component <CAM> with <CAM> pure <CAM> render <CAM> mixin:==:require ( ' react <CAM> component <CAM> with <CAM> pure <CAM> render <CAM> mixin ' ) ;
var width = svg . attr ( ' width ' ) ; var height:==:svg . attr ( ' height ' ) ;
var description = $ scope . description ; var unit <CAM> to <CAM> satoshi:==:config . settings . unit <CAM> to <CAM> satoshi ;
var inspector = require ( ' node - inspector ' ) ; var spawn:==:require ( ' child <UND> process ' ) . spawn ;
var mouse = create <CAM> vector ( mouseX , mouseY ) ; var flee:==:this . flee ( mouse ) ;
var ui = imports . ui ; var focus <CAM> manager:==:imports . focus <CAM> manager ;
var fixed <CAM> rows <CAM> top = this . wot . get <CAM> setting ( ' fixed <CAM> rows <CAM> top ' ) ; var total <CAM> rows:==:this . wot . get <CAM> setting ( ' total <CAM> rows ' ) ;
var draw    = compat ( ' s <CAM> echo ' ,     ' draw ' ) ; var records <CAM> total:==:compat ( ' i <CAM> total <CAM> records ' ,   ' records <CAM> total ' ) ;
var i d = _ element <CAM> id ( $ ( this ) , idx ) ; var item:==:items . filter ( ' [ aria - controls ' + ( this . i d  |  |  0 ) + ' ] ' ) [ 0 ] ;
var properties = this . _ properties <CAM> changed ; var create <CAM> vertex <CAM> array:==:this . _ create <CAM> vertex <CAM> array ;
var appear <CAM> to <CAM> class = data . appear <CAM> to <CAM> class ; var appear <CAM> active <CAM> class:==:data . appear <CAM> active <CAM> class ;
var x = t . x ; var y:==:t . y ;
var Page = ctx . model ( ' Page ' ) ; var path:==:file . path ;
var exec = require ( ' child <UND> process ' ) . exec ; var crypto:==:require ( ' crypto ' ) ;
var key <CAM> loader = new _ key <CAM> loader2 . default ( this ) ; var id3 <CAM> track <CAM> controller:==:new _ id3 <CAM> track <CAM> controller2 . default ( this ) ;
var validate <CAM> index = _ _ webpack <UND> require _ _ ( 3 ) . validate <CAM> index ; var get <CAM> safe <CAM> property:==:_ _ webpack <UND> require _ _ ( 17 ) . get <CAM> safe <CAM> property ;
var touches = this . create <CAM> touch <CAM> list ( options . touches , target ) ; var target <CAM> touches:==:this . create <CAM> touch <CAM> list ( options . target <CAM> touches , target ) ;
var query = req . uri . query ; var path:==:query & & query . path + ' ' ;
var source <CAM> activity = this . g . get <CAM> by <CAM> id ( source <CAM> activity <CAM> id ) ; var destination <CAM> activity:==:this . g . get <CAM> by <CAM> id ( destination <CAM> activity <CAM> id ) ;
var User = System . User ; var known <CAM> user <CAM> properties:==:System . known <CAM> user <CAM> properties ;
var react <CAM> test <CAM> text <CAM> component = require ( ' react <CAM> test <CAM> text <CAM> component ' ) ; var react <CAM> test <CAM> empty <CAM> component:==:require ( ' react <CAM> test <CAM> empty <CAM> component ' ) ;
var detail = evt . detail  |  |  ; var i d , timestamp , node:==:detail ;
var child <UND> process = require ( ' child <UND> process ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var w = Ti . UI . create <CAM> window ( background <CAM> color : ' # ff9900 ' ) ; var l:==:Ti . UI . create <CAM> label (
var React = require ( ' React ' ) ; var ReactDOM:==:require ( ' ReactDOM ' ) ;
var toggle <CAM> favorite = function toggle <CAM> favorite ( ) var contact:==:contact <CAM> data ;
var current <CAM> time = options . current <CAM> time ; var start <CAM> time:==:options . start <CAM> time ;
var a32 = this . a32 ; var a33:==:this . a33 ;
var t = true ; var f:==:false ;
var s1 = Cartesian2 . from <CAM> array ( tex <CAM> coords , i1 * 2 , s1 <CAM> scratch ) ; var s2:==:Cartesian2 . from <CAM> array ( tex <CAM> coords , i2 * 2 , s2 <CAM> scratch ) ;
var uid = write <CAM> stream . _ _ atomic <CAM> chown . uidvar gid:==:write <CAM> stream . _ _ atomic <CAM> chown . gid
var line <CAM> number = this . profile <CAM> node . line <CAM> number ? this . profile <CAM> node . line <CAM> number - 1 : 0 ; var column <CAM> number:==:this . profile <CAM> node . column <CAM> number ? this . profile <CAM> node . column <CAM> number - 1 : 0 ;
var x <CAM> scale1 = chart . scales . x <CAM> scale1 ; var x <CAM> scale2:==:chart . scales . x <CAM> scale2 ;
var composite = pre <CAM> evaluated <CAM> font . composite ; var descriptor:==:pre <CAM> evaluated <CAM> font . descriptor ;
var graph = raw . models . graph ( ) ; var chart:==:raw . chart ( )
var assert = require ( ' assert ' ) ; var Token:==:require ( ' cst ' ) . Token ;
var htmlparser = require ( ' htmlparser2 ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var div = test <CAM> div . append <CAM> child ( document . create <CAM> element ( ' div ' ) ) ; var a:==:div . append <CAM> child ( document . create <CAM> element ( ' a ' ) ) ;
var test   = require ( ' utest ' ) ; var pool <CAM> config:==:common . pool <CAM> config ;
var readdir <CAM> sync = require ( ' graceful - fs ' ) . readdir <CAM> syncvar stat <CAM> sync:==:require ( ' graceful - fs ' ) . stat <CAM> sync
var express = require ( ' express ' ) ; var http:==:require ( ' http ' ) ;
var test <CAM> details = test <CAM> details <CAM> factory ( ) ; var event:==:test <CAM> details . event ;
var options = that . options ; var data <CAM> source:==:that . data <CAM> source ;
var Navigator = require ( ' Navigator ' ) ; var Switch:==:require ( ' Switch ' ) ;
var visual <CAM> max = node <CAM> model . get ( ' visual <CAM> max ' ) ; var data <CAM> extent:==:node <CAM> layout . data <CAM> extent . slice ( ) ;
var ruby = $ . create ( ' ruby ' ) var rt:==:$ . create ( ' rt ' )
var e = self . handlers [ event ] ; var index:==:index <CAM> of ( e , callback ) ;
var canvas = properties . canvas ; var container:==:properties . container ;
var a <CAM> selected <CAM> indices = this . a <CAM> selected <CAM> indices ; var i <CAM> lead <CAM> index:==:this . i <CAM> lead <CAM> index ;
var POSITION <UND> INDEX = point <CAM> primitive . POSITION <UND> INDEX = 1 ; var COLOR <UND> INDEX:==:point <CAM> primitive . COLOR <UND> INDEX    2 ;
var width = this . width = map <CAM> div . client <CAM> width ; var height:==:this . height    map <CAM> div . client <CAM> height ;
var sinon = require ( ' sinon ' ) ; var is <CAM> nodejs:==:test <CAM> utils . is <CAM> nodejs ;
var coefficents <CAM> magnitude = this . coefficents <CAM> magnitude ; var neighbors <CAM> significance:==:this . neighbors <CAM> significance ;
var minimist = require ( ' minimist ' ) ; var rc:==:require ( ' rc ' ) ;
var eslint = require ( ' gulp - eslint ' ) ; var file:==:require ( ' gulp - file ' ) ;
var m = SIMD . float32x4 . from <CAM> int8x16 <CAM> bits ( SIMD . Int8x16 ( 0x3F800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:SIMD . Int8x16 . from <CAM> float32x4 <CAM> bits ( m ) ;
var new <CAM> child = unwrap ( new <CAM> child <CAM> wrapper ) ; var ref <CAM> child:==:ref <CAM> child <CAM> wrapper ? unwrap ( ref <CAM> child <CAM> wrapper ) : null ;
var cell <CAM> count = _ ref . cell <CAM> count ; var cell <CAM> size <CAM> and <CAM> position <CAM> getter:==:_ ref . cell <CAM> size <CAM> and <CAM> position <CAM> getter ;
var background <CAM> color = ec <CAM> model . get ( ' background <CAM> color ' )  |  |  ' transparent ' ; var painter:==:zr . painter ;
var BAD = 30 ; var MEM:==:31 ;
var _ react <CAM> dom = _ _ webpack <UND> require _ _ ( 315 ) ; var _ react <CAM> dom2 = _ interop <CAM> require <CAM> default ( _ react <CAM> dom ) ; var _ css <CAM> transition <CAM> group:==:_ _ webpack <UND> require _ _ ( 495 ) ; var _ css <CAM> transition <CAM> group2    _ interop <CAM> require <CAM> default ( _ css <CAM> transition <CAM> group ) ;
var ax = this . ax + this . system . gx ; var ay:==:this . ay + this . system . gy ;
var diff = macd . diff ; var signal:==:macd . signal . result ;
var has <CAM> vertex <CAM> normals = encoding . has <CAM> vertex <CAM> normals ; var exaggeration:==:parameters . exaggeration ;
var comp2 = name : ' key2 ' , content : ' some thing in comp2 ' ; var key3:==:' key3 ' ;
var keys = Object . keys ( data . kernelspecs ) . sort ( function ( a , b ) var da:==:data . kernelspecs [ a ] . spec . display <UND> name ;
var dest = opt <UND> dest ? opt <UND> dest : [ ] ; var cos:==:Math . cos ( angle ) ;
var polygon <CAM> hierarchy = options . polygon <CAM> hierarchy ; var vertex <CAM> format:==:default <CAM> value ( options . vertex <CAM> format , vertex <CAM> format . DEFAULT ) ;
var w = i * width * 4 + j * 4 ; var pixel:==:~~ ( pixels [ w ] * 0 . 299 + pixels [ w + 1 ] * 0 . 587 + pixels [ w + 2 ] * 0 . 114 ) ;
var key = ast . key . visit ( this ) ; var value:==:ast . value . visit ( this ) ;
var y = pointer . pageY - newbbox . scroll <CAM> body <CAM> top ; var x:==:pointer . pageX - newbbox . scroll <CAM> body <CAM> left ;
var react <CAM> generic <CAM> batching = require ( ' react <CAM> generic <CAM> batching ' ) ; var synthetic <CAM> event:==:require ( ' synthetic <CAM> event ' ) ;
var command <CAM> list = frame <CAM> state . command <CAM> list ; var passes:==:frame <CAM> state . passes ;
var attrs = data . attrs ; var props:==:data . props ;
var overscan <CAM> row <CAM> count = props . overscan <CAM> row <CAM> count ; var row <CAM> count:==:props . row <CAM> count ;
var timestamps = this . _ profile <CAM> samples . timestamps ; var sizes:==:this . _ profile <CAM> samples . sizes ;
var resizable = this . options . resizable ; var wrapper:==:this . wrapper ;
var combine <CAM> series = powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . combine <CAM> series , trend <CAM> line <CAM> helper . defaults . combine <CAM> series ) ; var use <CAM> highlight <CAM> values:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( trend <CAM> properties , trend <CAM> line <CAM> property <CAM> names . use <CAM> highlight <CAM> values , trend <CAM> line <CAM> helper . defaults . use <CAM> highlight <CAM> values ) ;
var react <CAM> host <CAM> component = require ( ' react <CAM> host <CAM> component ' ) ; var react <CAM> native <CAM> component <CAM> environment:==:require ( ' react <CAM> native <CAM> component <CAM> environment ' ) ;
var less = require ( ' less ' ) ; var postcss:==:require ( ' postcss ' ) ;
var x = value1 . x - value2 . x ; var y:==:value1 . y - value2 . y ;
var p = positions [ i ] ; var x:==:p . x ;
var chalk = require ( ' chalk ' ) ; var assign:==:require ( ' lodash ' ) . assign ;
var check <CAM> el = instance . get ( ' check <CAM> el ' ) ; var checked:==:check <CAM> el . attr ( ' checked ' ) ;
var a = response [ ' a ' ] ; var a <CAM> inb:==:response [ ' a <CAM> inb ' ] ;
var frame <CAM> list = timeline . frame <CAM> list ; var i:==:frame <CAM> list . length ;
var split <CAM> editor = window . split <CAM> editor = util . create <CAM> split <CAM> editor ( ' editor ' ) ; var editor1:==:window . editor1    split <CAM> editor . editor0 ;
var util = require ( ' util ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var addrs = alladdrs ( req , trust ) ; var addr:==:addrs [ addrs . length - 1 ] ;
var domain = require ( ' domain ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var g1 = obj . g1 ; var g2:==:Object . get <CAM> own <CAM> property <CAM> descriptor ( obj , ' g2 ' ) . get ;
var width = $ ( window ) . width ( ) ; var height:==:$ ( window ) . height ( ) ;
var a = document . create <CAM> element ( ' a ' ) ; var b:==:document . create <CAM> element ( ' b ' ) ;
var entry = _ _ metadata : entry <CAM> metadata ; var etag:==:xml <CAM> attribute <CAM> value ( dom <CAM> element , ' etag ' , odata <CAM> meta <CAM> xml <CAM> ns ) ;
var n = + v . substr ( this . unique . length + 1 ) var prompt:==:this . prompts [ n ]
var frame = this . client . find <CAM> element ( ' # lockscreen - frame ' ) ; var hidden:==:frame . get <CAM> attribute ( ' aria - hidden ' )      ' true ' ;
var ux = app . ns ( ' ux ' ) ; var services:==:app . ns ( ' services ' ) ;
var mkdirp = require ( ' mkdirp ' ) ; var pgp:==:require ( ' openpgp ' ) ;
var async = require ( ' async ' ) ; var assign:==:require ( ' object - assign ' ) ;
var host = config . host  |  |  ' localhost ' ; var port:==:( Number ( config . port ) + 1 )  |  |  3001 ;
var api = this . _ api ; var coord <CAM> sys <CAM> mgr:==:this . _ coord <CAM> sys <CAM> mgr ;
var el = this . el ; var position:==:el . get <CAM> attribute ( ' position ' ) ;
var x = topo . data [ ' switchs ' ] [ i d ] . x ; var y:==:topo . data [ ' switchs ' ] [ i d ] . y ;
var timing <CAM> function <CAM> utils = require ( ' timing <CAM> function <CAM> utils ' ) ; var step <CAM> editor <CAM> template:==:require ( ' text! <CAM> step <CAM> editor <CAM> template . html ' ) ;
var request = require ( ' request ' ) ; var iconv:==:require ( ' iconv - lite ' ) ;
var ed2 = join ( ' ed2 ' ) ; var ed3:==:join ( ' ed3 ' ) ;
var token <CAM> url = security . token <CAM> url ; var scopes:==:security . scopes ;
var t = this . trigger . get <CAM> top ( ) ; var h:==:this . trigger . get <CAM> height ( ) ;
var accessors = gltf . accessors ; var skins:==:gltf . skins ;
var operation = req . service . api . operations [ req . operation ] ; var input:==:operation . input ;
var basename = path . basename ; var join:==:path . join ;
var rename = require ( ' gulp - rename ' ) ; var header:==:require ( ' gulp - header ' ) ;
var css <CAM> class = theme . css <CAM> class ; var div:==:document . create <CAM> element ( ' div ' ) ;
var message = v . message ; var type:==:v . type ;
var util = require ( ' util ' ) ; var mime:==:require ( ' mime ' ) ;
var s = f ( src <CAM> value . get ( ) ) ; var d:==:dst <CAM> value . get ( ) ;
var func = function ( ) return ; ; var main:==:builder . instantiate ( ' ' : func : func ) . exports . main ;
var object <CAM> descriptors = options . object <CAM> descriptors ; var object <CAM> definitions:==:options . object <CAM> definitions ;
var west = Math . max ( rectangle1 . west , rectangle2 . west ) ; var south:==:Math . max ( rectangle1 . south , rectangle2 . south ) ;
var params = _ state . params ; var components:==:_ state . components ;
var outline <CAM> color = Property . get <CAM> value <CAM> or <CAM> cloned <CAM> default ( ellipsoid . outline <CAM> color , time , Color . BLACK , scratch <CAM> color ) ; var material:==:material <CAM> property . get <CAM> value ( time , default <CAM> value ( ellipsoid . material , default <CAM> material ) , this . _ material ) ;
var username = req . param ( ' username ' ) ; var email:==:req . param ( ' email ' ) . trim ( ) ;
var clock = spherical . clock ; var cone:==:spherical . cone ;
var Buffer = buffer . Buffer ; var slow <CAM> buffer:==:buffer . slow <CAM> buffer ;
var max = Math . log ( this . options . max ) ; var min:==:this . options . min      0 ? 0 : Math . log ( this . options . min ) ;
var get = Ember . get ; var run:==:Ember . run ;
var dirty = this . _ dirty <CAM> style <CAM> properties  |  |  ( this . _ dirty <CAM> style <CAM> properties = ) ; var style:==:this . element . style ;
var html <CAM> element = scope . wrappers . html <CAM> element ; var assert:==:scope . assert ;
var type = evt . type ; var char <CAM> code:==:evt . char <CAM> code ;
var metadata <CAM> service = exports . metadata <CAM> service = _ _ webpack <UND> require _ _ ( 306 ) ; var cordova <CAM> popup <CAM> navigator:==:exports . cordova <CAM> popup <CAM> navigator    _ _ webpack <UND> require _ _ ( 341 ) ;
var path = require ( ' path ' ) ; var Readable:==:require ( ' stream ' ) . Readable ;
var drift = this . options . drift ; var slop:==:-this . options . slop ;
var frame <CAM> object = frame <CAM> object <CAM> list [ i ] ; var frame:==:data <CAM> parser . parse <CAM> transform <CAM> frame ( frame <CAM> object , frame <CAM> rate ) ;
var poll <CAM> interval = default <CAM> value ( options . poll <CAM> interval , 1 ) ; var timeout:==:default <CAM> value ( options . timeout , 5000 ) ;
var w = $ ( window ) . height ( ) ; var h:==:$ ( ' # nav ' ) . outer <CAM> height ( ) ;
var shadow <CAM> map <CAM> camera = shadow <CAM> map . _ shadow <CAM> map <CAM> camera ; var scene <CAM> camera:==:shadow <CAM> map . _ scene <CAM> camera ;
var tooltip = imports [ ' language . tooltip ' ] ; var settings:==:imports . settings ;
var ch = this . _ ch  |  0var dh:==:this . _ dh  |  0
var assert = require ( ' assert ' ) ; var client:==:marionette . client ( ) ;
var fresh = eval ( $ this . attr ( ' fresh ' )  |  |  ' true ' ) ; var external:==:eval ( $ this . attr ( ' external ' )  |  |  ' false ' ) ;
var dynCall <UND> viiiiiiiii = Module [ ' dynCall <UND> viiiiiiiii ' ] = asm [ ' dynCall <UND> viiiiiiiii ' ] ; var dynCall <UND> ii:==:Module [ ' dynCall <UND> ii ' ]    asm [ ' dynCall <UND> ii ' ] ;
var y = sphere . center . y - this . origin . y ; var z:==:sphere . center . z - this . origin . z ;
var fs = require ( ' co - fs - extra ' ) ; var is:==:require ( ' is ' ) ;
var puk = this . _ elements . puk <CAM> input . value ; var new <CAM> pin:==:this . _ elements . new <CAM> pin <CAM> input . value ;
var e = new constant <CAM> node ( 3 ) ; var f:==:n . transform ( function ( node )
var yargs = require ( ' yargs ' ) ; var argv:==:yargs . argv ;
var    LEN = 21 ; var    LENEXT:==:22 ;
var el = this . el ; var rotation <CAM> aux:==:this . rotation <CAM> aux    this . rotation <CAM> aux  |  |  x : 0 , y : 0 , z : 0 ;
var _ bm = 28 ; values [ _ bm ] = _ bm ; var _ bn:==:29 ; values [ _ bn ]    _ bn ;
var legend <CAM> icon = powerbi . visuals . legend <CAM> icon ; var tooltip <CAM> builder:==:powerbi . visuals . tooltip <CAM> builder ;
var y = wc . y ; var z:==:wc . z ;
var delete <CAM> listener = react <CAM> browser <CAM> event <CAM> emitter . delete <CAM> listener ; var listen <CAM> to:==:react <CAM> browser <CAM> event <CAM> emitter . listen <CAM> to ;
var start = Arr . find ( get <CAM> first <CAM> children ( elm ) , Fun . curry ( Compare . eq , start <CAM> node ) ) ; var end:==:Arr . find ( get <CAM> last <CAM> children ( elm ) , Fun . curry ( Compare . eq , end <CAM> node ) ) ;
var granularity = corridor . granularity ; var width:==:corridor . width ;
var doc = document ; var document <CAM> element:==:doc . document <CAM> element ;
var COOKIES <UND> ENABLED = process . env . COOKIES <UND> ENABLED  |  |  false ; var PAGE <UND> DONE <UND> CHECK <UND> TIMEOUT:==:process . env . PAGE <UND> DONE <UND> CHECK <UND> TIMEOUT  |  |  300 ;
var Panel = imports . Panel ; var ui:==:imports . ui ;
var except <CAM> aligned = this . _ except <CAM> aligned ; var except <CAM> method:==:this . _ except <CAM> method ;
var dense <CAM> matrix = math . type . dense <CAM> matrix ; var mad:==:math . mad ;
var anchor <CAM> offset = selection . anchor <CAM> offset ; var focus <CAM> node:==:selection . focus <CAM> node ;
var create <CAM> variable <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> statement ; var create <CAM> while <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> while <CAM> statement ;
var component = el . components [ component <CAM> name ] ; var schema:==:component & & component . schema ;
var notification = _ ref . notification ; var destination:==:_ ref . destination ;
var PROPERTY <UND> VARIABLE <UND> DECLARATION = ' PROPERTY <UND> VARIABLE <UND> DECLARATION ' ; var REST <UND> PARAMETER:==:' REST <UND> PARAMETER ' ;
var is <CAM> scrolling = _ ref . is <CAM> scrolling ; var row <CAM> size <CAM> and <CAM> position <CAM> manager:==:_ ref . row <CAM> size <CAM> and <CAM> position <CAM> manager ;
var spawn = child <CAM> process . spawn ; var exec:==:child <CAM> process . exec ;
var disable <CAM> header = _ props . disable <CAM> header ; var grid <CAM> class <CAM> name:==:_ props . grid <CAM> class <CAM> name ;
var doc = wrap ( document ) ; var a:==:document . create <CAM> element ( ' a ' ) ;
var search = conf . search ; var encoding:==:conf . encoding ;
var commands = imports . commands ; var tooltip:==:imports . tooltip ;
var postcss = require ( ' gulp - postcss ' ) ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var icon = self . settings . icon ? prefix + ' ico ' + prefix + ' i- ' + self . settings . icon : '' ; var image:==:self . settings . image ? ' style ' background - image : url ( \ '' + self . settings . image + ' \ ' ) ' ' : '' ;
var operator = tree . operator ; var operand:==:tree . operand ;
var authorized = options . authorized  |  |  noop ; var background:==:options . background  |  |  noop ;
var content = data . content ; var ncells:==:this . ncells ( ) ;
var l = this . _ len + = lengthvar s:==:this . _ s    ( this . _ s  |  |  0 )
var crypto = require ( ' crypto ' ) var fs:==:require ( ' graceful - fs ' )
var npm = require ( ' npm ' ) ; var path:==:require ( ' path ' ) ;
var primitives = this . _ primitives ; var length:==:primitives . length ;
var signature = signatures [ signatures . length - 1 ] ; var len:==:signature . parameters . length ;
var connection = navigator . connection  |  |  navigator . moz <CAM> connection  |  |  navigator . webkit <CAM> connection ; var type:==:connection . type ;
var start <CAM> date = this . arg ( ' start <CAM> date ' ) ; var end <CAM> date:==:this . arg ( ' end <CAM> date ' ) ;
var format = new ol . format . MVT ( ) ; var source:==:new ol . source . vector <CAM> tile (
var CALL <UND> EXPRESSION = ' CALL <UND> EXPRESSION ' ; var CALL <UND> SIGNATURE:==:' CALL <UND> SIGNATURE ' ;
var query <CAM> hash = query <CAM> tools . query <CAM> hash ; var matches <CAM> query:==:query <CAM> tools . matches <CAM> query ;
var slice = [ ] . slice ; var proto:==:Object . create ( html <CAM> element . prototype ) ;
var item = this . items [ index ] ; var filepath:==:item . filepath ;
var editor = menu . editor ; var $ text <CAM> container <CAM> elem:==:editor . $ text <CAM> container <CAM> elem ;
var length = Compass . Points . length ; var heading:==:Math . floor ( this . heading ) ;
var editor = this . editor ; var debug:==:editor . config . debug ;
var to <CAM> field = conversation <CAM> view . to <CAM> field ; var recipients <CAM> list:==:conversation <CAM> view . recipients <CAM> list ;
var title = validator . trim ( req . body . title  |  |  '' ) ; var tab:==:validator . trim ( req . body . tab  |  |  '' ) ;
var strip <CAM> buffered = options . strip <CAM> buffered = = = true ; var filename:==:options . filename ;
var main = params . main ; var tagdict:==:main . tagdict ;
var use <CAM> collab = options . use <CAM> collab ; var use <CAM> send:==:! options . use <CAM> collab & & options . use <CAM> send ;
var is <CAM> string = leaflet <CAM> helpers . is <CAM> string ; var add <CAM> marker <CAM> watcher:==:leaflet <CAM> markers <CAM> helpers . add <CAM> marker <CAM> watcher ;
var start <CAM> angle = shape . start <CAM> angle ; var end <CAM> angle:==:shape . end <CAM> angle ;
var select = element . find ( ' md - select ' ) ; var controller:==:element . controller ( ' md <CAM> input <CAM> container ' ) ;
var providers = opts . providers  |  |  ; var context:==:opts . context  |  |  ;
var max <CAM> resolution = this . max <CAM> resolution _ ; var min <CAM> resolution:==:this . min <CAM> resolution _ ;
var modals = this . _ modals ( ) ; var options:==:this . options ;
var renderer = scope . _ renderer ; var coordinator:==:scope . _ coordinator ;
var is <CAM> stream = core <CAM> primitives . is <CAM> stream ; var color <CAM> space:==:core <CAM> color <CAM> space . color <CAM> space ;
var seen <CAM> unicode <CAM> char = this . seen <CAM> unicode <CAM> char ; var seen <CAM> unicode <CAM> char <CAM> in <CAM> comment:==:this . seen <CAM> unicode <CAM> char <CAM> in <CAM> comment ;
var node <CAM> list = scope . wrappers . node <CAM> list ; var get <CAM> tree <CAM> scope:==:scope . get <CAM> tree <CAM> scope ;
var observable <CAM> array = BABYLON . observable <CAM> array ; var array <CAM> changed:==:BABYLON . array <CAM> changed ;
var x = filter <CAM> area . x - offsetX ; var y:==:filter <CAM> area . y - offsetY ;
var position <CAM> range <CAM> for <CAM> path <CAM> async = exports . position <CAM> range <CAM> for <CAM> path <CAM> async = promisify <CAM> sync <CAM> fn ( position <CAM> range <CAM> for <CAM> path ) ; var get <CAM> line <CAM> number <CAM> for <CAM> path <CAM> async:==:exports . get <CAM> line <CAM> number <CAM> for <CAM> path <CAM> async    promisify <CAM> sync <CAM> fn ( get <CAM> line <CAM> number <CAM> for <CAM> path ) ;
var sockjs = require ( ' sockjs ' ) ; var events:==:require ( ' events ' ) ;
var net = require ( ' net ' ) ; var http:==:require ( ' http ' ) ;
var log = this . log ; var theme:==:this . theme ;
var versions = data . versions ; var version:==:latest <CAM> version ( versions ) ;
var radius = options . radius  |  |  2 ; var tube:==:options . tube  |  |  0 . 5 ;
var entry = this . get <CAM> anchor ( next <CAM> record . entry <CAM> anchor ) ; var exit:==:this . get <CAM> anchor ( cur <CAM> record . exit <CAM> anchor ) ;
var vertex <CAM> node = vertex <CAM> nodes [ i ] ; var x:==:vertex <CAM> node . get <CAM> attribute ( ' x ' ) ;
var win = $ ( window ) ; var scroll <CAM> top:==:win . scroll <CAM> top ( ) ;
var on <CAM> after <CAM> validate = jasmine . create <CAM> spy ( ' on <CAM> after <CAM> validate ' ) ; var on <CAM> after <CAM> change:==:jasmine . create <CAM> spy ( ' on <CAM> after <CAM> change ' ) ;
var Fragment = cst . Fragment ; var scopes <CAM> api:==:cst . api . scopes <CAM> api ;
var getUUID = function getUUID ( ) var s4:==:function s4 ( )
var height = options . height ; var title:==:options . title ;
var ids = this . _ profile <CAM> samples . ids ; var timestamps:==:this . _ profile <CAM> samples . timestamps ;
var min2 = e1 . min2 . value ; var max2:==:e1 . max2 . value ;
var update <CAM> classes = _ tether <CAM> base$ <CAM> utils . update <CAM> classes ; var defer:==:_ tether <CAM> base$ <CAM> utils . defer ;
var visual <CAM> map <CAM> model = this . visual <CAM> map <CAM> model ; var item <CAM> size:==:visual <CAM> map <CAM> model . item <CAM> size ;
var u = Stream ( function ( value ) return value * 2 ) var a:==:Stream ( )
var evidence = _ ref . evidence ; var name:==:_ ref . name ;
var version = req . params . versionvar tag:==:req . params . tag
var button = div . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' button ' ) [ 0 ] var strong:==:div . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' strong ' ) [ 0 ]
var w = _ _ browser <CAM> getter . avail <CAM> width ( this . _ frame ) ; var h:==:_ _ browser <CAM> getter . avail <CAM> height ( this . _ frame ) ;
var stamp = header . stamp ; var header <CAM> length:==:header . header <CAM> length ;
var wq = World <UND> step <UND> step <UND> wq ; var stepnumber:==:this . stepnumber ;
var entity <CAM> type = entity <CAM> type <CAM> name & & mapping <CAM> context . entity <CAM> manager . metadata <CAM> store . _ get <CAM> entity <CAM> type ( entity <CAM> type <CAM> name , true ) ; var property <CAM> name:==:node <CAM> context . property <CAM> name ;
var _ local <CAM> storage = _ _ webpack <UND> require _ _ ( 1255 ) ; var _ local <CAM> storage2 = _ interop <CAM> require <CAM> default ( _ local <CAM> storage ) ; var _ apis:==:_ _ webpack <UND> require _ _ ( 1257 ) ; var _ apis2    _ interop <CAM> require <CAM> default ( _ apis ) ; function _ interop <CAM> require <CAM> default ( obj ) return obj & & obj . _ _ es <CAM> module ? obj : default : obj ;
var git <CAM> semver <CAM> tags = context . git <CAM> semver <CAM> tags ; var commit <CAM> groups:==:context . commit <CAM> groups ;
var is <CAM> scrolling <CAM> change = _ props7 . is <CAM> scrolling <CAM> change ; var width:==:_ props7 . width ;
var amber50 = exports . amber50 = ' # fff8e1 ' ; var amber100:==:exports . amber100    ' # ffecb3 ' ;
var body = self . request . body  |  |  ' ' var qs <CAM> lib:==:self . request . qs <CAM> lib  |  |  qs
var everymodule = everyauth . everymodule ; var pause:==:_ _ pause ( req ) ;
var reactdom <CAM> component <CAM> tree = require ( ' reactdom <CAM> component <CAM> tree ' ) ; var react <CAM> instrumentation:==:require ( ' react <CAM> instrumentation ' ) ;
var geocode <CAM> cache = this . geocode <CAM> cache ; var max <CAM> cache <CAM> size:==:this . max <CAM> cache <CAM> size ;
var store = new datastore ( tests . data . read <CAM> only <CAM> item <CAM> file <CAM> test <CAM> templates . get <CAM> test <CAM> data ( ' data <UND> multitype ' ) ) ; var d:==:new doh . Deferred ( ) ;
var SCALE <UND> INDEX = Billboard . SCALE <UND> INDEX ; var IMAGE <UND> INDEX <UND> INDEX:==:Billboard . IMAGE <UND> INDEX <UND> INDEX ;
var Pool   = load <CAM> class ( ' Pool ' ) ; var pool <CAM> config:==:load <CAM> class ( ' pool <CAM> config ' ) ;
var _ qg = 262 ; values [ _ qg ] = _ qg ; var _ qh:==:263 ; values [ _ qh ]    _ qh ;
var fs = require ( ' fs ' ) ; var hyperstream:==:require ( ' hyperstream ' ) ;
var username = app <CAM> peers <CAM> manager . get <CAM> peer ( peerID ) . usernamevar peer:==:username ? ' @ ' + username : peer <CAM> data . peer <CAM> string
var cmp = semver . cmp ; var gte:==:semver . gte ;
var Plugin = imports . Plugin ; var api:==:imports . api ;
var color <CAM> prop <CAM> type = require ( ' color <CAM> prop <CAM> type ' ) ; var native <CAM> methods <CAM> mixin:==:require ( ' native <CAM> methods <CAM> mixin ' ) ;
var oy = parse <CAM> int ( lasso . attr ( ' oy ' ) ) ; var x:==:parse <CAM> int ( lasso . attr ( ' x ' ) ) ;
var optionals = lang <UND> 1 . is <CAM> present ( extra ) ? collection <UND> 1 . string <CAM> map <CAM> wrapper . get ( extra , ' optionals ' ) : null ; var validator:==:lang <UND> 1 . is <CAM> present ( extra ) ? collection <UND> 1 . string <CAM> map <CAM> wrapper . get ( extra , ' validator ' ) : null ;
var spy = sinon . spy ( ) ; var marker:==:L . marker ( [ 0 , 0 ] ) . add <CAM> to ( map ) ;
var style <CAM> spec = options . style <CAM> spec ; var style:==:options . style ;
var scheduler = instance . get ( ' scheduler ' ) ; var first <CAM> day <CAM> of <CAM> week:==:scheduler . get ( ' first <CAM> day <CAM> of <CAM> week ' ) ;
var _ hp = 127 ; values [ _ hp ] = _ hp ; var _ ia:==:128 ; values [ _ ia ]    _ ia ;
var url = require ( ' url ' ) ; var req:==:require ( ' request ' ) ;
var inline = line . inlines [ i ] ; var decoration:==:inline . decoration ;
var stagger = element <CAM> data . stagger ; var item <CAM> index:==:element <CAM> data . item <CAM> index ;
var target = event . target ; var checked:==:target . checked ;
var socket <CAM> message <CAM> type = Windows . Networking . Sockets . socket <CAM> message <CAM> type ; var unicode <CAM> encoding:==:Windows . Storage . Streams . unicode <CAM> encoding ;
var http   = require ( ' http ' ) ; var url:==:require ( ' url ' ) ;
var w = width * . 65 ; var h:==:height * . 65 ;
var _ kd = 163 ; values [ _ kd ] = _ kd ; var _ ke:==:164 ; values [ _ ke ]    _ ke ;
var unwrap = scope . unwrap ; var unwrap <CAM> if <CAM> needed:==:scope . unwrap <CAM> if <CAM> needed ;
var client = this . _ client . scope ( context : ' content ' ) ; var format:==:this . _ format <CAM> app . bind ( this , client ) ;
var path = req . path ; var method:==:req . method ;
var timeout = this . _ timeout ; var data:==:this . _ form <CAM> data  |  |  this . _ data ;
var extname = path <CAM> fn . extname ( path ) ; var name:==:path . substring ( 0 , path . length - extname . length ) ;
var async = require ( ' async ' ) ; var client:==:marionette . client ( ) ;
var group = groups [ o ] ; var start:==:group . start ;
var slice <CAM> partitions = ellipsoid . slice <CAM> partitions ; var outline <CAM> width:==:ellipsoid . outline <CAM> width ;
var angle <CAM> axis = angle <CAM> axis <CAM> model . axis ; var polar:==:angle <CAM> axis . polar ;
var pad = this . pad <CAM> digit ; var r:==:this . r . to <CAM> string ( 16 ) ;
var comprehension <CAM> for = traceur . syntax . trees . comprehension <CAM> for ; var conditional <CAM> expression:==:traceur . syntax . trees . conditional <CAM> expression ;
var r = new baidu . editor . dom . Range ( document ) ; var first:==:document . get <CAM> element <CAM> by <CAM> id ( ' first ' ) ;
var cpy1 = shape . cpy1 ; var cpx2:==:shape . cpx2 ;
var image <CAM> loader = Hilo . image <CAM> loader ; var script <CAM> loader:==:Hilo . script <CAM> loader ;
var ui <CAM> source <CAM> code = this . _ breakpoint . ui <CAM> source <CAM> code ( ) ; var line <CAM> number:==:this . _ breakpoint . _ line <CAM> number ;
var jshint = require ( ' gulp - jshint ' ) ; var jasmine:==:require ( ' gulp - jasmine ' ) ;
var jsep = callbacks . jsep ; var media:==:callbacks . media ;
var methods = params . methods ; var attributes:==:params . attributes ;
var Eventful = doc <CAM> set . get <CAM> by <CAM> longname ( ' Eventful ' ) [ 0 ] ; var Mixin:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' another <CAM> mixin ' ) [ 0 ] ;
var create <CAM> this <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> this <CAM> expression ; var create <CAM> true <CAM> literal:==:parse <CAM> tree <CAM> factory . create <CAM> true <CAM> literal ;
var EMPTY <UND> ARRAY = ' EMPTY <UND> ARRAY ' ; var TYPE <UND> NOT <UND> EQUAL:==:' TYPE <UND> NOT <UND> EQUAL ' ;
var label <CAM> key = _ ref5 . label <CAM> key ; var value <CAM> key:==:_ ref5 . value <CAM> key ;
var start = value . substr ( 0 , start <CAM> pos ) ; var end:==:value . substr ( end <CAM> pos ) ;
var falafel = require ( ' falafel ' ) ; var glob:==:require ( ' glob ' ) ;
var metadata = code <CAM> unit . metadata ; var output <CAM> name:==:metadata . output <CAM> name  |  |  metadata . source <CAM> name  |  |
var except <CAM> undefined = this . _ except <CAM> undefined ; var except <CAM> require:==:this . _ except <CAM> require ;
var arg = args . join ( ' ' ) ; var config:==:ctx . config . highlight  |  |  ;
var show <CAM> ui = show <CAM> ui <CAM> arg ; var value:==:value <CAM> arg ;
var c = ' c ' ; var d:==:fulfill <CAM> soon ( ' d ' , 20 ) ;
var values = $ ( element ) . data ( ) . values ; var value <CAM> min:==:$ ( element ) . data ( ) . value <CAM> min ;
var name = get <UND> string <UND> from <UND> ptr ( ptr <UND> name ) ; var flags:==:get <UND> string <UND> from <UND> ptr ( ptr <UND> flags ) ;
var adapter = save <CAM> context . adapter ; var entity <CAM> manager:==:save <CAM> context . entity <CAM> manager ;
var min = ' _ _ min _ _ ' = = ' _ _ ' + ' min _ _ ' ? false : ' _ _ min _ _ ' = = ' yes ' ; var base <CAM> url <CAM> override:==:local <CAM> storage . get <CAM> item ( ' togetherjs . base <CAM> url <CAM> override ' ) ;
var gl = this . glvar model:==:params . model  |  |  identity
var login <UND> hint = _ ref . login <UND> hint ; var acr <UND> values:==:_ ref . acr <UND> values ;
var create <CAM> element = react <CAM> element . create <CAM> element ; var create <CAM> factory:==:react <CAM> element . create <CAM> factory ;
var b = goog . crypt . hash32 . to <CAM> signed _ ( bytes [ offset + 1 ] ) ; var c:==:goog . crypt . hash32 . to <CAM> signed _ ( bytes [ offset + 2 ] ) ;
var cos = Math . cos ( rotation ) ; var sin:==:Math . sin ( rotation ) ;
var mean = require ( ' meanio ' ) var cluster:==:require ( ' cluster ' )
var blob = obj . blob ; var callback:==:obj . callback ;
var n = numeric ; var x:==:this . x , y    this . y ;
var uglify = require ( ' gulp - uglify ' ) ; var minify:==:require ( ' gulp - minify - css ' ) ;
var icon <CAM> element <CAM> left = _ props . icon <CAM> element <CAM> left ; var icon <CAM> element <CAM> right:==:_ props . icon <CAM> element <CAM> right ;
var event = segment . event ; var element:==:elements . eq ( i ) ;
var full <CAM> width = _ props2 . full <CAM> width ; var hint <CAM> text:==:_ props2 . hint <CAM> text ;
var command = commands [ i ] ; var pass:==:defined ( command . pass ) ? command . pass : Pass . OPAQUE ;
var unauthorized = ' unauthorized ' ; var uninitialized:==:' uninitialized ' ;
var assert = require ( ' assert ' ) ; var jsv:==:require ( ' jsverify ' ) ;
var face = node . get <CAM> attribute ( ' face ' ) ; var color:==:node . get <CAM> attribute ( ' color ' ) ;
var branch = this . branches [ j ] ; var d:==:p5 . Vector . dist ( leaf . pos , branch . pos ) ;
var v1 = b2 <CAM> math . MulX ( xf , this . m <UND> v1 ) ; var v2:==:b2 <CAM> math . MulX ( xf , this . m <UND> v2 ) ;
var setext = self . options . setext ; var close <CAM> atx:==:self . options . close <CAM> atx ;
var slot = slotted [ touch . identifier ] var x:==:touch . pageX - screen . bounds . x
var hover <CAM> color = props . hover <CAM> color ; var base <CAM> theme:==:context . mui <CAM> theme . base <CAM> theme ;
var metadata = config . prose . metadata ; var q:==:queue ( 1 ) ;
var Plugin = imports . Plugin ; var ui:==:imports . ui ;
var sass = require ( ' gulp - sass ' ) ; var through2:==:require ( ' through2 ' ) ;
var upgrade <CAM> all = scope . upgrade <CAM> all ; var upgrade <CAM> with <CAM> definition:==:scope . upgrade <CAM> with <CAM> definition ;
var draft <CAM> modifier = require ( ' draft <CAM> modifier ' ) ; var draft <CAM> offset <CAM> key:==:require ( ' draft <CAM> offset <CAM> key ' ) ;
var tree <CAM> scope = scope . tree <CAM> scope ; var clone <CAM> node:==:scope . clone <CAM> node ;
var rimraf = require ( ' rimraf ' ) var async <CAM> map:==:require ( ' slide ' ) . async <CAM> map
var delta = deltas [ i ] ; var range:==:Range . from <CAM> points ( delta . range . start , delta . range . end ) ;
var lazy = ref . lazy ; var trim:==:ref . trim ;
var height = this . $ element . height ( ) var offset:==:this . options . offset
var con = this . contacts [ i ] ; var n <CAM> mass:==:con . n <CAM> mass ;
var default <CAM> styles = _ props . default <CAM> styles ; var styles:==:_ props . styles ;
var empty <CAM> function = require ( ' empty <CAM> function ' ) ; var find <CAM> ranges <CAM> immutable:==:require ( ' find <CAM> ranges <CAM> immutable ' ) ;
var join = require ( ' path ' ) . join ; var basename:==:require ( ' path ' ) . basename ;
var bottom <CAM> positions = pos . bottom <CAM> positions ; var top <CAM> positions:==:pos . top <CAM> positions ;
var auto <CAM> container <CAM> width = _ props4 . auto <CAM> container <CAM> width ; var auto <CAM> height:==:_ props4 . auto <CAM> height ;
var router = _ props . router ; var history:==:_ props . history ;
var crawl = require ( ' npm - crawl ' ) ; var convert:==:require ( ' npm - convert ' ) ;
var nodes <CAM> changed = _ determine <CAM> if <CAM> different2 . nodes <CAM> changed ; var edges <CAM> changed:==:_ determine <CAM> if <CAM> different2 . edges <CAM> changed ;
var new <CAM> expression = traceur . syntax . trees . new <CAM> expression ; var object <CAM> literal <CAM> expression:==:traceur . syntax . trees . object <CAM> literal <CAM> expression ;
var path = require ( ' path ' ) var glob:==:require ( ' glob ' )
var dynCall <UND> viid = Module [ ' dynCall <UND> viid ' ] = asm [ ' dynCall <UND> viid ' ] ; var dynCall <UND> viiiiii:==:Module [ ' dynCall <UND> viiiiii ' ]    asm [ ' dynCall <UND> viiiiii ' ] ;
var type = data . type ; var leave <CAM> class:==:data . leave <CAM> class ;
var fs = imports . fs ; var auth:==:imports . auth ;
var port = server . port  |  |  server . client <CAM> port ; var host:==:server . host ;
var gt = semver . gt ; var lt:==:semver . lt ;
var master = this . master ; var element:==:this . element ;
var offset = $ element . offset ( ) ; var left:==:offset . left ;
var htmlsafe = helper . htmlsafe ; var linkto:==:helper . linkto ;
var react <CAM> native = require ( ' react <CAM> native ' ) ; var style <CAM> sheet:==:require ( ' style <CAM> sheet ' ) ;
var n = Y . Node . one ( o . nodes [ 0 ] ) ; var insert <CAM> before:==:Y . Node . one ( ' # insert <CAM> before <CAM> me ' ) ;
var escodegen = require ( ' escodegen ' ) ; var estraverse:==:require ( ' estraverse ' ) ;
var child = require ( ' child <UND> process ' ) ; var print <CAM> error:==:Common . print <CAM> error ;
var manifest = JSON . parse ( fs . read <CAM> file <CAM> sync ( path . join ( template <CAM> path , ' manifest . json ' ) ) ) ; var messages:==:JSON . parse ( fs . read <CAM> file <CAM> sync ( path . join ( template <CAM> path , ' _ locales ' , ' en ' , ' messages . json ' ) ) ) ;
var start = moment ( now ) . clone ( ) . start <CAM> of ( ' month ' ) . to <CAM> date ( ) ; var end:==:moment ( now ) . clone ( ) . end <CAM> of ( ' month ' ) . to <CAM> date ( ) ;
var m = SIMD . Float32x4 . from <CAM> int32x4 <CAM> bits ( SIMD . Int32x4 ( 0x3F800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:SIMD . Int32x4 . from <CAM> float32x4 <CAM> bits ( m ) ;
var message <CAM> web <CAM> socket = Windows . Networking . Sockets . message <CAM> web <CAM> socket ; var socket <CAM> message <CAM> type:==:Windows . Networking . Sockets . socket <CAM> message <CAM> type ;
var name = header . name ; var value:==:header . value ;
var coding <CAM> line = this . coding <CAM> line ; var columns:==:this . columns ;
var outside = element ( by . i d ( ' outside - ng ' ) ) ; var inside:==:element ( by . i d ( ' inside - ng ' ) ) ;
var row = this . selection . get <CAM> cursor ( ) . row ; var column:==:this . selection . get <CAM> cursor ( ) . column ;
var worker = workers [ i % threads ] ; var ip:==:ips [ i ] ;
var string = require ( ' string ' ) ; var path:==:require ( ' path ' ) ;
var edge <CAM> insets <CAM> prop <CAM> type = require ( ' edge <CAM> insets <CAM> prop <CAM> type ' ) ; var native <CAM> methods <CAM> mixin:==:require ( ' native <CAM> methods <CAM> mixin ' ) ;
var font = default <CAM> value ( options . font , ' 10px sans - serif ' ) ; var stroke:==:default <CAM> value ( options . stroke , false ) ;
var divisor = divisors [ i ] ; var div:==:uint32 <CAM> div ( divisor ) ;
var chain = require ( ' slide ' ) . chainvar once:==:require ( ' once ' )
var many = props . many ; var one:==:props . one ;
var time = this . arg ( ' time ' ) ; var format:==:this . h ( ' format ' ) ;
var app = req . app ; var registry:==:app . registry ;
var chain = this . chain ; var fired:==:this . fired ;
var italic = font <CAM> obj . italic ? ' italic ' : ' normal ' ; var serif:==:font <CAM> obj . is <CAM> serif <CAM> font ? ' serif ' : ' sans - serif ' ;
var validate <CAM> sort = local <CAM> utils . validate <CAM> sort ; var reverse <CAM> options:==:local <CAM> utils . reverse <CAM> options ;
var dh = this . dh _ ; var sel:==:dh . create <CAM> dom ( ' select ' , ' i d ' : i d ) ;
var util = _ _ webpack <UND> require _ _ ( 5 ) . util ; var type <CAM> of:==:_ _ webpack <UND> require _ _ ( 407 ) . type <CAM> of ;
var a = typeof ma ; var b:==:typeof mb ;
var color <CAM> idx = get ( scope , ' color <CAM> idx ' )  |  |  0 ; var color <CAM> name <CAM> map:==:get ( scope , ' color <CAM> name <CAM> map ' )  |  |  set ( scope , ' color <CAM> name <CAM> map ' , ) ;
var ya = Axes . get <CAM> from <CAM> id ( gd , trace . yaxis  |  |  ' y ' ) ; var aax:==:trace . aaxis ;
var orig <UND> feature = cascade . stage <UND> classifier [ j ] . orig <UND> feature ; var feature:==:cascade . stage <UND> classifier [ j ] . feature    new Array ( cascade . stage <UND> classifier [ j ] . count ) ;
var collab = imports . collab ; var clone <CAM> object:==:c9 <CAM> util . clone <CAM> object ;
var canvas = me . canvas ; var aspect <CAM> ratio:==:( options . maintain <CAM> aspect <CAM> ratio & & me . aspect <CAM> ratio )  |  |  null ;
var api <CAM> key <CAM> vehicle = security . api <CAM> key <CAM> vehicle  |  |  ' query ' ; var api <CAM> key <CAM> name:==:security . api <CAM> key <CAM> name  |  |  ' api <UND> key ' ;
var done <CAM> enumerator = Rx . done <CAM> enumerator = done : true , value : undefined ; var is <CAM> iterable:==:Rx . helpers . is <CAM> iterable    function ( o )
var start = this . _ delegate . start ( o <CAM> control , s <CAM> aggregation <CAM> name , is <CAM> default <CAM> aggregation ) ; var middle:==:this . _ delegate . middle ( o <CAM> control , s <CAM> aggregation <CAM> name , is <CAM> default <CAM> aggregation ) ;
var debug = require ( ' debug ' ) ( ' loopback : registry ' ) ; var data <CAM> source:==:juggler . data <CAM> source ;
var moment = vis . moment ; var timeline:==:vis . timeline ;
var head = document . query <CAM> selector ( ' head ' ) ; var script:==:document . create <CAM> element ( ' script ' ) ;
var md <CAM> no <CAM> asterisk = $ md <CAM> util . parse <CAM> attribute <CAM> boolean ( attr . md <CAM> no <CAM> asterisk ) ; var tag <CAM> name:==:element [ 0 ] . tag <CAM> name . to <CAM> lower <CAM> case ( ) ;
var network <CAM> pdf <CAM> manager = core <CAM> pdf <CAM> manager . network <CAM> pdf <CAM> manager ; var global <CAM> scope:==:shared <CAM> global . global <CAM> scope ;
var _ nl = 219 ; values [ _ nl ] = _ nl ; var _ nm:==:220 ; values [ _ nm ]    _ nm ;
var get <CAM> label <CAM> formatted <CAM> text = powerbi . visuals . data <CAM> label <CAM> utils . get <CAM> label <CAM> formatted <CAM> text ; var object <CAM> enumeration <CAM> builder:==:powerbi . visuals . object <CAM> enumeration <CAM> builder ;
var command = item . command ; var hash <CAM> id:==:binding . hash <CAM> id ;
var bytes = device . bytes ; var delay:==:device . delay ;
var model = this . _ model ; var config:==:this . _ config ;
var early <CAM> change = lzw <CAM> state . early <CAM> change ; var next <CAM> code:==:lzw <CAM> state . next <CAM> code ;
var vertex <CAM> format = polygon <CAM> geometry . _ vertex <CAM> format ; var ellipsoid:==:polygon <CAM> geometry . _ ellipsoid ;
var own = opts . chown ! = = false & & ! win32 & & process <CAM> getuid ( ) = = = 0var extract:==:opts . extract  |  |  tar . extract ( )
var minimum <CAM> alpha = default <CAM> value ( options . minimum <CAM> alpha , 0 ) ; var maximum <CAM> alpha:==:default <CAM> value ( options . maximum <CAM> alpha , 1 . 0 ) ;
var logger = common . logger ; var Validator:==:breeze . Validator ,
var usage = get <CAM> option ( options , ' usage ' , ' string ' , [ ' sort ' , ' search ' ] , ' sort ' ) ; var sensitivity:==:get <CAM> option ( options , ' sensitivity ' , ' string ' , [ ' base ' , ' accent ' , ' case ' , ' variant ' ] , undefined ) ;
var a = new goog . ui . tree . tree <CAM> node ( ' a ' ) ; var b:==:new goog . ui . tree . tree <CAM> node ( ' b ' ) ;
var Metadata = require ( ' Metadata ' ) ; var Prism:==:require ( ' Prism ' ) ;
var graph = this . graph = params . graph  |  |  new Graph ( ) ; var stiffness:==:params . stiffness  |  |  400 . 0 ;
var config   = require ( ' config ' ) ; var semver:==:require ( ' semver ' ) ;
var is <CAM> contact = opt . is <CAM> contact  |  |  false ; var in <CAM> message:==:opt . in <CAM> message  |  |  false ;
var is <CAM> array = nv . utils . is <CAM> array ( dst [ key ] ) ; var is <CAM> object:==:nv . utils . is <CAM> object ( dst [ key ] ) ;
var g = g <CAM> slider . value ( ) ; var b:==:b <CAM> slider . value ( ) ;
var crop <CAM> box = self . crop <CAM> box ; var action:==:self . action ;
var h = this . _ hsv [ 0 ] ; var s:==:this . _ hsv [ 1 ] ;
var api = req . service . api ; var target:==:api . target <CAM> prefix + ' . ' + api . operations [ req . operation ] . name ;
var Evaluator = imports . Evaluator ; var settings:==:imports . settings ;
var app <CAM> infos = ' app <CAM> infos ' : o <CAM> data . application ; var technical <CAM> info:==:' technical <CAM> info ' : o <CAM> data . technical ;
var category = track . category ( ) ; var repeat:==:track . proxy ( ' properties . repeat ' ) ;
var font <CAM> size = current . font <CAM> size ; var font <CAM> direction:==:current . font <CAM> direction ;
var valid = element ( by . binding ( ' my <CAM> form . names <CAM> input . $ valid ' ) ) ; var error:==:element ( by . css ( ' span . error ' ) ) ;
var module <CAM> visitor = traceur . codegeneration . module . module <CAM> visitor ; var parse <CAM> tree <CAM> type:==:traceur . syntax . trees . parse <CAM> tree <CAM> type ;
var observable = ko . observable ( ' a ' ) ; var eval <CAM> spy:==:jasmine . create <CAM> spy ( ' eval <CAM> spy ' ) ;
var filename = options . filename ; var src:==:options . src ;
var message = _ ref5 . message ; var assert:==:_ ref5 . assert ;
var tab <CAM> manager = imports . tab <CAM> manager ; var fs:==:imports . fs ;
var w = Math . max ( doc . body . scroll <CAM> width , view <CAM> size . width ) ; var h:==:Math . max ( doc . body . scroll <CAM> height , view <CAM> size . height ) ;
var tooltip <CAM> model = this . _ tooltip <CAM> model ; var ec <CAM> model:==:this . _ ec <CAM> model ;
var next = context . next ; var user <CAM> context:==:context . user <CAM> context ;
var ptr = m . _ ptr ; var size:==:m . _ size ;
var sources = fs . sources ; var length:==:sources . length ;
var rule = Handle . rule ( name ) ; var type:==:Util . type ( template ) ;
var time <CAM> threshold = options ? options . time <CAM> threshold : null ; var ignore <CAM> is <CAM> finished:==:( options & & options . ignore <CAM> is <CAM> finished ) ? true : false ;
var sn = msg . sn , type = msg . type , input = msg . data ; var task:==:tasks [ sn ] ;
var _ cg = 38 ; values [ _ cg ] = _ cg ; var _ ch:==:39 ; values [ _ ch ]    _ ch ;
var util = require ( ' util ' ) ; var statuses:==:require ( ' statuses ' ) ;
var _ pp = 255 ; values [ _ pp ] = _ pp ; var _ qa:==:256 ; values [ _ qa ]    _ qa ;
var Identify = require ( ' facade ' ) . Identify ; var extend:==:require ( ' extend ' ) ;
var size = config . size  |  |  100 ; var precision:==:config . precision  |  |  2 ;
var settings = this . settings ; var camera:==:this . camera ;
var vx = this . vx * damping + ( gravity . x + this . f . x * this . m <UND> inv ) * dt ; var vy:==:this . vy * damping + ( gravity . y + this . f . y * this . m <UND> inv ) * dt ;
var observer = this . observer ; var type <CAM> supported:==:this . type <CAM> supported ;
var stack <CAM> partitions = Math . round ( default <CAM> value ( options . stack <CAM> partitions , 64 ) ) ; var slice <CAM> partitions:==:Math . round ( default <CAM> value ( options . slice <CAM> partitions , 64 ) ) ;
var stagger = data . stagger ; var max <CAM> duration:==:data . max <CAM> duration ;
var utils = client . utils ; var renderer:==:client . renderer ;
var _ rj = 281 ; values [ _ rj ] = _ rj ; var _ rk:==:282 ; values [ _ rk ]    _ rk ;
var delta = options . delta ! = = undefined ? options . delta : 1 ; var zoom <CAM> in <CAM> label:==:options . zoom <CAM> in <CAM> label !    undefined ? options . zoom <CAM> in <CAM> label : ' + ' ;
var len = ( label + '' ) . length-1 ; var width:==:options . width * r + ( 6 * r * len ) ,
var ry = this . attribute ( ' ry ' ) . Length . to <CAM> pixels ( ' y ' ) ; var cx:==:this . attribute ( ' cx ' ) . Length . to <CAM> pixels ( ' x ' ) ;
var url = require ( ' url ' ) ; ; var path:==:require ( ' path ' ) ; ;
var source <CAM> location = _ . source <CAM> location ; var get <CAM> line <CAM> info:==:_ . get <CAM> line <CAM> info ;
var mongo = require ( ' mongoskin ' ) ; var csv:==:require ( ' csv ' ) ;
var data <CAM> zoom <CAM> model = this . data <CAM> zoom <CAM> model ; var size:==:this . _ size ;
var options = this . _ options ; var center:==:Property . get <CAM> value <CAM> or <CAM> undefined ( entity . position , time , options . center ) ;
var message = evt . detail . message  |  |  '' ; var elements:==:this . elements ;
var zlib = require ( ' zlib ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var prev = contact . prev ; var next:==:contact . next ;
var pattern = obj . pattern  |  |  attr <CAM> getter ( ' ngf <CAM> pattern ' , scope , $ event : evt ) ; var len:==:items . length ;
var buffer <CAM> index = last <CAM> state . buffer <CAM> index ; var component <CAM> buffer:==:last <CAM> state . component <CAM> buffer ;
var profile = sbx . data . profile ; var iob:==:results . iob    sbx . properties . iob . iob  |  |  0 ;
var original <CAM> event = event . original <CAM> event ; var touches:==:original <CAM> event & & original <CAM> event . touches ;
var once = require ( ' once ' ) var path:==:require ( ' path ' )
var leave <CAM> cancelled = data . leave <CAM> cancelled ; var delay <CAM> leave:==:data . delay <CAM> leave ;
var path = require ( ' path ' ) ; var assert:==:require ( ' assert ' ) ;
var before <CAM> appear = data . before <CAM> appear ; var appear:==:data . appear ;
var message = self . _ escapeHTML ( e . detail . message ) ; var initial <CAM> value:==:e . detail . initial <CAM> value ;
var namespace = params . namespace ; var translations:==:params . translations ;
var assert = require ( ' assert ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var rect = opts . rect ; var width:==:rect . width ;
var v = j <CAM> query ( ' # form ' ) . validate ( ) ; var method:==:$ . validator . methods . max ,
var last <CAM> task <CAM> index = info . last <CAM> task <CAM> index ; var tasks:==:info . tasks ;
var error = require ( ' http - error ' ) ; var frontdoor:==:require ( ' frontdoor ' ) ;
var assign = require ( ' object - assign ' ) ; var copy:==:require ( ' clipboard - js ' ) ;
var w = this . width = visible <CAM> rect . width ; var h:==:this . height    visible <CAM> rect . height ;
var access <CAM> token = tokens . access <CAM> token ; var id <CAM> token:==:tokens . id <CAM> token ;
var f8 <CAM> colors = require ( ' f8 <CAM> colors ' ) ; var f8 <CAM> session <CAM> cell:==:require ( ' f8 <CAM> session <CAM> cell ' ) ;
var body = m . body ; var post:==:m . post ;
var vertices = mesh . vertices ; var encoding:==:mesh . encoding ;
var el = this . $ el ; var body:==:document . body ;
var c = mc ( a <CAM> rot ) ; var s:==:ms ( a <CAM> rot ) ;
var TYPE <UND> REFERENCE = ' TYPE <UND> REFERENCE ' ; var UNARY <UND> EXPRESSION:==:' UNARY <UND> EXPRESSION ' ;
var glob   = require ( ' glob ' ) ; var path:==:require ( ' path ' ) ;
var h = hsba [ 0 ] ; var s:==:hsba [ 1 ] ;
var _ nc = 210 ; values [ _ nc ] = _ nc ; var _ nd:==:211 ; values [ _ nd ]    _ nd ;
var ui <CAM> source <CAM> code = nodes [ i ] . ui <CAM> source <CAM> code ( ) ; var inspected <CAM> pageurl:==:web <CAM> inspector . target <CAM> manager . inspected <CAM> pageurl ( ) ;
var BREAK <UND> STATEMENT = ' BREAK <UND> STATEMENT ' ; var CALL <UND> EXPRESSION:==:' CALL <UND> EXPRESSION ' ;
var data <CAM> view = data <CAM> views [ k ] ; var values:==:data <CAM> view & & data <CAM> view . categorical & & data <CAM> view . categorical . values
var is <CAM> scrolling = _ ref . is <CAM> scrolling ; var on <CAM> row <CAM> click:==:_ ref . on <CAM> row <CAM> click ;
var Key = _ element <CAM> utilities . Key ; var key <CAM> code:==:event <CAM> object . key <CAM> code ;
var mom = $ . full <CAM> calendar . moment . utc ( ' 2014 - 06 - 08T00 : 00 : 00 ' ) ; var dur:==:moment . duration ( ' 13 : 25 ' ) ;
var left <CAM> video = document . get <CAM> element <CAM> by <CAM> id ( ' left <CAM> video ' ) ; var right <CAM> video:==:document . get <CAM> element <CAM> by <CAM> id ( ' right <CAM> video ' ) ;
var display = opts . display ; var ctx:==:this . ctx ;
var stack = obj . stack ; var message:==:obj . message & & obj . message . length ? ' : ' + obj . message : ' ' ;
var model = this . _ model ; var ctx:==:this . _ chart . ctx ;
var api = this . api ( true ) . columns . adjust ( ) ; var settings:==:api . settings ( ) [ 0 ] ;
var container = create <CAM> element <CAM> with <CAM> class ( ' div ' , ' object - popover - container ' ) ; var title:==:container . create <CAM> child ( ' div ' , ' function - popover - title source - code ' ) ;
var dec = format <CAM> data . dec ; var group:==:format <CAM> data . group ;
var create <CAM> function <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> function <CAM> expression ; var create <CAM> identifier <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> identifier <CAM> expression ;
var provider = imports [ ' clipboard . provider ' ] ; var alert:==:imports [ ' dialog . alert ' ] ;
var names = smc . _ names = array <CAM> set . from <CAM> array ( a <CAM> source <CAM> map . _ names . to <CAM> array ( ) , true ) ; var sources:==:smc . _ sources    array <CAM> set . from <CAM> array ( a <CAM> source <CAM> map . _ sources . to <CAM> array ( ) , true ) ;
var u = ( ( Math . abs ( uv . x * uv <CAM> scale . x + uv <CAM> offset . x ) * height <CAM> map <CAM> width ) % height <CAM> map <CAM> width )  |  0 ; var v:==:( ( Math . abs ( uv . y * uv <CAM> scale . y + uv <CAM> offset . y ) * height <CAM> map <CAM> height ) % height <CAM> map <CAM> height )  |  0 ;
var long = npm . config . get ( ' long ' ) var json:==:npm . config . get ( ' json ' )
var rotation = frame <CAM> state . view <CAM> state . rotation ; var skipped <CAM> feature <CAM> uids:==:frame <CAM> state . skipped <CAM> feature <CAM> uids ;
var is <CAM> array = Array . is <CAM> array ; var once:==:require ( ' once ' ) ;
var duration = is <CAM> undefined ( v [ ' duration ' ] ) ? 2 : v [ ' duration ' ] ; var timeout:==:is <CAM> undefined ( v [ ' timeout ' ] ) ? 250 : v [ ' timeout ' ] ;
var create <CAM> identifier <CAM> expression = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> identifier <CAM> expression ; var token <CAM> type:==:traceur . syntax . token <CAM> type ;
var encode = encodeuri <CAM> component ; var decode:==:decodeuri <CAM> component ;
var legend <CAM> icon = powerbi . visuals . legend <CAM> icon ; var append <CAM> clear <CAM> catcher:==:powerbi . visuals . append <CAM> clear <CAM> catcher ;
var ErrorA = function ErrorA ( ) ; var ErrorB:==:function ErrorB ( ) ;
var id <CAM> to <CAM> node = this . _ id <CAM> to <CAM> node ; var gc <CAM> node:==:this . gc <CAM> node ;
var event = options . event ; var underlying <CAM> nodes:==:options . underlying <CAM> nodes ;
var test <CAM> case = goog . require ( ' goog . testing . test <CAM> case ' ) ; var dom:==:goog . require ( ' goog . dom ' ) ;
var mangled <CAM> names = init . mangled <CAM> names ; var mangled <CAM> global <CAM> names:==:init . mangled <CAM> global <CAM> names ;
var PAGE <UND> DONE <UND> CHECK <UND> TIMEOUT = process . env . PAGE <UND> DONE <UND> CHECK <UND> TIMEOUT  |  |  300 ; var RESOURCE <UND> DOWNLOAD <UND> TIMEOUT:==:process . env . RESOURCE <UND> DOWNLOAD <UND> TIMEOUT  |  |  10 * 1000 ;
var uvs = this . uvsvar indices:==:this . indices ;
var height = Math . floor ( bb . height ( ) ) ; var filter:==:element . style ( ' filter ' ) . value ;
var async = require ( ' async ' ) var bigi:==:require ( ' bigi ' )
var col <CAM> content <CAM> left = t . col <CAM> content <CAM> left ; var col <CAM> content <CAM> right:==:t . col <CAM> content <CAM> right ;
var i = jsdate . getutc <CAM> minutes ( ) * 60var s:==:jsdate . getutc <CAM> seconds ( )
var bip66 = require ( ' bip66 ' ) var pushdata:==:require ( ' pushdata - bitcoin ' )
var plot   = this . plotvar shader:==:this . shader
var granularity = geometry . _ granularity ; var ellipsoid:==:geometry . _ ellipsoid ;
var dictionary <CAM> lengths = lzw <CAM> state . dictionary <CAM> lengths ; var dictionary <CAM> prev <CAM> codes:==:lzw <CAM> state . dictionary <CAM> prev <CAM> codes ;
var fs = require ( ' fs ' ) ; var url:==:require ( ' url ' ) ;
var div = document . create <CAM> element ( ' div ' ) ; var template:==:template <CAM> fn ( f , field )  |  |  template <CAM> fn ( f , decorator [ ' default ' ] ) ;
var guard <CAM> bits = quantization <CAM> parameters . guard <CAM> bits ; var transformation:==:coding <CAM> style <CAM> parameters . transformation ;
var once = require ( ' once ' ) var node <CAM> bin:==:exports . node <CAM> bin    process . env . npm <UND> node <UND> execpath  |  |  process . env . NODE  |  |  process . exec <CAM> path
var argv = require ( ' yargs ' ) . argv ; var fs:==:require ( ' fs ' ) ;
var expect = chai . expect ; var vm:==:require ( ' vm ' ) ;
var View = _ components <CAM> fxos <CAM> mvc <CAM> dist <CAM> mvc . View ; var icon <CAM> helper:==:_ js <CAM> lib <CAM> helpers . icon <CAM> helper ;
var layers = this . add <CAM> checkbox ( div , mx <CAM> resources . get ( ' layers ' ) , true ) ; var lightbox:==:this . add <CAM> checkbox ( div , mx <CAM> resources . get ( ' lightbox ' ) , true ) ;
var samples <CAM> per <CAM> line = frame . samples <CAM> per <CAM> line ; var scan <CAM> lines:==:frame . scan <CAM> lines ;
var $ e = this . $ element ; var o:==:this . options ;
var m = Object . create ( matcher ) ; var type:==:type <CAM> of ( expectation ) ;
var context = vnode . context ; var component <CAM> instance:==:vnode . component <CAM> instance ;
var colors = require ( ' colors ' ) ; var fs:==:require ( ' fs ' ) ;
var client <CAM> top = el . client <CAM> top  |  |  body . client <CAM> top  |  |  0 ; var client <CAM> left:==:el . client <CAM> left  |  |  body . client <CAM> left  |  |  0 ;
var touch <CAM> start <CAM> event <CAM> name = visuals . touch <CAM> utils . touch <CAM> start <CAM> event <CAM> name ( ) ; var touch <CAM> end <CAM> event <CAM> name:==:visuals . touch <CAM> utils . touch <CAM> end <CAM> event <CAM> name ( ) ;
var indigo700 = exports . indigo700 = ' # 303f9f ' ; var indigo800:==:exports . indigo800    ' # 283593 ' ;
var x = style . x  |  |  0 ; var y:==:style . y  |  |  0 ;
var data = reader . data ( result ) ; var model:==:new reader . model ( data [ 0 ] ) ;
var new <CAM> node = new <CAM> nodes [ length ] ; var original <CAM> node:==:original <CAM> nodes [ length ] ;
var x = options . x ; var y:==:options . y ;
var path = require ( ' path ' ) ; var osenv:==:require ( ' osenv ' ) ;
var IDENTITY <UND> MATRIX = shared <CAM> util . IDENTITY <UND> MATRIX ; var UNSUPPORTED <UND> FEATURES:==:shared <CAM> util . UNSUPPORTED <UND> FEATURES ;
var data = this . data ; var series:==:this . data . series ;
var net = require ( ' net ' ) ; var spawn:==:require ( ' child <UND> process ' ) . spawn ;
var formatter = month <CAM> label . get ( ' formatter ' ) ; var name:==:name <CAM> map [ + first <CAM> day . m - 1 ] ;
var order <CAM> item = this . order <CAM> item ; var item <CAM> option:==:option <CAM> vm . item <CAM> option ;
var next = this . new <CAM> block ( ' next of ifexp ' ) ; var end:==:this . new <CAM> block ( ' end of ifexp ' ) ;
var set <CAM> accessor = traceur . syntax . trees . set <CAM> accessor ; var temp <CAM> var <CAM> transformer:==:traceur . codegeneration . temp <CAM> var <CAM> transformer ;
var setup = setup <CAM> put <CAM> tests ( ' file ' , mock <CAM> task ) ; var task:==:setup . task ;
var font <CAM> family = helpers . get <CAM> value <CAM> or <CAM> default ( point <CAM> label <CAM> options . font <CAM> family , global <CAM> defaults . default <CAM> font <CAM> family ) ; var font:==:helpers . font <CAM> string ( font <CAM> size , font <CAM> style , font <CAM> family ) ;
var type = attribute <CAM> properties . type ; var bytes <CAM> per <CAM> element:==:attribute <CAM> properties . bytes <CAM> per <CAM> element ;
var height = controller . _ ellipsoid . cartesian <CAM> to <CAM> cartographic ( camera . positionWC , scratch <CAM> cartographic ) . height ; var globe:==:controller . _ globe ;
var bind <CAM> to <CAM> any = document . get <CAM> element <CAM> by <CAM> id ( ' bind <CAM> to <CAM> any ' ) . checked ; var bind <CAM> to <CAM> address:==:document . get <CAM> element <CAM> by <CAM> id ( ' bind <CAM> to <CAM> address ' ) . checked ;
var $ = ( global & & global . $ )  |  |  require ( ' jquery ' ) ; var d3:==:( global & & global . d3 )  |  |  require ( ' d3 ' ) ;
var inherit = _ dereq _ ( ' component - inherit ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' engine . io - client : websocket ' ) ;
var search = this . searches [ i ] ; var operator:==:$ ( ' # grid <UND> '+ this . name + ' _ operator <UND> '+ i ) . val ( ) ;
var shorthand = node . shorthand ; var computed:==:node . computed ;
var is <CAM> prop <CAM> type = is <CAM> prop <CAM> types <CAM> declaration ( node ) ; var is <CAM> default <CAM> prop:==:is <CAM> default <CAM> props <CAM> declaration ( node ) ;
var lvalue = this . transform <CAM> any ( tree . lvalue ) ; var type <CAM> annotation:==:this . transform <CAM> any ( tree . type <CAM> annotation ) ;
var Grouping = sap . ui . table . table <CAM> utils . Grouping ; var table <CAM> utils:==:sap . ui . table . table <CAM> utils ;
var ace = imports . ace ; var commands:==:imports . commands ;
var ids = ob . ids ; var dates:==:ob . dates ;
var linear <CAM> map = number <CAM> util . linear <CAM> map ; var each:==:zr <CAM> util . each ;
var predefined <CAM> metrics = ob . predefined <CAM> metrics ; var user <CAM> props:==:ob . user <CAM> props ;
var parse <CAM> tree <CAM> factory = traceur . codegeneration . parse <CAM> tree <CAM> factory ; var token <CAM> type:==:traceur . syntax . token <CAM> type ;
var margin = this . margin ; var width:==:viewport . width - ( margin . left + margin . right ) ;
var get <CAM> song = client . method ( ' get <CAM> song ' , file <CAM> path ) ; var get <CAM> song <CAM> file:==:client . method ( ' get <CAM> song <CAM> file ' , file <CAM> path ) ;
var width = style . width ; var height:==:style . height ;
var addon = spec . addon ; var link:==:spec . link ;
var enable <CAM> doublecheck = ! ! options . enable <CAM> doublecheck ; var overwrite <CAM> existing <CAM> token:==:! ! options . overwrite <CAM> existing <CAM> token ;
var transition = operation . transition ; var wait:==:operation . wait ;
var on <CAM> success = options . on <CAM> success  |  |  function ( ) ; var on <CAM> error:==:options . on <CAM> error  |  |  function ( ) ;
var Tab = imports . Tab ; var Document:==:imports . Document ;
var fs = require ( ' fs ' ) ; var whitelist:==:options . whitelist ;
var util = require ( ' util ' ) ; var passport:==:require ( ' passport ' ) ;
var error <CAM> obj = util . error <CAM> obj ; var try <CAM> catch:==:util . try <CAM> catch ;
var b = m . observable ( 0 ) ; var c:==:m . computed ( ( )   > a . get ( ) + b . get ( ) ) ;
var pre <CAM> multiply <CAM> alpha = options . pre <CAM> multiply <CAM> alpha  |  |  pixel <CAM> format = = = pixel <CAM> format . RGB  |  |  pixel <CAM> format = = = pixel <CAM> format . LUMINANCE ; var flipY:==:default <CAM> value ( options . flipY , true ) ;
var history = flags . history  |  |  undefined ; var limit:==:flags . limit  |  |  undefined ;
var injector = self . element . injector ( ) ; var compile:==:injector ? injector . get ( ' $ compile ' ) : $ default <CAM> compile ;
var icon <CAM> class <CAM> name <CAM> left = _ props . icon <CAM> class <CAM> name <CAM> left ; var icon <CAM> class <CAM> name <CAM> right:==:_ props . icon <CAM> class <CAM> name <CAM> right ;
var concat = require ( ' gulp - concat ' ) ; var template:==:require ( ' gulp - template ' ) ;
var create = panel . nodes . create ; var nodes:==:panel . picker . nodes ;
var purple200 = exports . purple200 = ' # ce93d8 ' ; var purple300:==:exports . purple300    ' # ba68c8 ' ;
var a = merge ( args , arguments ) , c = context ; var c:==:this instanceof bound ? this : context ;
var s = new Sandbox ( warehouse : SIMPLE <UND> WAREHOUSE ) ; var run:==:s . run ( ' create ' , ' foobar ' ) ;
var face <CAM> colors = options . face <CAM> colors ; var flat:==:( options . flat      undefined ) ? true : options . flat ;
var diameterY = options . diameterY  |  |  options . diameter  |  |  1 ; var diameterZ:==:options . diameterZ  |  |  options . diameter  |  |  1 ;
var fold = this . get <CAM> next <CAM> fold <CAM> to ( row , column ) . fold ; var folds:==:this . folds ;
var prefix = options . prefix ! = = undefined ? options . prefix : ' ^ ' ; var suffix:==:options . suffix !    undefined ? options . suffix : ' \\b ' ;
var textures = extract <CAM> from <CAM> cache ( meta . textures ) ; var images:==:extract <CAM> from <CAM> cache ( meta . images ) ;
var plot   = this . plotvar width:==:this . width
var width = this . width , height = this . height ; var coefficents <CAM> magnitude:==:this . coefficents <CAM> magnitude ;
var animation = this . _ animation ; var paused:==:this . paused ;
var create <CAM> binary <CAM> operator = parse <CAM> tree <CAM> factory . create <CAM> binary <CAM> operator ; var create <CAM> call <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ;
var Types = keystone . Field . Types ; var Bool:==:new keystone . List ( ' Boolean ' ,
var texture = texture <CAM> loader . load ( get <CAM> image ( surface . init <UND> from ) ) ; var extra:==:texture <CAM> object . extra ;
var hash = parseURL ( options . url ) . hashvar context:==:options . context    find <CAM> container <CAM> for ( options . container )
var spawn = require ( ' child <UND> process ' ) . spawn ; var uuid:==:require ( ' uuid ' ) ;
var max = o . max ; var min:==:o . min ;
var n = new accessor <CAM> node ( a , new index <CAM> node ( [ b , c ] ) ) ; var e:==:new symbol <CAM> node ( ' c ' ) ;
var t = this . temp ; var v:==:this . values ;
var dirs = util . dirs ( ) ; var moment:==:require ( ' moment ' ) ;
var React = require ( ' React ' ) ; var View:==:require ( ' View ' ) ;
var right = camera . right ; var frustum:==:camera . frustum ;
var left = this . transform <CAM> typeof <CAM> operand _ ( tree . left ) ; var right:==:tree . right ;
var email = opt . email  |  |  '' ; var is <CAM> contact:==:opt . is <CAM> contact  |  |  false ;
var _ la = 176 ; values [ _ la ] = _ la ; var _ lb:==:177 ; values [ _ lb ]    _ lb ;
var stroke <CAM> width = series . stroke <CAM> width ? series . stroke <CAM> width : this . stroke <CAM> width ; var opacity:==:series . opacity ? series . opacity : this . opacity ;
var links = config <CAM> node . get <CAM> attribute ( ' links ' ) ; var hl:==:config <CAM> node . get <CAM> attribute ( ' highlight ' ) ;
var pg = helper . pgvar native:==:helper . args . native
var d = document ; var col:==:d . create <CAM> element ( ' col ' ) ;
var enter = ref . enter ; var after <CAM> enter:==:ref . after <CAM> enter ;
var util = require ( ' util ' ) ; var when:==:require ( ' when ' ) ;
var assert = require ( ' assert ' ) ; var adapter:==:global . adapter ;
var u = o . core . utils ; var Runtime:==:o . runtime . Runtime ;
var dynCall <UND> viffiii = Module [ ' dynCall <UND> viffiii ' ] = asm [ ' dynCall <UND> viffiii ' ] ; var dynCall <UND> vf:==:Module [ ' dynCall <UND> vf ' ]    asm [ ' dynCall <UND> vf ' ] ;
var a = fulfill <CAM> thenable <CAM> soon ( ' a ' , 40 ) ; var b:==:fulfill <CAM> thenable <CAM> soon ( ' b ' , 30 ) ;
var react <CAM> instrumentation = require ( ' react <CAM> instrumentation ' ) ; var Transaction:==:require ( ' Transaction ' ) ;
var outline <CAM> width = wall . outline <CAM> width ; var granularity:==:wall . granularity ;
var start <CAM> container = this . start <CAM> container ; var start <CAM> offset:==:this . start <CAM> offset ;
var holder = this . clone . wt <CAM> table . holder ; var hider:==:this . clone . wt <CAM> table . hider ;
var limit = options . limit  |  |  defaults . limit ; var comparator:==:options . comparator  |  |  defaults . comparator ;
var west = cesium <CAM> math . to <CAM> degrees ( rectangle . west ) ; var south:==:cesium <CAM> math . to <CAM> degrees ( rectangle . south ) ;
var create <CAM> hash = require ( ' crypto ' ) . create <CAM> hash ; var fork:==:require ( ' child <UND> process ' ) . fork ;
var Promise = test <CAM> utils . Promise ; var all <CAM> docs:==:remote . all <CAM> docs ;
var east <CAM> skirt <CAM> height = is <CAM> east <CAM> child ? this . _ east <CAM> skirt <CAM> height : ( shortest <CAM> skirt * 0 . 5 ) ; var north <CAM> skirt <CAM> height:==:is <CAM> north <CAM> child ? this . _ north <CAM> skirt <CAM> height : ( shortest <CAM> skirt * 0 . 5 ) ;
var caption = options . caption ; var width:==:options . width ;
var x = Math . abs ( args . start . x - args . pos . x ) ; var y:==:Math . abs ( args . start . y - args . pos . y ) ;
var space = config . space - BUFFER ; var min:==:config . min  |  |  MIN ;
var util = require ( ' gulp - util ' ) ; var GITHUB <UND> ACCESS <UND> TOKEN:==:process . env . GITHUB <UND> ACCESS <UND> TOKEN ;
var Buffer = _ _ webpack <UND> require _ _ ( 252 ) . Buffer ; var is <CAM> encoding:==:Buffer . is <CAM> encoding  |  |  function ( encoding )
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var ui <CAM> manager:==:require ( ' ui <CAM> manager ' ) ;
var fs = require ( ' fs ' ) ; var expect:==:require ( ' chai ' ) . expect ;
var granularity = params . granularity ; var positions:==:params . positions ;
var styles = this . _ text <CAM> content . styles ; var text <CAM> divs:==:this . _ text <CAM> divs ;
var linearization = this . linearization ; var num:==:linearization ? linearization . num <CAM> pages : this . catalog . num <CAM> pages ;
var circle = draw . circle ( 100 ) var group:==:draw . group ( )
var swarm = self . swarmvar conn:==:self . conn
var aborted = _ props . aborted ; var color:==:_ props . color ;
var create <CAM> server = require ( ' http ' ) . create <CAM> servervar test:==:require ( ' tap ' ) . test
var a = new constant <CAM> node ( 1 ) ; var n:==:new parenthesis <CAM> node ( a ) ;
var array <CAM> views = buffer . array <CAM> views ; var length:==:array <CAM> views . length ;
var size <CAM> in <CAM> bytes = options . size <CAM> in <CAM> bytes ; var usage:==:options . usage ;
var anchor = new dom <CAM> position ( sel . anchor <CAM> node , sel . anchor <CAM> offset ) ; var focus:==:new dom <CAM> position ( sel . focus <CAM> node , sel . focus <CAM> offset ) ;
var options = obj . options ; var val:==:$ ( obj . el ) . val ( ) . trim ( ) ;
var is <CAM> prop <CAM> type = is <CAM> prop <CAM> types <CAM> declaration ( property ) ; var is <CAM> default <CAM> prop:==:is <CAM> default <CAM> props <CAM> declaration ( property ) ;
var row <CAM> overscan <CAM> start <CAM> index = _ ref6 . row <CAM> overscan <CAM> start <CAM> index ; var row <CAM> overscan <CAM> stop <CAM> index:==:_ ref6 . row <CAM> overscan <CAM> stop <CAM> index ;
var entity <CAM> manager = entity <CAM> aspect . entity <CAM> manager ; var entity:==:entity <CAM> aspect . entity ;
var w = Math . floor ( this . width * this . pixel <CAM> ratio ) ; var h:==:Math . floor ( this . height * this . pixel <CAM> ratio ) ;
var bf4 = f4 . bind ( ) ; Verify ( ' 1 Length4 ' , bf4 . length , 4 ) ; var bf5:==:f5 . bind ( ) ; Verify ( ' 1 Length5 ' , bf5 . length , 5 ) ;
var b = parse <CAM> int ( hex <CAM> color . substr ( 5 , 2 ) , 16 ) ; var a:==:parse <CAM> int ( hex <CAM> color . substr ( 7 , 2 ) , 16 ) ;
var destination = this . destination ; var predicate:==:this . predicate ;
var _ oi = 232 ; values [ _ oi ] = _ oi ; var _ oj:==:233 ; values [ _ oj ]    _ oj ;
var babel = require ( ' rollup - plugin - babel ' ) var exec <CAM> sync:==:require ( ' child <UND> process ' ) . exec <CAM> sync
var process <CAM> color = require ( ' process <CAM> color ' ) ; var process <CAM> transform:==:require ( ' process <CAM> transform ' ) ;
var sample <CAM> coverage = render <CAM> state . sample <CAM> coverage ; var enabled:==:sample <CAM> coverage . enabled ;
var icc <CAM> id = window . navigator . moz <CAM> icc <CAM> manager . icc <CAM> ids [ 0 ] ; var icc:==:window . navigator . moz <CAM> icc <CAM> manager . get <CAM> icc <CAM> by <CAM> id ( icc <CAM> id ) ;
var parent <CAM> node = unwrap ( parent <CAM> node <CAM> wrapper ) ; var child:==:unwrap ( child <CAM> wrapper ) ;
var tag <CAM> name = el . tag <CAM> name  |  |  ' ( no tag ) ' ; var s:==:' < ' + tag <CAM> name . to <CAM> lower <CAM> case ( ) ;
var synthetic <CAM> event = require ( ' synthetic <CAM> event ' ) ; var get <CAM> event <CAM> target:==:require ( ' get <CAM> event <CAM> target ' ) ;
var react <CAM> native <CAM> feature <CAM> flags = require ( ' react <CAM> native <CAM> feature <CAM> flags ' ) ; var react <CAM> native <CAM> fiber <CAM> renderer:==:require ( ' react <CAM> native <CAM> fiber <CAM> renderer ' ) ;
var node <CAM> commands = model . _ node <CAM> commands ; var length:==:node <CAM> commands . length ;
var value = data <CAM> point . value ; var category <CAM> value:==:data <CAM> point . category <CAM> value ;
var head = window . document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' head ' ) [ 0 ] ; var s:==:window . document . create <CAM> element ( ' style ' ) ;
var debug = require ( ' debug ' ) ( ' gaia - profile - builder ' ) ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var ace = tab . editor . ace ; var session:==:ace . session ;
var fired = this . fired ; var res:==:this . results [ fired ] ;
var line <CAM> join = state . line <CAM> join ; var line <CAM> width:==:state . line <CAM> width ;
var program <CAM> transformer = traceur . codegeneration . program <CAM> transformer ; var tree <CAM> writer:==:traceur . outputgeneration . tree <CAM> writer ;
var fs    = require ( ' fs ' ) ; var rim:==:require ( ' rimraf ' ) . sync ;
var s = memento & & memento . substring ( 1 ) ; var t:==:s ? s . capitalize ( ) : ' All ' ;
var types = this . types = ; var fields:==:this . fields    ;
var get <CAM> slot <CAM> container = t . get <CAM> slot <CAM> container ; var report <CAM> event <CAM> element:==:t . report <CAM> event <CAM> element ;
var package <CAM> source = options . package <CAM> source ; var conn:==:options . connection ;
var uint32 <CAM> array = this . uint32 <CAM> array ; var tint:==:( target . tint > > 16 ) + ( target . tint & 0xff00 ) + ( ( target . tint & 0xff ) < < 16 ) + ( target . _ _ webgl <CAM> render <CAM> alpha * 255 < < 24 ) ;
var targets = primitive . targets ; var morph <CAM> attributes:==:geometry . morph <CAM> attributes ;
var GET <UND> CONTEXT = ' GET <UND> CONTEXT ' ; var SET <UND> CONTEXT:==:' SET <UND> CONTEXT ' ;
var i d = payload . i d  |  |  payload [ 0 ] . i d ; var method:==:payload . method  |  |  payload [ 0 ] . method ;
var text <CAM> one = this . text <CAM> one ; var text <CAM> two:==:this . text <CAM> two ;
var media <CAM> element = args . media <CAM> element ; var session:==:args . session ;
var observers = this . observers . slice ( 0 ) ; var len:==:observers . length ;
var n = A . length , i , k , flag = false , B = QB . B , H = numeric . dot ( QB . Q , numeric . dot ( QH . H , numeric . transpose ( QB . Q ) ) ) ; var Q:==:new T ( numeric . dot ( QB . Q , QH . Q ) ) , Q0 ;
var url = require ( ' url ' ) ; var util:==:require ( ' util ' ) ;
var space = _ space ; var plus:==:_ plus ;
var dur = + conf . dur ; var len:==:+ conf . len ;
var recipient = send . recipient <UND> actual  |  |  send . recipient <UND> address ; var amount:==:send . amount <UND> actual  |  |  send . amount <UND> feedback ;
var form <CAM> field = require ( ' elemental ' ) . form <CAM> field ; var form <CAM> input:==:require ( ' elemental ' ) . form <CAM> input ;
var i d = request . parameters . i d ; var file <CAM> path:==:decodeuri <CAM> component ( request . parameters . file <CAM> path ) ;
var col <CAM> right = t . col <CAM> right ; var col <CAM> content <CAM> left:==:t . col <CAM> content <CAM> left ;
var media <CAM> constraints = options . media <CAM> constraints  |  |  ; var n:==:navigator ;
var PAREN <UND> EXPRESSION = ' PAREN <UND> EXPRESSION ' ; var POSTFIX <UND> EXPRESSION:==:' POSTFIX <UND> EXPRESSION ' ;
var title = this . _ title <CAM> for <CAM> file ( ui <CAM> source <CAM> code ) ; var tooltip:==:this . _ tooltip <CAM> for <CAM> file ( ui <CAM> source <CAM> code ) ;
var contact = render <CAM> opts . contact ; var input:==:render <CAM> opts . input ;
var uglify   = require ( ' gulp - uglifyjs ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var m = sinon . create ( matcher ) ; var type:==:sinon . type <CAM> of ( expectation ) ;
var cancel = options . cancel  |  |  gettext ( ' Cancel ' ) ; var proceed:==:options . proceed  |  |  gettext ( ' Proceed ' ) ;
var Column = require ( ' fixed <CAM> data <CAM> table <CAM> column <CAM> new . react ' ) ; var column <CAM> group:==:require ( ' fixed <CAM> data <CAM> table <CAM> column <CAM> group <CAM> new . react ' ) ;
var react <CAM> native <CAM> container <CAM> info = require ( ' react <CAM> native <CAM> container <CAM> info ' ) ; var react <CAM> native <CAM> tag <CAM> handles:==:require ( ' react <CAM> native <CAM> tag <CAM> handles ' ) ;
var invalidpdf <CAM> exception = shared <CAM> util . invalidpdf <CAM> exception ; var missing <CAM> data <CAM> exception:==:shared <CAM> util . missing <CAM> data <CAM> exception ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var Text:==:require ( ' f8 <CAM> text ' ) ;
var parser = _ dereq _ ( ' engine . io - parser ' ) ; var parseuri:==:_ dereq _ ( ' parseuri ' ) ;
var event <CAM> element <CAM> handlers = t . event <CAM> element <CAM> handlers ; var set <CAM> height:==:t . set <CAM> height ;
var polyline = this . _ polyline ; var polygon:==:this . _ polygon ;
var location = validator . trim ( req . body . location ) ; var weibo:==:validator . trim ( req . body . weibo ) ;
var pass <CAM> through = require ( ' stream ' ) . pass <CAM> through ; var logger:==:require ( ' eazy - logger ' ) . Logger (
var dom = goog . dom . get <CAM> dom <CAM> helper ( root ) ; var e:==:dom . get <CAM> element ( target ) ;
var field = this . options . field ; var FIELDS:==:vector <CAM> field . FIELDS ;
var babel = require ( ' babel ' ) ; var gaze:==:require ( ' gaze ' ) ;
var tab <CAM> manager = imports . tab <CAM> manager ; var save:==:imports . save ;
var navigator = free <CAM> self & & free <CAM> self . navigator ; var app <CAM> version:==:( navigator & & navigator . app <CAM> version  |  |  '' ) . to <CAM> lower <CAM> case ( ) ;
var tom = records . tom ; var yehuda:==:records . yehuda ;
var c = f . children [ 0 ] var master:==:hd <CAM> node . from <CAM> base58 ( f . master . base58 , NETWORKS <UND> LIST )
var position = options . position  |  |  BABYLON . Vector3 . Zero ( ) ; var normal:==:options . normal  |  |  BABYLON . Vector3 . Up ( ) ;
var highlighter = config . highlighter  |  |  code <CAM> mirror <CAM> highlighter ; var showdown:==:config . showdown  |  |  new Showdown . converter ( ) ;
var label <CAM> group = this . _ label <CAM> group ; var view <CAM> rect:==:layout <CAM> info . view <CAM> rect ;
var through = require ( ' through2 ' ) var concat:==:require ( ' concat - stream ' )
var values = A . _ values ; var index:==:A . _ index ;
var has <CAM> own <CAM> property = object <CAM> proto . has <CAM> own <CAM> property ; var property <CAM> is <CAM> enumerable:==:object <CAM> proto . property <CAM> is <CAM> enumerable ;
var viz = this . viz ; var options:==:$ . merge ( this . options , viz . controller , opt ) ;
var cheerio = require ( ' cheerio ' ) ; var url:==:require ( ' url ' ) ;
var line = position . line + 1 ; var character:==:position . character + 1 ;
var cps <CAM> transformer = traceur . codegeneration . generator . cps <CAM> transformer ; var state <CAM> machine:==:traceur . syntax . trees . state <CAM> machine ;
var v = j <CAM> query ( ' # form ' ) . validate ( ) ; var method:==:$ . validator . methods [ method <CAM> name ] ;
var params = params <CAM> from <CAM> options ( options ) ; var salt:==:( options & & options . salt )  |  |  Random . secret ( ) ;
var view = this . view ; var source:==:event . source  |  |  ;
var models = _ _ alloy <CAM> id11 . models ; var len:==:models . length ;
var disabled = el . get <CAM> attribute ( ' data - disabled ' ) ! = = null ; var group:==:el . get <CAM> attribute ( ' data - group ' ) ;
var create <CAM> call <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ; var create <CAM> empty <CAM> parameter <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> empty <CAM> parameter <CAM> list ;
var webpack = require ( ' webpack ' ) ; var moment:==:require ( ' moment ' ) ;
var longitude <CAM> of <CAM> perigee = longitude <CAM> of <CAM> perigee <CAM> constant + longitude <CAM> of <CAM> perigee <CAM> sec <CAM> part * radians <CAM> per <CAM> arc <CAM> second ; var mean <CAM> longitude:==:mean <CAM> longitude <CAM> constant + mean <CAM> longitude <CAM> sec <CAM> part * radians <CAM> per <CAM> arc <CAM> second ;
var List = reporters . List ; var Base:==:reporters . Base ;
var set = subset ? to <CAM> expression ( subset ) : EXPRESSION <UND> ESCAPE ; var escape <CAM> only:==:settings . escape <CAM> only ;
var children = props . children ; var html <CAM> for:==:props . html <CAM> for ;
var hover <CAM> line <CAM> style = series <CAM> scope & & series <CAM> scope . hover <CAM> line <CAM> style ; var label <CAM> model:==:series <CAM> scope & & series <CAM> scope . label <CAM> model ;
var hello = h ( ' div ' , [ h ( ' span ' , ' hello ' ) ] ) var again:==:h ( ' div ' , [ h ( ' span ' , ' hello ' ) , h ( ' span ' , ' again ' ) ] )
var abs = Math . abs , floor = Math . floor , sqrt = Math . sqrt , atan2 = Math . atan2 ; var PI:==:Math . PI ;
var groups = this . groups ; var element <CAM> selector:==:this . element <CAM> selector ;
var Package = require ( ' pomelo - protocol ' ) . Package ; var logger:==:require ( ' pomelo - logger ' ) . get <CAM> logger ( ' pomelo ' , _ _ filename ) ;
var rpcurrency = $ filter ( ' rpcurrency ' ) ; var rpcontactname:==:$ filter ( ' rpcontactname ' ) ;
var specular = original <CAM> material . specular ; var shininess:==:original <CAM> material . shininess ;
var holderURL = flags . holderURL ; var engine <CAM> settings:==:extend ( _ engine <CAM> settings , null ) ;
var co = $ ( o . containment ) . offset ( ) ; var over:==:( $ ( ce ) . css ( ' overflow ' ) !   ' hidden ' ) ;
var fixed <CAM> columns <CAM> left = this . wot . get <CAM> setting ( ' fixed <CAM> columns <CAM> left ' ) ; var total <CAM> rows:==:this . wot . get <CAM> setting ( ' total <CAM> rows ' ) ;
var credit2 = new Credit ( ' credit2 ' ) ; var credit3:==:new Credit ( ' credit3 ' ) ;
var react <CAM> reconciler = require ( ' react <CAM> reconciler ' ) ; var react <CAM> update <CAM> queue:==:require ( ' react <CAM> update <CAM> queue ' ) ;
var telegrambot = config . telegrambot ; var utc:==:moment . utc ;
var x = scroll . x ; var y:==:scroll . y ;
var el = this . el ; var fog:==:this . el . object3D . fog ;
var id <CAM> delta = id <CAM> delta <CAM> parser . parse <CAM> short ( ) ; var id <CAM> range <CAM> offset:==:id <CAM> range <CAM> offset <CAM> parser . parseu <CAM> short ( ) ;
var pink300 = exports . pink300 = ' # f06292 ' ; var pink400:==:exports . pink400    ' # ec407a ' ;
var width = shape . width ; var x:==:shape . x ;
var transaction <CAM> mode = goog . db . Transaction . transaction <CAM> mode ; var event <CAM> types:==:goog . db . Transaction . event <CAM> types ;
var w = Math . min ( Math . max ( obj . width , o . min <CAM> width ) , o . max <CAM> width ) ; var h:==:Math . min ( Math . max ( obj . height , o . min <CAM> height ) , o . max <CAM> height ) ;
var sin = Math . sin ( angle ) ; var cos:==:Math . cos ( angle ) ;
var allow <CAM> picking = model . allow <CAM> picking ; var root <CAM> nodes:==:model . _ runtime . root <CAM> nodes ;
var a = new blog <CAM> post ( title : ' searching in mongoose ' ) ; var b:==:new blog <CAM> post ( title : ' text search in mongoose ' ) ;
var url <UND> for = ctx . extend . helper . get ( ' url <UND> for ' ) ; var config:==:ctx . config ;
var svg <CAM> root = this . _ svg <CAM> root ; var visible <CAM> list:==:this . _ visible <CAM> list ;
var date <UND> stamp    = zombie <UND> array [ index ] [ ' date <UND> stamp ' ] ; var hb <UND> id:==:zombie <UND> array [ index ] [ ' hb <UND> id ' ] ;
var label = _ props . label ; var show:==:_ props . show ;
var node = cmd . _ node ; var texture:==:node . _ texture  |  |  ( node . _ sprite <CAM> frame ? node . _ sprite <CAM> frame . _ texture : null ) ;
var vm = state . vmvar render:==:vm . render
var expect = $ ( root ) . attr ( ' data - expect ' ) ; var target:==:$ ( root ) . find ( ' [ data - target ' true ' ] ' ) . get ( 0 ) ;
var transformer = options . transformer ; var original <CAM> models:==:options . original <CAM> models ;
var _ free = Module [ ' _ free ' ] = asm [ ' _ free ' ] ; var _ strcat:==:Module [ ' _ strcat ' ]    asm [ ' _ strcat ' ] ;
var s = require ( ' underscore . string ' ) ; var exec:==:child <CAM> process . exec ;
var p = this . pos ; var o:==:this . oldpos ;
var light <CAM> green50 = exports . light <CAM> green50 = ' # f1f8e9 ' ; var light <CAM> green100:==:exports . light <CAM> green100    ' # dcedc8 ' ;
var el = this . el ; var geometry:==:this . geometry ;
var fs = require ( ' fs ' ) ; var assert:==:require ( ' assert ' ) ;
var face = faces [ i ] ; var a:==:face [ 0 ] + index <CAM> offset ;
var integration = require ( ' analytics . js - integration ' ) ; var when:==:require ( ' when ' ) ;
var Promise = goog . require ( ' goog . Promise ' ) ; var property <CAM> replacer:==:goog . require ( ' goog . testing . property <CAM> replacer ' ) ;
var slice = Array . prototype . slice ; var has <CAM> own <CAM> property:==:Object . prototype . has <CAM> own <CAM> property ;
var flush <UND> time = graphite <CAM> stats . flush <UND> time  |  |  0 ; var flush <UND> length:==:graphite <CAM> stats . flush <UND> length  |  |  0 ;
var mode = args . mode  |  |  Constants . RESERVED . CLUSTER ; var masterha:==:args . masterha  |  |  ' false ' ;
var start = Math . min ( offsets . start , length ) ; var end:==:typeof offsets . end      ' undefined ' ?
var options = this . options ; var props:==:this . props ;
var property <CAM> names = context [ ' property <CAM> names ' ] ; var srs <CAM> name:==:context [ ' srs <CAM> name ' ] ;
var width = Math . floor ( rect . z * this . app . graphics <CAM> device . width * this . render <CAM> target <CAM> scale ) ; var height:==:Math . floor ( rect . w * this . app . graphics <CAM> device . height * this . render <CAM> target <CAM> scale ) ;
var angle = data . angle ; var color:==:new THREE . Color ( data . color ) . get <CAM> hex ( ) ;
var find <CAM> in <CAM> function <CAM> scope = traceur . codegeneration . find <CAM> in <CAM> function <CAM> scope ; var formal <CAM> parameter <CAM> list:==:traceur . syntax . trees . formal <CAM> parameter <CAM> list ;
var create <CAM> promise <CAM> capability = shared <CAM> util . create <CAM> promise <CAM> capability ; var custom <CAM> style:==:displaydom <CAM> utils . custom <CAM> style ;
var members = imports . members ; var chat:==:imports . chat ;
var notify   = require ( ' gulp - notify ' ) var watch:==:require ( ' gulp - watch ' )
var while <CAM> statement = traceur . syntax . trees . while <CAM> statement ; var parse <CAM> tree <CAM> factory:==:traceur . codegeneration . parse <CAM> tree <CAM> factory ;
var group = groups [ i ] ; var start:==:group . start ;
var font = template . font ? template . font : ' Arial , Helvetica , sans - serif ' ; var text:==:template . text ? template . text : ( Math . floor ( dimensions . width ) + ' x ' + Math . floor ( dimensions . height ) ) ;
var mnc = this . _ icc <CAM> card . icc <CAM> info . mnc  |  |  ' 00 ' ; var icc <CAM> id:==:this . _ icc <CAM> id ;
var to <CAM> string = . to <CAM> stringvar has <CAM> own:==:. has <CAM> own <CAM> property
var react <CAM> wheel <CAM> handler = require ( ' react <CAM> wheel <CAM> handler ' ) ; var Scrollbar:==:require ( ' Scrollbar . react ' ) ;
var react <CAM> controlled <CAM> component = require ( ' react <CAM> controlled <CAM> component ' ) ; var reactdom <CAM> component <CAM> tree:==:require ( ' reactdom <CAM> component <CAM> tree ' ) ;
var width = options . width  |  |  10 . 0 ; var height:==:options . height  |  |  10 . 0 ;
var name = req . params . name ; var user:==:user <CAM> repos [ name ] ;
var object = this . object . to <CAM> tex ( options ) ; var index:==:this . index ? this . index . to <CAM> tex ( options ) : '' ;
var _ hg = 118 ; values [ _ hg ] = _ hg ; var _ hh:==:119 ; values [ _ hh ]    _ hh ;
var c9 = imports . c9 ; var bash <CAM> bin:==:options . bash <CAM> bin  |  |  ' bash ' ;
var show = powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , properties [ ' show ' ] , default <CAM> settings . show ) ; var position:==:powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , properties [ ' position ' ] , default <CAM> settings . position ) ;
var references = variable . references ; var identifier:==:variable . identifiers [ 0 ] ;
var timeout <CAM> time = _ timeout <CAM> time  |  |  1000 ; var interval <CAM> time:==:_ interval <CAM> time  |  |  10 ;
var d = vlength2 ( deltax , deltay ) ; var r:==:this . r ;
var module <CAM> definition <CAM> visitor = traceur . codegeneration . module . module <CAM> definition <CAM> visitor ; var validation <CAM> visitor:==:traceur . codegeneration . module . validation <CAM> visitor ;
var foo = ol . events . listen ( target , ' foo ' , function ( ) ) ; var bar:==:ol . events . listen ( target , ' bar ' , function ( ) ) ;
var yfov = camera . perspective . yfov ; var xfov:==:camera . perspective . xfov ;
var key <CAM> map = this . _ key <CAM> map ; var data:==:this . _ data ;
var current = diff . current ; var stacked <CAM> on <CAM> current:==:diff . stacked <CAM> on <CAM> current ;
var faces = geometry . faces ; var face <CAM> vertex <CAM> uvs:==:geometry . face <CAM> vertex <CAM> uvs [ 0 ] ;
var concat = require ( ' gulp - concat ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var Node = scope . wrappers . Node ; var mixin:==:scope . mixin ;
var nodes = this . nodes ; var node <CAM> count:==:this . node <CAM> count ;
var caption <CAM> start = description . index <CAM> of ( caption <CAM> start <CAM> tag ) ; var caption <CAM> end:==:description . index <CAM> of ( caption <CAM> end <CAM> tag ) ;
var port = options . port ; var local <CAM> address:==:options . local <CAM> address ;
var w = c . width = img . width ; var h:==:c . height    img . height ;
var obfuscate = options . obfuscate  |  |  false ; var keep <CAM> less:==:options . keep <CAM> less  |  |  false ;
var create <CAM> parameter <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> parameter <CAM> list ; var create <CAM> paren <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> paren <CAM> expression ;
var tick <CAM> enable = plot . tick <CAM> enablevar tick <CAM> pad:==:plot . tick <CAM> pad
var preloads = $ . data . preloads ; var index:==:preloads . index <CAM> of ( i d ) ;
var draft <CAM> editor <CAM> text <CAM> node = require ( ' draft <CAM> editor <CAM> text <CAM> node . react ' ) ; var React:==:require ( ' React ' ) ;
var join = require ( ' path ' ) . join ; var exec:==:require ( ' child <UND> process ' ) . exec ;
var xhr = this . xhr = request . getXHR ( ) ; var timeout:==:this . _ timeout ;
var Types = keystone . Field . Types ; var Num:==:new keystone . List ( ' Number ' ,
var input = $ ( ' . md - input : first ' , element ) var label:==:$ ( ' . md - input - label : first ' , element )
var aperture = _ curry2 ( _ dispatchable ( [ ] , _ xaperture , _ aperture ) ) ; var append:==:_ curry2 ( function append ( el , list )
var name = descriptor . name ; var definition:==:descriptor . definition ;
var rotate = image . rotate ; var natural <CAM> width:==:image . natural <CAM> width ;
var d = Promise . defer ( ) ; var promise:==:d . promise ;
var element <CAM> multiplier = structure . element <CAM> multiplier ; var is <CAM> big <CAM> endian:==:structure . is <CAM> big <CAM> endian ;
var texture = sprite . texture ; var base <CAM> texture:==:texture . base <CAM> texture ;
var metalness = this . metalness . build <CAM> code ( builder , ' fv1 ' ) ; var alpha:==:this . alpha ? this . alpha . build <CAM> code ( builder , ' fv1 ' ) : undefined ;
var v = verts [ i ] ; var world <CAM> corner:==:sphereConvex <UND> worldCorner ;
var generate <CAM> depth <CAM> texture = options . generate <CAM> depth <CAM> texture ? options . generate <CAM> depth <CAM> texture : false ; var do <CAM> not <CAM> change <CAM> aspect <CAM> ratio:==:options . do <CAM> not <CAM> change <CAM> aspect <CAM> ratio      undefined ? true : options . do <CAM> not <CAM> change <CAM> aspect <CAM> ratio ;
var number <CAM> of <CAM> audio <CAM> channels = config . number <CAM> of <CAM> audio <CAM> channels ; var left <CAM> buffers:==:config . left <CAM> buffers . slice ( 0 ) ;
var v = j <CAM> query ( ' # form ' ) . validate ( ) ; var method:==:$ . validator . methods . maxlength ,
var width = this . options . slider . width  |  |  200 ; var options:==:$ . extend ( this . options . slider ,
var data = evt . data ; var listener:==:listeners [ data . type ] ;
var icon = props . icon ; var label:==:props . label ;
var dom <CAM> property <CAM> names = dom <CAM> property <CAM> config . dom <CAM> property <CAM> names  |  |  ; var dom <CAM> mutation <CAM> methods:==:dom <CAM> property <CAM> config . dom <CAM> mutation <CAM> methods  |  |  ;
var width = parse <CAM> percent ( position <CAM> info . width , container <CAM> width ) ; var height:==:parse <CAM> percent ( position <CAM> info . height , container <CAM> height ) ;
var NAME = 7 ; var COMMENT:==:8 ;
var east = rectangle <CAM> scratch . east ; var south:==:rectangle <CAM> scratch . south ;
var content = instance . get ( ' content ' ) ; var expanded:==:instance . get ( ' expanded ' ) ,
var cookie = require ( ' cookie ' ) ; var extend:==:require ( ' extend ' ) ;
var base <CAM> animator = powerbi . visuals . base <CAM> animator ; var y <CAM> axis <CAM> position:==:powerbi . visuals . y <CAM> axis <CAM> position ;
var disable <CAM> touch <CAM> ripple = _ props . disable <CAM> touch <CAM> ripple ; var children:==:_ props . children ;
var fs = require ( ' fs ' ) ; var cache:==:App . Providers . _ cache    ;
var path = require ( ' path ' ) ; var join:==:path . join ;
var command = command <CAM> list [ i ] ; var pass:==:command . pass ;
var is <CAM> beta = ! ! challenge <CAM> spec . is <CAM> beta ; var is <CAM> coming <CAM> soon:==:! ! challenge <CAM> spec . is <CAM> coming <CAM> soon ;
var prev = this . prev <CAM> op ; var mergeable <CAM> commands:==:this . $ mergeable <CAM> commands ;
var i = this . i ; var j:==:this . j ;
var touches = e . original <CAM> event . touches ; var pageX:==:touches ? touches [ 0 ] . pageX : e . pageX ;
var I16 = new primitive <CAM> type ( ' I16 ' , 2 , ' i ' , -32768 , 32767 ) ; var I32:==:new primitive <CAM> type ( ' I32 ' , 4 , ' i ' , -0x80000000 , 0x7fffffff ) ;
var react <CAM> event <CAM> emitter <CAM> mixin = require ( ' react <CAM> event <CAM> emitter <CAM> mixin ' ) ; var is <CAM> event <CAM> supported:==:require ( ' is <CAM> event <CAM> supported ' ) ;
var dom = goog . require ( ' goog . dom ' ) ; var test <CAM> suite:==:goog . require ( ' goog . testing . test <CAM> suite ' ) ;
var d = new symbol <CAM> node ( 'd ' ) ; var mult:==:new operator <CAM> node ( ' * ' , ' multiply ' , [ a , b , c ] ) ;
var a = mobx . observable ( 2 ) ; var b:==:mobx . observable ( 3 ) ;
var text <CAM> color <CAM> unit = text <CAM> color <CAM> unit  |  |  ' # fff ' ; var text <CAM> align:==:text <CAM> align  |  |  ' center ' ;
var data <CAM> label <CAM> text = powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> text , visuals . label <CAM> text . value ) ; var data <CAM> label <CAM> horizontal <CAM> position:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . data <CAM> label <CAM> horizontal <CAM> position , visuals . reference <CAM> line <CAM> data <CAM> label <CAM> horizontal <CAM> position . left ) ;
var ext = extname ( path ) . slice ( 1 ) ; var filter:==:filters [ ext ] ;
var length = nodes . length ; var root <CAM> node:==:data <CAM> grid . root <CAM> node ( ) ;
var min <CAM> dvr <CAM> window = model . get ( ' min <CAM> dvr <CAM> window ' ) ; var stream <CAM> type:==:utils . stream <CAM> type ( duration , min <CAM> dvr <CAM> window ) ;
var axis = axis <CAM> model . axis ; var show:==:retrieve ( opt . axis <CAM> label <CAM> show , axis <CAM> model . get ( ' axis <CAM> label . show ' ) ) ;
var target = event <CAM> path [ i ] . target ; var current <CAM> target:==:event <CAM> path [ i ] . current <CAM> target ;
var texture = this . texture ; var frame:==:texture . frame ;
var amberA400 = exports . amberA400 = ' # ffc400 ' ; var amberA700:==:exports . amberA700    ' # ffab00 ' ;
var lazy <CAM> loader = window . wrappedjs <CAM> object . lazy <CAM> loader ; var data:==:window . wrappedjs <CAM> object . data ;
var resource <UND> type = option <UND> consume ( options , ' resource <UND> type ' , ' image ' ) ; var version:==:option <UND> consume ( options , ' version ' ) ;
var DISTANCE <UND> DISPLAY <UND> CONDITION <UND> INDEX = point <CAM> primitive . DISTANCE <UND> DISPLAY <UND> CONDITION <UND> INDEX ; var DISABLE <UND> DEPTH <UND> DISTANCE <UND> INDEX:==:point <CAM> primitive . DISABLE <UND> DEPTH <UND> DISTANCE <UND> INDEX ;
var close <CAM> on <CAM> content = mfp . st . close <CAM> on <CAM> content <CAM> click ; var close <CAM> on <CAM> bg:==:mfp . st . close <CAM> on <CAM> bg <CAM> click ;
var semver = require ( ' semver ' ) ; var zlib:==:require ( ' zlib ' ) ;
var brown900 = exports . brown900 = ' # 3e2723 ' ; var blue <CAM> grey50:==:exports . blue <CAM> grey50    ' # eceff1 ' ;
var collection = db . collection ( ' simple <UND> document <UND> insert <UND> with <UND> function <UND> safe <UND> with <UND> generators ' ) ; var o:==:configuration . write <CAM> concern <CAM> max ( ) ;
var encoding = ' transfer - encoding ' in req . headers ; var length:==:' content - length ' in req . headers & & req . headers [ ' content - length ' ] !    ' 0 ' ;
var access <CAM> token <CAM> events = exports . access <CAM> token <CAM> events = _ _ webpack <UND> require _ _ ( 335 ) ; var metadata <CAM> service:==:exports . metadata <CAM> service    _ _ webpack <UND> require _ _ ( 306 ) ;
var crypto = require ( ' crypto ' ) var Stats:==:require ( ' fs ' ) . Stats
var _ = function cc <UND> fallbackTranslation ( keystring ) var r:==:window . navigator . mozL10n . get . apply ( this , arguments ) ;
var symbol = this . symbol <CAM> quads <CAM> array . get ( k ) . symbol <CAM> quad ; var a:==:( symbol . anchor <CAM> angle + placement <CAM> angle + Math . PI ) % ( Math . PI * 2 ) ;
var create <CAM> class <CAM> and <CAM> selector = js <CAM> common . css <CAM> constants . create <CAM> class <CAM> and <CAM> selector ; var visual <CAM> data <CAM> role <CAM> kind:==:powerbi . visual <CAM> data <CAM> role <CAM> kind ;
var util = require ( ' util ' ) ; var jmespath:==:require ( ' jmespath ' ) ;
var frame = system <CAM> doc . query <CAM> selector ( ' iframe [ src= ' ' + url + ' ' ' ) ; var video:==:frame . content <CAM> window . document . query <CAM> selector ( ' video ' ) ;
var r = 255 - Math . abs ( 255 - color2 . rgb [ 0 ] - color1 . rgb [ 0 ] ) ; var g:==:255 - Math . abs ( 255 - color2 . rgb [ 1 ] - color1 . rgb [ 1 ] ) ;
var scroll <CAM> left = window . pagex <CAM> offset  |  |  doc <CAM> elem . scroll <CAM> left  |  |  body . scroll <CAM> left ; var client <CAM> top:==:doc <CAM> elem . client <CAM> top  |  |  body . client <CAM> top  |  |  0 ;
var breakpoint <CAM> items = this . _ storage . breakpoint <CAM> items ( ui <CAM> source <CAM> code ) ; var provisional <CAM> breakpoints:==:this . _ provisional <CAM> breakpoints <CAM> for <CAM> source <CAM> file <CAM> id ( source <CAM> file <CAM> id ) ;
var compare <CAM> exchange = stdlib . Atomics . compare <CAM> exchange ; var fround:==:stdlib . Math . fround ;
var axis = ( data . axis ! = = undefined ) ? data . axis : 1 ; var radius:==:data . radius  |  |  0 . 5 ;
var state = this . model . get ( ' state ' ) ; var stream <CAM> info:==:this . model . get ( ' stream <CAM> info ' ) ;
var log <CAM> item <CAM> elt = log <CAM> item <CAM> elts [ i ] ; var timestamp:==:log <CAM> item <CAM> elt . get <CAM> attribute ( ' data - timestamp ' ) ;
var height = _ cache . height ; var width:==:_ cache . width ;
var world <CAM> impulse = Body <UND> applyLocalImpulse <UND> worldImpulse ; var world <CAM> point:==:Body <UND> applyLocalImpulse <UND> worldPoint ;
var bind = require ( ' bind ' ) ; var debug:==:require ( ' debug ' ) ( ' analytics : group ' ) ;
var vertical <CAM> overscan <CAM> size = _ props3 . vertical <CAM> overscan <CAM> size ; var width:==:_ props3 . width ;
var task = payload . task ; var code:==:task . code ;
var o = Object . prevent <CAM> extensions ( ) ; var v:==:o . v    50 ;
var mime = require ( ' mime ' ) ; var crypto:==:require ( ' crypto ' ) ;
var prefix = new Blockly . field <CAM> label ( ' prefix ' ) ; var field:==:new Blockly . field <CAM> label ( ' field ' ) ;
var Parent = Parse . Object . extend ( ' Parent ' ) ; var Grandparent:==:Parse . Object . extend ( ' Grandparent ' ) ;
var start = request . startvar end:==:request . end
var path    = require ( ' path ' ) ; var async:==:require ( ' async ' ) ;
var class <CAM> name = options . class <CAM> name  |  |  ' ' ; var visible:==:options . visible     null  |  |  options . visible ;
var gl = this . glvar shader:==:this . shader
var n = new conditional <CAM> node ( condition , a , b ) ; var e:==:new constant <CAM> node ( 5 ) ;
var w = x + width ; var h:==:y + height ;
var predefined <CAM> name = traceur . syntax . predefined <CAM> name ; var property <CAM> method <CAM> assignment:==:traceur . syntax . trees . property <CAM> method <CAM> assignment ;
var no <CAM> subst = this . no <CAM> subst ; var depth:==:this . depth ;
var module <CAM> expression = this . transform <CAM> any ( tree . module <CAM> expression ) ; var import <CAM> specifier <CAM> set:==:this . transform <CAM> list ( tree . import <CAM> specifier <CAM> set ) ;
var pixel <CAM> ratio = plot . pixel <CAM> ratiovar screen <CAM> box:==:plot . screen <CAM> box
var http = req . secure ? ' https ' : ' http ' ; var settings:==:! bin . url ? custom <CAM> config & & custom <CAM> config . settings : ;
var COMPUTED <UND> PROPERTY <UND> NAME = ' COMPUTED <UND> PROPERTY <UND> NAME ' ; var CONDITIONAL <UND> EXPRESSION:==:' CONDITIONAL <UND> EXPRESSION ' ;
var generate <CAM> mip <CAM> maps = options . generate <CAM> mip <CAM> maps ? options . generate <CAM> mip <CAM> maps : false ; var generate <CAM> depth <CAM> texture:==:options . generate <CAM> depth <CAM> texture ? options . generate <CAM> depth <CAM> texture : false ;
var path = require ( ' path ' ) ; var sleep:==:require ( ' sleep ' ) ;
var uuid    = require ( ' node - uuid ' ) ; var validator:==:require ( ' validator ' ) ;
var statuses = require ( ' statuses ' ) var merge:==:require ( ' utils - merge ' ) ;
var NOT <UND> PROPER = scope <CAM> analyzer . NOT <UND> PROPER ; var KIND <UND> PACKAGE:==:scope <CAM> analyzer . KIND <UND> PACKAGE ;
var create <CAM> throw <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> throw <CAM> statement ; var create <CAM> undefined <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> undefined <CAM> expression ;
var ccitt <CAM> fax <CAM> stream = core <CAM> stream . ccitt <CAM> fax <CAM> stream ; var flate <CAM> stream:==:core <CAM> stream . flate <CAM> stream ;
var Date = window . Date ; var set <CAM> timeout:==:window . set <CAM> timeout ;
var r = signature . rvar s:==:signature . s
var background = app . element . style . background <CAM> image ; var background <CAM> size:==:app . element . style . background <CAM> size ;
var type = Types . from <CAM> string ( parameters . type ) ; var buffer:==:parameters . buffer ;
var _ character <CAM> recognize = Module [ ' _ character <CAM> recognize ' ] = asm [ ' _ character <CAM> recognize ' ] ; var _ bitshift64 <CAM> shl:==:Module [ ' _ bitshift64 <CAM> shl ' ]    asm [ ' _ bitshift64 <CAM> shl ' ] ;
var v = cam . viewport . to <CAM> global ( this . engine . get <CAM> render <CAM> width ( ) , rh ) ; var tmp <CAM> vec3:==:Canvas2D <UND> 1 . _ tmp <CAM> vec3 ;
var json <CAM> results <CAM> adapter = mapping <CAM> context . json <CAM> results <CAM> adapter ; var type <CAM> map:==:json <CAM> results <CAM> adapter . type <CAM> map ;
var clockseq = options . clockseq ! = null ? options . clockseq : _ clockseq ; var msecs:==:options . msecs !   null ? options . msecs : new Date ( ) . get <CAM> time ( ) ;
var parameter <CAM> list = this . transform <CAM> any ( tree . parameter <CAM> list ) ; var body:==:this . transform <CAM> any ( tree . body ) ;
var client = Nightwatch . client ( ) ; var api:==:client . api ;
var category <CAM> labels = this . data . category <CAM> labels ; var margin:==:this . margin ;
var n = new index <CAM> node ( [ b , c ] ) ; var e:==:new constant <CAM> node ( 5 ) ;
var react <CAM> native <CAM> tag <CAM> handles = require ( ' react <CAM> native <CAM> tag <CAM> handles ' ) ; var ui <CAM> manager:==:require ( ' ui <CAM> manager ' ) ;
var token <CAM> type = traceur . syntax . token <CAM> type ; var variable <CAM> declaration <CAM> list:==:traceur . syntax . trees . variable <CAM> declaration <CAM> list ;
var is <CAM> opened = _ props . is <CAM> opened ; var keep <CAM> collapsed <CAM> content:==:_ props . keep <CAM> collapsed <CAM> content ;
var x = vehicles [ i ] . position . x ; var y:==:vehicles [ i ] . position . y ;
var db = require ( ' mime - db ' ) var extname:==:require ( ' path ' ) . extname
var c9 = imports . c9 ; var menus:==:imports . menus ;
var document = document <CAM> element . local <CAM> name = = = ' Document ' ? document <CAM> element : query <CAM> first <CAM> node ( document <CAM> element , ' Document ' , namespaces . kml ) ; var name:==:query <CAM> string <CAM> value ( document , ' name ' , namespaces . kml ) ;
var buf <CAM> len = Alias ( ' buf <CAM> len ' , U32 ) ; var buf <CAM> ptr:==:Alias ( ' buf <CAM> ptr ' , void <CAM> ptr ) ;
var tab <CAM> barios = require ( ' tab <CAM> barios ' ) ; var tab <CAM> bar <CAM> itemios:==:require ( ' tab <CAM> bar <CAM> itemios ' ) ;
var name = this . transform <CAM> any ( tree . name ) ; var parameter <CAM> list:==:this . transform <CAM> any ( tree . parameter <CAM> list ) ;
var command = commands [ j ] ; var parameters:==:command [ ' parameters ' ] ;
var num <CAM> successful = this . _ sending <CAM> files <CAM> queue [ 0 ] . num <CAM> successful ; var num <CAM> unsuccessful:==:this . _ sending <CAM> files <CAM> queue [ 0 ] . num <CAM> unsuccessful ;
var decimal = $ . data ( this , ' numeric . decimal ' ) ; var callback:==:$ . data ( this , ' numeric . callback ' ) ;
var t = s . top ; var b:==:s . bottom ;
var tag = el . tag ; var type:==:el . attrs <CAM> map . type ;
var x = default <CAM> value ( viewport . x , 0 . 0 ) ; var y:==:default <CAM> value ( viewport . y , 0 . 0 ) ;
var postcss = require ( ' postcss ' ) ; var table:==:require ( ' text - table ' ) ;
var diameterX = options . diameterX  |  |  options . diameter  |  |  1 ; var diameterY:==:options . diameterY  |  |  options . diameter  |  |  1 ;
var s = this . _ container . style ; var l:==:parse <CAM> float ( s . left ) ;
var tangents = attr . tangents ; var bitangents:==:attr . bitangents ;
var _ calloc = Module [ ' _ calloc ' ] = asm [ ' _ calloc ' ] ; var run <CAM> post <CAM> sets:==:Module [ ' run <CAM> post <CAM> sets ' ]    asm [ ' run <CAM> post <CAM> sets ' ] ;
var _ ln = 189 ; values [ _ ln ] = _ ln ; var _ lo:==:190 ; values [ _ lo ]    _ lo ;
var footer = this . $ element . find ( ' . repeater - footer ' ) ; var viewport:==:this . $ element . find ( ' . repeater - viewport ' ) ;
var tabbehavior = imports . tabbehavior ; var debug:==:imports . debugger ;
var fixed <CAM> data <CAM> table <CAM> cell <CAM> default = require ( ' fixed <CAM> data <CAM> table <CAM> cell <CAM> default . react ' ) ; var fixed <CAM> data <CAM> table <CAM> column:==:require ( ' fixed <CAM> data <CAM> table <CAM> column . react ' ) ;
var src = path . join ( _ _ dirname , ' . . ' , ' . . ' , ' src ' ) var fs:==:require ( ' fs ' )
var italics = get <CAM> style <CAM> property ( item , style <CAM> context <CAM> stack , ' italics ' , false ) ; var color:==:get <CAM> style <CAM> property ( item , style <CAM> context <CAM> stack , ' color ' , ' black ' ) ;
var nodes <CAM> were <CAM> added = scope . nodes <CAM> were <CAM> added ; var nodes <CAM> were <CAM> removed:==:scope . nodes <CAM> were <CAM> removed ;
var group = draw . group ( ) var line:==:group . line ( 0,0,100,100 )
var s2 = _ s2 ; var i2:==:_ i2 ;
var buffer = attrib . buffervar size:==:attrib . size  |  |  4
var fieldset = $ ( ' selects <UND> fieldset ' ) ; var fields:==:fieldset . immediate <CAM> descendants ( ) ;
var contained2 = document . get <CAM> element <CAM> by <CAM> id ( ' contained2 ' ) ; var not <UND> container:==:document . get <CAM> element <CAM> by <CAM> id ( ' not <UND> container ' ) ;
var WIDTH <UND> INDEX = Polyline . WIDTH <UND> INDEX = 2 ; var MATERIAL <UND> INDEX:==:Polyline . MATERIAL <UND> INDEX    3 ;
var key = $ target . data ( ' key ' ) ; var snippet:==:$ target . data ( ' snippet ' ) ;
var semver = require ( ' semver ' ) var minimatch:==:require ( ' minimatch ' )
var pump = require ( ' pump ' ) var inherits:==:require ( ' inherits ' )
var enter <CAM> active <CAM> class = data . enter <CAM> active <CAM> class ; var appear <CAM> class:==:data . appear <CAM> class ;
var first <CAM> row = this . $ changed <CAM> lines . first <CAM> row ; var last <CAM> row:==:this . $ changed <CAM> lines . last <CAM> row ;
var container = this . els . container ; var seek <CAM> bar:==:this . els . seek <CAM> bar ;
var value = element ( by . binding ( ' value  |  date : ' HH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' my <CAM> form . input . $ valid ' ) ) ;
var app <CAM> config = pdf <CAM> viewer <CAM> application . app <CAM> config ; var script:==:document . create <CAM> element ( ' script ' ) ;
var hat = require ( ' hat ' ) ; var assert:==:require ( ' assert ' ) ;
var child <CAM> hooka = Hook ( ' child <CAM> hooka ' ) var child <CAM> hookb:==:Hook ( ' child <CAM> hookb ' )
var repsw = validator . trim ( req . body . repsw )  |  |  '' ; var key:==:validator . trim ( req . body . key )  |  |  '' ;
var name = $ ( ' # name ' ) . val ( ) ; var score:==:$ ( ' # score ' ) . val ( ) ;
var iframe = document . i d ( params . iframe ) ; var onload:==:props . onload  |  |  $ empty ;
var document = window . document ; var slice:==:deleted <CAM> ids . slice ;
var Matrix = math . type . Matrix ; var Help:==:math . type . Help ;
var node = _ ref2 . node ; var key:==:node . key ;
var dynamic = ref . dynamic ; var style <CAM> result:==:ref . style <CAM> result ;
var cancellation <CAM> error = errors . cancellation <CAM> error ; var timeout <CAM> error:==:errors . timeout <CAM> error ;
var for <CAM> each = Array . prototype . for <CAM> each . call . bind ( Array . prototype . for <CAM> each ) ; var concat:==:Array . prototype . concat . call . bind ( Array . prototype . concat ) ;
var kpi <CAM> arcs = this . kpi <CAM> arcs = [ ] ; var kpi <CAM> arc <CAM> paths:==:this . kpi <CAM> arc <CAM> paths    [ ] ;
var node <CAM> code <CAM> type = this . _ node <CAM> code <CAM> type ; var node <CAM> cons <CAM> string <CAM> type:==:this . _ node <CAM> cons <CAM> string <CAM> type ;
var bridge = imports . bridge ; var tab <CAM> manager:==:imports . tab <CAM> manager ;
var events   = require ( ' events ' ) ; var pass <CAM> through:==:require ( ' stream ' ) . pass <CAM> through ;
var start = grid . get <CAM> node <CAM> at ( startX , startY ) ; var end:==:grid . get <CAM> node <CAM> at ( endX , endY ) ;
var errors = ( its . errors  |  |  [ ] ) . concat ( its . warnings  |  |  [ ] ) var er:==:new Error ( ' Sorry , ' + errors . join ( ' and ' ) + ' . ' )
var zone = info . zone ; var rule:==:info . rule ;
var combo = the <CAM> scope . combo ; var drop <CAM> down:==:the <CAM> scope . drop <CAM> down ;
var clientX = get <CAM> coord ( ' clientX ' , e ) ; var clientY:==:get <CAM> coord ( ' clientY ' , e ) ;
var touches = ( event . original <CAM> event  |  |  event ) . touches [ 0 ] var scale:==:( event . original <CAM> event  |  |  event ) . scale
var proxyquire = require ( ' proxyquire ' ) ; var path:==:require ( ' path ' ) ;
var width = _ ref . width ; var x:==:_ ref . x ;
var react <CAM> instrumentation = require ( ' react <CAM> instrumentation ' ) ; var react <CAM> node <CAM> types:==:require ( ' react <CAM> node <CAM> types ' ) ;
var h = Math . max ( 0 , f - k ) ; var i:==:Math . min ( qrcode . width - 1 , f + k ) ;
var took = log <CAM> entry . took ; var next <CAM> state:==:log <CAM> entry . next <CAM> state ;
var stage = new Hilo . Stage ( i d : ' stage ' ) ; var container:==:new Hilo . Container ( i d : ' container ' ) ;
var all <CAM> children = util . all <CAM> children ; var create <CAM> make <CAM> node <CAM> function:==:util . create <CAM> make <CAM> node <CAM> function ;
var w = mesh <CAM> instance . skin <CAM> instance . bone <CAM> texture . width ; var h:==:mesh <CAM> instance . skin <CAM> instance . bone <CAM> texture . height ;
var top = frustum . top ; var bottom:==:frustum . bottom ;
var o = this . options ; var helper:==:$ . is <CAM> function ( o . helper ) ? $ ( o . helper . apply ( this . element [ 0 ] , [ event ] ) ) : ( o . helper     ' clone ' ? this . element . clone ( ) . remove <CAM> attr ( ' i d ' ) : this . element ) ;
var gulp = require ( ' gulp ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var timeline = viewer . _ timeline ; var fullscreen <CAM> button:==:viewer . _ fullscreen <CAM> button ;
var compute <CAM> metadata <CAM> callback <CAM> props = _ ref . compute <CAM> metadata <CAM> callback <CAM> props ; var next <CAM> cells <CAM> count:==:_ ref . next <CAM> cells <CAM> count ;
var react <CAM> fiber <CAM> reconciler = require ( ' react <CAM> fiber <CAM> reconciler ' ) ; var react <CAM> input <CAM> selection:==:require ( ' react <CAM> input <CAM> selection ' ) ;
var View = require ( ' View ' ) ; var Text:==:require ( ' f8 <CAM> text ' ) ;
var y = this . orientation . y ; var z:==:this . orientation . z ;
var Types = keystone . Field . Types ; var date <CAM> array:==:new keystone . List ( ' date <CAM> array ' ,
var theme = params . theme ; var i d:==:params . i d ;
var crypto = require ( ' crypto ' ) ; var xml2js:==:require ( ' xml2js ' ) ;
var prevent = require ( ' prevent ' ) ; var querystring:==:require ( ' querystring ' ) ;
var path = require ( ' path ' ) ; var url:==:require ( ' url ' ) ;
var inherit = _ dereq _ ( ' component - inherit ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' engine . io - client : polling ' ) ;
var zfail = value . zfail  |  |  ' keep ' ; var zpass:==:value . zpass  |  |  ' keep ' ;
var action = _ ref$action = = = undefined ? ' set <CAM> item ' : _ ref$action ; var key:==:_ ref . key ;
var progress = options & & options . progress ; var strategy:==:options & & options . strategy ;
var btn <CAM> play = document . get <CAM> element <CAM> by <CAM> id ( ' btn <CAM> play ' ) ; var btn <CAM> stop:==:document . get <CAM> element <CAM> by <CAM> id ( ' btn <CAM> stop ' ) ;
var window <CAM> time <CAM> span = state . window <CAM> time <CAM> span ; var window:==:state . window ;
var _ ea = 64 ; values [ _ ea ] = _ ea ; var _ eb:==:65 ; values [ _ eb ]    _ eb ;
var viewer = this . viewer ; var device:==:this . device ;
var tmp = require ( ' tmp ' ) ; var request:==:require ( ' request ' ) ;
var done <CAM> list = this . _ done <CAM> list ; var len:==:done <CAM> list . length ;
var knox = require ( ' knox ' ) ; var keystone:==:req . keystone ;
var update <UND> breadcrumbs = options . update <UND> breadcrumbs  |  |  typeof options . update <UND> breadcrumbs = = = ' undefined ' ; var update <UND> title:==:options . update <UND> title  |  |  typeof options . update <UND> title      ' undefined ' ;
var data <CAM> source = kendo . data . data <CAM> source ; var observable <CAM> object:==:kendo . data . observable <CAM> object ;
var UA = local <CAM> storage . get <CAM> item ( ' UA ' )  |  |  defaultUA ; var headers:==:local <CAM> storage . get <CAM> item ( ' headers ' ) ;
var react <CAM> default <CAM> batching <CAM> strategy = require ( ' react <CAM> default <CAM> batching <CAM> strategy ' ) ; var react <CAM> empty <CAM> component:==:require ( ' react <CAM> empty <CAM> component ' ) ;
var el = this . el ; var uuid:==:el . get <CAM> object3d ( ' mesh ' ) . material . uuid ;
var a = vdot ( n , seg . ta ) - seg . r ; var b:==:vdot ( n , seg . tb ) - seg . r ;
var children = _ props . children ; var enter <CAM> delay:==:_ props . enter <CAM> delay ;
var m = this . meta , h = this . record <CAM> type , b = h . prototype . fields , l = b . items , i = b . length , j ; var g:==:this . get <CAM> root ( a ) , e    g . length , d    e , k    true ;
var connector = this . app . components . _ _ connector _ _ ; var session <CAM> service:==:this . app . get ( ' session <CAM> service ' ) ;
var conn = simslot . conn ; var index:==:simslot . index ;
var random = p5 . prototype . random ; var random <CAM> seed:==:p5 . prototype . random <CAM> seed ;
var min = that . options . min ; var element:==:that . element ;
var domain = require ( ' domain ' ) ; var d:==:domain . create ( ) ;
var data = kendo . data ; var keys:==:kendo . keys ;
var debug = require ( ' debug ' ) ( ' express : view ' ) ; var path:==:require ( ' path ' ) ;
var sample <CAM> rate = context . sample <CAM> rate ; var gain:==:this . _ gain <CAM> node . gain ;
var connect = document . get <CAM> element <CAM> by <CAM> id ( ' connect ' ) ; var address:==:document . get <CAM> element <CAM> by <CAM> id ( ' address ' ) ;
var x = this . orientation . x ; var y:==:this . orientation . y ;
var options = opt <UND> options ? opt <UND> options : ; var pixel <CAM> ratio:==:options . pixel <CAM> ratio  |  |  ol . has . DEVICE <UND> PIXEL <UND> RATIO ;
var s = rv <CAM> muls ( ba , t ) var r:==:rv <CAM> add ( a , s )
var warn = shared <CAM> util . warn ; var Cmd:==:core <CAM> primitives . Cmd ;
var y = pos <CAM> info . cy + parse <CAM> percent ( offset <CAM> center [ 1 ] , pos <CAM> info . r ) ; var width:==:parse <CAM> percent ( detail <CAM> model . get ( ' width ' ) , pos <CAM> info . r ) ;
var query = data . query  |  |  '' ; var search <CAM> by:==:data . search <CAM> by  |  |  ' username ' ;
var options = vm . $ options ; var parent:==:options . parent ;
var Media = Windows . Media ; var storage <CAM> library:==:Windows . Storage . storage <CAM> library ;
var replace = require ( ' gulp - replace ' ) ; var webdriver:==:require ( ' gulp - webdriver ' ) ;
var flatten = util . flatten ; var unflattenr:==:util . unflattenr ;
var distance = distances [ node <CAM> ordinal ] + 1 ; var first <CAM> edge <CAM> index:==:first <CAM> edge <CAM> indexes [ node <CAM> ordinal ] ;
var geometry <CAM> config = config [ 0 ] . geometry <CAM> config ; var container:==:geometry <CAM> config . container ;
var react <CAM> host <CAM> component = require ( ' react <CAM> host <CAM> component ' ) ; var react <CAM> reconcile <CAM> transaction:==:require ( ' react <CAM> reconcile <CAM> transaction ' ) ;
var source   = require ( ' vinyl - source - stream ' ) ; var buffer:==:require ( ' vinyl - buffer ' ) ;
var b = Stream . combine ( function ( a ) return a ( ) * 2 , [ a ] ) var c:==:Stream . combine ( function ( a ) return a ( ) * a ( ) , [ a ] )
var user <CAM> agent = require ( ' user <CAM> agent ' ) ; var invariant:==:require ( ' invariant ' ) ;
var View = require ( ' View ' ) ; var render <CAM> application:==:require ( ' render <CAM> application ' ) ;
var key = e . key <CAM> code ; var ctrl <CAM> key:==:e . ctrl <CAM> key ;
var index = scope . model <CAM> array . index <CAM> of ( item ) ; var model:==:scope . model <CAM> array ;
var key = _ ref . key ; var value:==:_ ref . value ;
var rotation = rectangle . rotation ; var outline <CAM> width:==:rectangle . outline <CAM> width ;
var i d = get <CAM> attr ( node <CAM> dom , ' i d ' ) ; var label:==:get <CAM> attr ( node <CAM> dom , ' label ' ) ;
var outline <CAM> width = ellipse . outline <CAM> width ; var number <CAM> of <CAM> vertical <CAM> lines:==:ellipse . number <CAM> of <CAM> vertical <CAM> lines ;
var FLUSH = ' FLUSH ' ; var GET <UND> CONTEXT:==:' GET <UND> CONTEXT ' ;
var r = _ dereq _ ; var vertx:==:r ( ' vertx ' ) ;
var message = evt . detail . message  |  |  '' ; var title:==:evt . detail . title  |  |  '' ;
var vao = this . vaovar shader:==:this . shader
var Pattern = util . Pattern ; var join:==:path <CAM> fn . join ;
var should = chai . should ; var sinon:==:require ( ' sinon ' ) ;
var y = q . y ( ) ; var z:==:q . z ( ) ;
var south = query <CAM> numeric <CAM> value ( lat <CAM> lon <CAM> box , ' south ' , namespaces . kml ) ; var east:==:query <CAM> numeric <CAM> value ( lat <CAM> lon <CAM> box , ' east ' , namespaces . kml ) ;
var el = this . el ; var has <CAM> positional <CAM> tracking:==:this . has <CAM> positional <CAM> tracking !    undefined ? this . has <CAM> positional <CAM> tracking : check <CAM> has <CAM> positional <CAM> tracking ( ) ;
var e = new Experience ( ) ; var n:==:this . window <UND> size ;
var http = require ( ' http ' ) var querystring:==:require ( ' querystring ' )
var child = scope . child ; var input:==:child . inputA ;
var chai = require ( ' chai ' ) ; var expect:==:chai . expect ;
var node <CAM> field <CAM> count = this . _ node <CAM> field <CAM> count ; var nodes:==:this . nodes ;
var KATAKANA = ci . KATAKANA ; var EXTENDNUMLET:==:ci . EXTENDNUMLET ;
var webpack = require ( ' webpack ' ) var path:==:require ( ' path ' )
var y = radiusy * Math . sin ( phi ) ; var z:==:radiusz * Math . cos ( phi ) * Math . cos ( theta ) ;
var transformation = coding <CAM> style <CAM> parameters . transformation ; var precision:==:context . components [ c ] . precision ;
var pid = post <CAM> el . attr ( ' data - pid ' ) ; var index:==:parse <CAM> int ( post <CAM> el . attr ( ' data - index ' ) , 10 ) ;
var mqtt = require ( ' mqtt ' ) ; var events:==:require ( ' events ' ) ;
var t = HTMLCSS . TeX . rule <UND> thickness * scale ; var h:==:( sub |  | presub ) . bbox . h , d    ( sup |  | presup ) . bbox . d ;
var path = require ( ' path ' ) ; var extname:==:path . extname ;
var grid <CAM> model = finder . grid <CAM> model ; var coords <CAM> list:==:this . _ coords <CAM> list ;
var value = element ( by . binding ( ' example . value  |  date : ' yyyy - MM - ddTHH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' my <CAM> form . input . $ valid ' ) ) ;
var decode <CAM> offsets = decode <CAM> params . decode <CAM> offsets ; var decode <CAM> scales:==:decode <CAM> params . decode <CAM> scales ;
var debug = require ( ' debug ' ) ( ' axm : notify ' ) ; var util:==:require ( ' util ' ) ;
var name = this . _ format <CAM> parameter ( params [ i ] . name + ' : ' , ' header - name ' , this . _ decode <CAM> request <CAM> parameters ) ; var value:==:this . _ format <CAM> parameter ( params [ i ] . value , ' header - value source - code ' , this . _ decode <CAM> request <CAM> parameters ) ;
var c9 = imports . c9 ; var tab <CAM> manager:==:imports . tab <CAM> manager ;
var opts = load <CAM> data . opts  |  |  ; var models:==:_ _ alloy <CAM> id5 . models ;
var series <CAM> model = finder . series <CAM> model ; var x <CAM> axis <CAM> model:==:finder . x <CAM> axis <CAM> model
var value = dates [ key ] . value ; var start:==:new Date ( value . start ) ;
var pathname = entry . pathname ; var search:==:entry . search ;
var args = mixin . args  |  |  '' ; var block:==:mixin . block ;
var text = this . _ text <CAM> editor . text ( ) ; var range:==:this . _ text <CAM> editor . range ( ) ;
var restrict = utils . restrictvar maintenance:==:utils . maintenance
var height = dom . height ; var clear <CAM> color:==:this . clear <CAM> color ;
var RESOURCE <UND> DOWNLOAD <UND> TIMEOUT = process . env . RESOURCE <UND> DOWNLOAD <UND> TIMEOUT  |  |  10 * 1000 ; var WAIT <UND> AFTER <UND> LAST <UND> REQUEST:==:process . env . WAIT <UND> AFTER <UND> LAST <UND> REQUEST  |  |  500 ;
var passport = require ( ' passport ' ) ; var crypto:==:require ( ' crypto ' ) ;
var el = this . el ; var has <CAM> positional <CAM> tracking:==:this . has <CAM> positional <CAM> tracking  |  |  check <CAM> has <CAM> positional <CAM> tracking ( ) ;
var flux <CAM> store = require ( ' flux <CAM> store ' ) ; var flux <CAM> store <CAM> group:==:require ( ' flux <CAM> store <CAM> group ' ) ;
var scheduler = instance . get ( ' scheduler ' ) ; var view <CAM> date:==:date <CAM> math . safe <CAM> clear <CAM> time ( scheduler . get ( ' view <CAM> date ' ) ) ;
var a = require ( ' aaa ' ) ; var b:==:require ( ' bbb ' ) ;
var apf = imports . apf ; var ace:==:imports . ace ;
var filter = angular . is <CAM> defined ( options . filter ) ? options . filter : defaults . filter ; var limit:==:options . limit  |  |  defaults . limit ;
var zlib = require ( ' zlib ' ) var fstream:==:require ( ' fstream ' )
var width = img . width , height = img . height ; var fill <CAM> color:==:this . current . fill <CAM> color ;
var create <CAM> assignment <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> statement ; var create <CAM> binary <CAM> operator:==:parse <CAM> tree <CAM> factory . create <CAM> binary <CAM> operator ;
var zoom <CAM> factor = this . _ constraints <CAM> in <CAM> dip ? 1 : web <CAM> inspector . zoom <CAM> manager . zoom <CAM> factor ( ) ; var constraints:==:this . _ sidebar <CAM> view ? this . _ sidebar <CAM> view . constraints ( ) : new Constraints ( ) ;
var item = data . item ; var text:==:item . text ;
var document = window & & window . document ; var navigator:==:window & & window . navigator ;
var c = Ti . UI . create <CAM> view ( border <CAM> color : ' # 133899',border <CAM> width : 6,border <CAM> radius : 2,background <CAM> color : ' red',width : 100,height : 100,top : 115,left : 40,name : ' view c ' ) ; var d:==:Ti . UI . create <CAM> view ( border <CAM> color : ' # 133899',border <CAM> width : 6,border <CAM> radius : 2,background <CAM> color : ' cyan',width : 100,height : 100,top : 220,name : ' view d ' ) ;
var CALL <UND> SIGNATURE = ' CALL <UND> SIGNATURE ' ; var CASE <UND> CLAUSE:==:' CASE <UND> CLAUSE ' ;
var top = bounds . top  |  |  0 ; var left:==:bounds . left  |  |  0 ;
var title = options . title ; var body:==:options . body ;
var timestamp = e . coords . timestamp ; var altitude <CAM> accuracy:==:e . coords . altitude <CAM> accuracy ;
var fixed <CAM> data <CAM> table <CAM> column <CAM> group = require ( ' fixed <CAM> data <CAM> table <CAM> column <CAM> group . react ' ) ; var fixed <CAM> data <CAM> table <CAM> column:==:require ( ' fixed <CAM> data <CAM> table <CAM> column . react ' ) ;
var dimensions = data . dimensions ; var metrics:==:data . metrics ;
var group = this . item <CAM> set . group <CAM> from <CAM> target ( event ) ; var custom <CAM> time:==:custom <CAM> time . custom <CAM> time <CAM> from <CAM> target ( event ) ;
var Nothing = Maybe . Nothing = new Maybe ( sentinel , [ ] ) ; var Just:==:Maybe . Just    function ( value ) return new Maybe ( sentinel , [ value ] ) ; ;
var settings = imports . settings ; var layout:==:imports . layout ;
var line = lines [ i ] ; var len:==:line . length ;
var editor = this . editor ; var config:==:editor . config ;
var left <CAM> overlay = wot . wt <CAM> overlays . left <CAM> overlay ; var wt <CAM> table:==:wot . wt <CAM> table ;
var exec <CAM> sync = require ( ' child <UND> process ' ) . exec <CAM> sync ; var fs:==:require ( ' fs ' ) ;
var query = req . query ; var storage:==:req . storage  |  |  ctx . entries ;
var values = properties . values . filter ( function ( value ) return value ! = = null ; ) ; var formatter:==:visuals . value <CAM> formatter . create ( formatter <CAM> options ) ;
var m = math . matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , ' dense ' ) ; var r:==:multiply ( m , math . matrix ( [ [ 5 , 6 ] , [ 7 , 8 ] ] , ' sparse ' ) ) ;
var value = group [ 1 ]  |  |  ' $ value ' ; var index:==:group [ 2 ]  |  |  ' $ index ' ;
var add <CAM> marker <CAM> watcher = leaflet <CAM> markers <CAM> helpers . add <CAM> marker <CAM> watcher ; var update <CAM> marker:==:leaflet <CAM> markers <CAM> helpers . update <CAM> marker ;
var binary <CAM> error <CAM> handler = Struct ( ' binary <CAM> error <CAM> handler ' ) ; var Location:==:Struct ( ' Location ' ) ;
var copy <CAM> rows <CAM> limit = settings . copy <CAM> rows <CAM> limit ; var copy <CAM> cols <CAM> limit:==:settings . copy <CAM> cols <CAM> limit ;
var resolve = require ( ' path ' ) . resolvevar osenv:==:require ( ' osenv ' )
var width = default <CAM> value ( options . width , gl . drawing <CAM> buffer <CAM> width ) ; var height:==:default <CAM> value ( options . height , gl . drawing <CAM> buffer <CAM> height ) ;
var Uri = Windows . Foundation . Uri ; var Colors:==:Windows . UI . Colors ;
var Controller = _ components <CAM> fxos <CAM> mvc <CAM> dist <CAM> mvc . Controller ; var main <CAM> view:==:_ js <CAM> view <CAM> main <CAM> view [ ' default ' ] ;
var rimraf = require ( ' rimraf ' ) var assert:==:require ( ' assert ' )
var component = components [ i d ] ; var entity:==:component . entity ;
var array <CAM> length = web <CAM> inspector . remote <CAM> object . array <CAM> length ( preview ) ; var properties:==:preview . properties ;
var app = require ( ' app ' ) ; var core:==:require ( ' core ' ) ;
var guess = options ? ! ! options . guess : true ; var p:==:new print <CAM> stack <CAM> trace . implementation ( ) ;
var Log = require ( ' grunt - legacy - log ' ) . Log ; var assert:==:require ( ' assert ' ) ;
var debug = imports . debugger ; var layout:==:imports . layout ;
var create <CAM> identifier <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> identifier <CAM> expression ; var predefined <CAM> name:==:traceur . syntax . predefined <CAM> name ;
var name = options . name  |  |  '' ; var groups:==:options . groups  |  |  '' ;
var sql = tmp . sql ; var cql:==:tmp . cql ;
var i d = field <CAM> attributes . i d  |  |  ' upload ' ; var name:==:field <CAM> attributes . name  |  |  ' file ' ;
var scroll <CAM> left = _ document . body . scroll <CAM> left + _ document . document <CAM> element . scroll <CAM> left ; var scroll <CAM> top:==:_ document . body . scroll <CAM> top + _ document . document <CAM> element . scroll <CAM> top ;
var fields = this . fields = ; var paths:==:this . paths    ;
var selector = request . selector ; var sort:==:request . sort ;
var x = moves [ i ] . start . x ; var y:==:moves [ i ] . start . y ;
var event <CAM> target = scope . wrappers . event <CAM> target ; var mixin:==:scope . mixin ;
var exchange = $ scope . exchange ; var currency:==:ripple . Currency . from <UND> human ( exchange . currency <UND> name ) ;
var chapter = store . create <CAM> record ( ' chapter ' , title : ' The Story Begins ' ) ; var relationship:==:chapter . _ internal <CAM> model . _ relationships . get ( ' pages ' ) ;
var arrow <CAM> head = Math . max ( 0 , Math . min ( bounds . height , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' arrow <CAM> head ' , this . arrow <CAM> head ) ) ) ) ; var dx:==:Math . max ( 0 , Math . min ( bounds . width , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx ' , this . dx ) ) ) ) ;
var selected = this . selected ( ) ; var index:==:options . index <CAM> of ( selected ) ;
var error = debug ( ' components : texture : error ' ) ; var texture <CAM> loader:==:new THREE . texture <CAM> loader ( ) ;
var s = TO <UND> STRING ( this ) ; var n:==:TO <UND> INTEGER ( count ) ;
var padding <CAM> left = parse <CAM> int ( style . padding <CAM> left , 10 )  |  |  0 ; var padding <CAM> right:==:parse <CAM> int ( style . padding <CAM> right , 10 )  |  |  0 ;
var _ lh = 183 ; values [ _ lh ] = _ lh ; var _ li:==:184 ; values [ _ li ]    _ li ;
var min = version & & version . min ; var max:==:version & & version . max ;
var data = dataA . slice ( ) ; var length:==:dataB . length ;
var dominators <CAM> tree = this . _ dominators <CAM> tree ; var retained <CAM> sizes:==:this . _ retained <CAM> sizes ;
var x = this . x _ - xy . x ; var y:==:this . y _ - xy . y ;
var fs   = require ( ' fs - extra ' ) ; var input:==:opts . cli . input . slice ( 1 ) ;
var config <CAM> manager = window . parent . config <CAM> manager ; var cost <CAM> control:==:window . parent . cost <CAM> control ;
var pool = templates . find ( ' . pool ' ) . clone ( true ) ; var end:==:data . end  |  |  Date . create ( ' now ' ) . format ( Date . ISO8601 <UND> DATETIME ) ;
var class <CAM> name = options . class <CAM> name ! = = undefined ? options . class <CAM> name : ' ol - overviewmap ' ; var tip <CAM> label:==:options . tip <CAM> label !    undefined ? options . tip <CAM> label : ' Overview map ' ;
var scheduler = state . scheduler ; var window <CAM> creation <CAM> interval:==:state . window <CAM> creation <CAM> interval ;
var shape = options . shape  |  |  [ 512 , 512 ] var step:==:options . step  |  |  [ 32 , 32 ]
var continuous = opts . continuous  |  |  false ; var batch <UND> size:==:opts . batch <UND> size  |  |  1 ;
var maxwidth = options . colmaxwidth  |  |  300 ; var widths:==:options . widths  |  |  ;
var run = Ember . run ; var attr:==:DS . attr ;
var compression = require ( ' compression ' ) ; var favicon:==:require ( ' serve - favicon ' ) ;
var shape    = pair . value . shape ; var new <CAM> height:==:pair . value . new <CAM> height ;
var name = form <CAM> data [ i ] . name ; var value:==:form <CAM> data [ i ] . value ;
var amber800 = exports . amber800 = ' # ff8f00 ' ; var amber900:==:exports . amber900    ' # ff6f00 ' ;
var type = message . type . to <CAM> lower <CAM> case ( ) ; var data:==:message . data ;
var open = document . get <CAM> element <CAM> by <CAM> id ( ' open ' ) ; var opensave:==:document . get <CAM> element <CAM> by <CAM> id ( ' opensave ' ) ;
var $ = this . $ ; var parent:==:$ . parent <CAM> node ;
var Danger = require ( ' Danger ' ) ; var reactdom <CAM> component <CAM> tree:==:require ( ' reactdom <CAM> component <CAM> tree ' ) ;
var tooltip <CAM> builder = powerbi . visuals . tooltip <CAM> builder ; var get <CAM> invalid <CAM> value <CAM> warnings:==:powerbi . visuals . get <CAM> invalid <CAM> value <CAM> warnings ;
var ONEAVGYEAR = constants . ONEAVGYEAR ; var ONEAVGMONTH:==:constants . ONEAVGMONTH ;
var is <CAM> integer = _ _ webpack <UND> require _ _ ( 2 ) . is <CAM> integer ; var format:==:_ _ webpack <UND> require _ _ ( 11 ) . format ;
var SWITCH <UND> STATEMENT = ' SWITCH <UND> STATEMENT ' ; var SYNTAX <UND> ERROR <UND> TREE:==:' SYNTAX <UND> ERROR <UND> TREE ' ;
var loginname = validator . trim ( req . body . loginname ) . to <CAM> lower <CAM> case ( ) ; var email:==:validator . trim ( req . body . email ) . to <CAM> lower <CAM> case ( ) ;
var kind = text <CAM> track <CAM> queue [ i ] . kind ; var label:==:text <CAM> track <CAM> queue [ i ] . label !    undefined ? text <CAM> track <CAM> queue [ i ] . label : text <CAM> track <CAM> queue [ i ] . lang ;
var wd = require ( ' wd ' ) ; var path:==:require ( ' path ' ) ;
var a = mobx . observable ( 1 ) ; var b:==:mobx . observable ( 1 ) ;
var side <UND> ns = sphereBox <UND> side <UND> ns ; var side <UND> ns1:==:sphereBox <UND> side <UND> ns1 ;
var code = selectn ( ' faultcode . $ value ' , body . Fault )  |  |  selectn ( ' faultcode ' , body . Fault ) ; var string:==:selectn ( ' faultstring . $ value ' , body . Fault )  |  |  selectn ( ' faultstring ' , body . Fault ) ;
var analyze <CAM> pixels = function analyze <CAM> pixels ( ) var len:==:pixels . length ;
var $ root <CAM> element = this . $ injector . get ( ' $ root <CAM> element ' ) ; var $ log:==:this . $ injector . get ( ' $ log ' ) ;
var cast <CAM> shadows = shadow <CAM> mode . cast <CAM> shadows ( tile <CAM> provider . shadows ) ; var receive <CAM> shadows:==:shadow <CAM> mode . receive <CAM> shadows ( tile <CAM> provider . shadows ) ;
var floor = stdlib . Math . floor ; var exp:==:stdlib . Math . exp ;
var s = Number ( reg <CAM> exp <CAM> result <CAM> array [ 2 ] ) ; var l:==:Number ( reg <CAM> exp <CAM> result <CAM> array [ 3 ] ) ;
var selected <CAM> categories = user <CAM> gesture ? : this . _ selected <CAM> categories <CAM> setting . get ( ) ; var child <CAM> nodes:==:this . _ categories <CAM> element . child <CAM> nodes ;
var days <CAM> in <CAM> week = Calc . days <CAM> in <CAM> week ; var get <CAM> day <CAM> id:==:Calc . get <CAM> day <CAM> id ;
var ace <CAM> undo = this . $ ace <CAM> undo ; var stack:==:e . stack  |  |  [ ] ;
var orientation = this . options . orientation . axis ; var start:==:util . convert ( this . body . range . start , ' Number ' ) ;
var r = convertRGB ( this . r ) ; var g:==:convertRGB ( this . g ) ;
var orient = this . _ orient ; var text <CAM> style <CAM> model:==:this . visual <CAM> map <CAM> model . text <CAM> style <CAM> model ;
var validate <CAM> index = local <CAM> utils . validate <CAM> index ; var massage <CAM> index <CAM> def:==:local <CAM> utils . massage <CAM> index <CAM> def ;
var join = require ( ' path ' ) . join ; var dirname:==:require ( ' path ' ) . dirname ;
var from <CAM> point = js <CAM> common . pixel <CAM> converter . from <CAM> point ; var label <CAM> text <CAM> properties:==:powerbi . visuals . data <CAM> label <CAM> utils . label <CAM> text <CAM> properties ;
var el = setup <CAM> select ( ' ng - required='is <CAM> required ' md - no - asterisk ng - model='some <CAM> model ' ' ) ; var select:==:el . find ( ' md - select ' ) ;
var token = this . tokens [ 0 ] ; var t:==:token . text ;
var el = create <CAM> ui <CAM> select ( theme : ' select2 ' , allow <CAM> clear : ' is <CAM> clear <CAM> allowed ' ) ; var $ select:==:el . scope ( ) . $ select ;
var url = require ( ' url ' ) var semver:==:require ( ' semver ' )
var path = require ( ' path ' ) ; var ejs:==:require ( ' ejs ' ) ;
var start <CAM> time = options . start <CAM> time ; var stop <CAM> time:==:options . stop <CAM> time ;
var data <CAM> view <CAM> matrix <CAM> utils = powerbi . data . data <CAM> view <CAM> matrix <CAM> utils ; var sq <CAM> expr <CAM> builder:==:powerbi . data . sq <CAM> expr <CAM> builder ;
var concat   = require ( ' gulp - concat ' ) ; var csslint:==:require ( ' gulp - csslint ' ) ;
var source = this . source ; var subscription:==:this . subscription ;
var Header = require ( ' Header ' ) ; var Prism:==:require ( ' Prism ' ) ;
var g = p . get ( ' global ' ) ; var last <CAM> index:==:p . get ( ' last <CAM> index ' ) ;
var doc = document ; var head:==:doc . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' head ' ) . item ( 0 ) ;
var p = this . _ props ; var radiusX:==:( p . radiusX !   null ) ? p . radiusX : p . radius ;
var mockmatchers = goog . require ( ' goog . testing . mockmatchers ' ) ; var parallel <CAM> closure <CAM> test <CAM> suite:==:goog . require ( ' goog . testing . parallel <CAM> closure <CAM> test <CAM> suite ' ) ;
var v = goog . vec . vec3d . create <CAM> from <CAM> values ( 3 , 4 , 5 ) ; var s:==:goog . vec . vec3d . create <CAM> from <CAM> values ( 6 , 7 , 8 ) ;
var vertices = this . vertices ; var uvs:==:this . uvs ;
var simple <CAM> orientation = Windows . Devices . Sensors . simple <CAM> orientation ; var simple <CAM> orientation <CAM> sensor:==:Windows . Devices . Sensors . simple <CAM> orientation <CAM> sensor ;
var sop <CAM> marker <CAM> used = context . COD . sop <CAM> marker <CAM> used ; var eph <CAM> marker <CAM> used:==:context . COD . eph <CAM> marker <CAM> used ;
var path = require ( ' path ' ) ; var denodeify:==:require ( ' denodeify ' ) ;
var name = node . name ; var parent:==:tw . parent ( ) ;
var computed = mobx . computed ; var transaction:==:mobx . transaction ;
var log <CAM> list = cc . _ log <CAM> list ; var doc:==:document ;
var url = require ( ' url ' ) var marked:==:require ( ' marked ' )
var default <CAM> clause = traceur . syntax . trees . default <CAM> clause ; var do <CAM> while <CAM> statement:==:traceur . syntax . trees . do <CAM> while <CAM> statement ;
var centerX = widget . _ centerX ; var centerY:==:widget . _ centerY ;
var wallet <CAM> id = wallet . credentials . wallet <CAM> id ; var config:==:config <CAM> service . get <CAM> sync ( ) . wallet . settings ;
var parse <CAM> tree <CAM> factory = traceur . codegeneration . parse <CAM> tree <CAM> factory ; var parse <CAM> tree <CAM> transformer:==:traceur . codegeneration . parse <CAM> tree <CAM> transformer ;
var session = require ( ' express - session ' ) ; var passport:==:require ( ' passport ' ) ;
var at <CAM> name <CAM> token = traceur . syntax . at <CAM> name <CAM> token ; var identifier <CAM> token:==:traceur . syntax . identifier <CAM> token ;
var position = camera . position ; var direction:==:camera . direction ;
var ext = imports . ext ; var vfs:==:imports . vfs ;
var scale = interp ( fromM . scale , toM . scale , f ) ; var skew:==:interp ( fromM . skew , toM . skew , f ) ;
var edge = options . edge  |  |  ' 10 10 10 10 ' ; var rowheight:==:options . rowheight  |  |  40 ;
var request = require ( ' request ' ) ; var mime:==:require ( ' mime ' ) ;
var gl = this . glvar shape:==:this . shape
var gl = ( tempcanvas . get <CAM> context ( ' webgl ' )  |  |  tempcanvas . get <CAM> context ( ' experimental - webgl ' ) ) ; var ext:==:gl . get <CAM> extension ( extension ) ;
var hover <CAM> elements = this . _ hover <CAM> elements ; var len:==:hover <CAM> elements . length ;
var profile = req . session . profile ; var isnew:==:req . body . isnew ;
var anchor = anchors [ i ] ; var href:==:anchor . get <CAM> attribute ( ' href ' ) ;
var max = this . _ max ; var min:==:this . _ min ;
var menus = imports . menus ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var array = goog . require ( ' goog . array ' ) ; var tag <CAM> name:==:goog . require ( ' goog . dom . tag <CAM> name ' ) ;
var direction = opts . direction  |  |  ' outgoing ' ; var lines:==:parsers . lines ( media ) ;
var h = to <CAM> int ( match [ 4 ]  |  |  0 ) - tz <CAM> hour ; var m:==:to <CAM> int ( match [ 5 ]  |  |  0 ) - tz <CAM> min ;
var openfiles = imports . openfiles ; var commands:==:imports . commands ;
var _ _ GLOBAL <UND>  <UND> I <UND> a = Module [ ' _ _ GLOBAL <UND>  <UND> I <UND> a ' ] = asm [ ' _ _ GLOBAL <UND>  <UND> I <UND> a ' ] ; var run <CAM> post <CAM> sets:==:Module [ ' run <CAM> post <CAM> sets ' ]    asm [ ' run <CAM> post <CAM> sets ' ] ;
var dirname = require ( ' path ' ) . dirname ; var basename:==:require ( ' path ' ) . basename ;
var library = require ( ' library ' ) ; var framework:==:require ( ' framework ' ) ;
var ut = app . ns ( ' ut ' ) ; var services:==:app . ns ( ' services ' ) ;
var entity = this . entity ; var ellipsoid:==:this . ellipsoid ;
var entity <CAM> type = entity <CAM> group . entity <CAM> type ; var merge <CAM> strategy:==:config . merge <CAM> strategy ;
var token <CAM> type = traceur . syntax . token <CAM> type ; var options:==:traceur . options . transform ;
var node <CAM> field <CAM> count = this . _ node <CAM> field <CAM> count ; var node <CAM> count:==:this . node <CAM> count ;
var s <CAM> left = item <CAM> data . s <CAM> left - window . pagex <CAM> offset ; var s <CAM> top:==:item <CAM> data . s <CAM> top - window . pagey <CAM> offset ;
var node = g . node ( v ) var min:==:_ . reduce ( blockG . out <CAM> edges ( v ) , function ( min , e )
var text <CAM> context = settings . text <CAM> context ; var reference <CAM> context:==:settings . reference <CAM> context ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ strncpy:==:Module [ ' _ strncpy ' ]    asm [ ' _ strncpy ' ] ;
var inner = document . get <CAM> element <CAM> by <CAM> id ( setup . inner ) ; var outer:==:document . get <CAM> element <CAM> by <CAM> id ( setup . outer ) ;
var next = tangent <CAM> plane . project <CAM> point <CAM> onto <CAM> plane ( Cartesian3 . add ( position , forward , next <CAM> scratch ) , next <CAM> scratch ) ; var prev:==:tangent <CAM> plane . project <CAM> point <CAM> onto <CAM> plane ( Cartesian3 . add ( position , backward , prev <CAM> scratch ) , prev <CAM> scratch ) ;
var horizontal <CAM> offset <CAM> adjustment = _ ref . horizontal <CAM> offset <CAM> adjustment ; var is <CAM> scrolling:==:_ ref . is <CAM> scrolling ;
var range <UND> check = require ( ' range <UND> check ' ) ; var util:==:require ( ' util ' ) ;
var selected <CAM> index = ui . device <CAM> selector . selected <CAM> index ; var option:==:document . create <CAM> element ( ' option ' ) ;
var GW = this . computeGW ( ) ; var Gq:==:this . compute <CAM> gq ( ) ;
var metadata <CAM> store = breeze . metadata <CAM> store ; var json <CAM> results <CAM> adapter:==:breeze . json <CAM> results <CAM> adapter ;
var x <CAM> ref <CAM> parse <CAM> exception = shared <CAM> util . x <CAM> ref <CAM> parse <CAM> exception ; var create <CAM> promise <CAM> capability:==:shared <CAM> util . create <CAM> promise <CAM> capability ;
var dh = this . _ dh  |  0var eh:==:this . _ eh  |  0
var deprecated = shared <CAM> util . deprecated ; var info:==:shared <CAM> util . info ;
var before = method . is <CAM> static ? before <CAM> listeners : before <CAM> listeners [ ' prototype ' ] ; var after:==:method . is <CAM> static ? after <CAM> listeners : after <CAM> listeners [ ' prototype ' ] ;
var d = new symbol <CAM> node ( ' x ' ) ; var e:==:new operator <CAM> node ( ' - ' , ' subtract ' , [ c , d ] ) ;
var title = metadata . title . trim ( ) ; var artist:==:metadata . artist . trim ( ) ;
var initial <CAM> state = ' initial <CAM> state ' ; var first <CAM> state:==:' first <CAM> state ' ;
var get <CAM> context <CAM> for <CAM> subtree = require ( ' get <CAM> context <CAM> for <CAM> subtree ' ) ; var instantiate <CAM> react <CAM> component:==:require ( ' instantiate <CAM> react <CAM> component ' ) ;
var temporal = require ( ' temporal ' ) ; var readline:==:require ( ' readline ' ) ;
var a = a <CAM> children [ a <CAM> index ] ; var b:==:b <CAM> children [ b <CAM> index ] ;
var has <CAM> highlights = ( series . length > 0 ) & & series [ 0 ] . has <CAM> highlights ; var has <CAM> selection:==:this . interactivity <CAM> service & & this . interactivity <CAM> service . has <CAM> selection ( ) ;
var win <CAM> height = Parallax . win <CAM> height ; var doc <CAM> height:==:Parallax . doc <CAM> height ;
var connection = config . connection ; var channel:==:config . channel ,
var d = ; d . v = d ; var e:==:[ ] ; e . push ( e ) ;
var href = link . href ; var rel:==:link . rel ;
var uglify = require ( ' gulp - uglify ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var attributes = geometry . attributes ; var position:==:attributes . position ;
var range = clock <CAM> range [ clock <CAM> packet . clock . range ] ; var step:==:clock <CAM> step [ clock <CAM> packet . clock . step ] ;
var assert = require ( ' assert ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var curve = context [ ' curve ' ] ; var multi <CAM> curve:==:context [ ' multi <CAM> curve ' ] ;
var font <CAM> size <CAM> scale = current . font <CAM> size <CAM> scale ; var char <CAM> spacing:==:current . char <CAM> spacing ;
var range = new CKEDITOR . dom . range ( editor . document ) ; var cursors:==:this . _ . cursors ;
var dim   = _ dim  |  |  false ; var timeout:==:_ timeout  |  |  50000 ;
var ws = require ( ' ws ' ) ; var when:==:require ( ' when ' ) ;
var x = query <CAM> numeric <CAM> value ( icon <CAM> node , ' x ' , namespaces . gx ) ; var y:==:query <CAM> numeric <CAM> value ( icon <CAM> node , ' y ' , namespaces . gx ) ;
var after = helper . after ; var before:==:helper . before ;
var sass = require ( ' gulp - sass ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var head = this . headvar tail:==:this . tail
var create <CAM> yield <CAM> statement = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> yield <CAM> statement ; var create <CAM> identifier <CAM> expression:==:traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> identifier <CAM> expression ;
var Geolocator = Windows . Devices . Geolocation . Geolocator ; var geolocation <CAM> access <CAM> status:==:Windows . Devices . Geolocation . geolocation <CAM> access <CAM> status ;
var write <CAM> wrap = process . binding ( ' stream <UND> wrap ' ) . write <CAM> wrap ; var PORT:==:common . PORT ;
var write <CAM> file = require ( ' graceful - fs ' ) . write <CAM> filevar readdir <CAM> sync:==:require ( ' graceful - fs ' ) . readdir <CAM> sync
var describe = lab . describe ; var it:==:lab . it ;
var util = imports . util ; var find:==:imports . find ;
var size = require ( ' gulp - size ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var STATUS <UND> INACTIVE   = exports . STATUS <UND> INACTIVE   = 0 ; var STATUS <UND> CONNECTING:==:exports . STATUS <UND> CONNECTING     1 ;
var legacy = require ( ' character - entities - legacy ' ) ; var invalid:==:require ( ' character - reference - invalid ' ) ;
var max <UND> size <UND> y = this . resize <UND> max <UND> size <UND> y ; var min <UND> size <UND> y:==:this . resize <UND> min <UND> size <UND> y ;
var r = reader . get <CAM> float32 ( 0 , true ) ; var g:==:reader . get <CAM> float32 ( 4 , true ) ;
var calculateMD5 = ( function calculatemd5 <CAM> closure ( ) var r:==:new uint8 <CAM> array ( [
var version = sandbox . helpers . set ( ' version ' ) ; var runner:==:sandbox . helpers . runner ;
var minimist = require ( ' minimist ' ) ; var fs:==:require ( ' fs ' ) ;
var parseuri = _ dereq _ ( ' parseuri ' ) ; var parsejson:==:_ dereq _ ( ' parsejson ' ) ;
var bax = trace . baxis ; var a:==:trace . _ a    trace . a ;
var PRIMARY = ' PRIMARY ' ; var SECONDARY:==:' SECONDARY ' ;
var distanceX = self . distanceX ; var distanceY:==:self . distanceY ;
var current <CAM> velocities = _ state . current <CAM> velocities ; var last <CAM> ideal <CAM> styles:==:_ state . last <CAM> ideal <CAM> styles ;
var display = this . removed ? ' none ' : style . display ; var order:==:style . order ;
var expect = chai . expect ; var assert:==:chai . assert ;
var util = require ( ' util ' ) ; var conf:==:env . conf . event <CAM> dumper  |  |  ;
var closed = default <CAM> value ( options . closed , false ) ; var material <CAM> support:==:default <CAM> value ( options . material <CAM> support , material <CAM> appearance . material <CAM> support . TEXTURED ) ;
var event <CAM> element <CAM> handlers = t . event <CAM> element <CAM> handlers ; var show <CAM> events:==:t . show <CAM> events ;
var utility = require ( ' utility ' ) ; var uuid:==:require ( ' node - uuid ' ) ;
var appear <CAM> active <CAM> class = ref . appear <CAM> active <CAM> class ; var before <CAM> enter:==:ref . before <CAM> enter ;
var Shape = db . model ( ' Shape ' , shape <CAM> schema ) ; var Circle:==:Shape . discriminator ( ' Circle ' ,
var normal = this . normal ? this . normal . build <CAM> code ( builder , ' v3 ' ) : undefined ; var normal <CAM> scale:==:this . normal <CAM> scale & & this . normal ? this . normal <CAM> scale . build <CAM> code ( builder , ' v2 ' ) : undefined ;
var unflattenl = util . unflattenl ; var create <CAM> make <CAM> node <CAM> function:==:util . create <CAM> make <CAM> node <CAM> function ;
var percent = Math . min ( this . percent , 100 ) ; var size:==:this . _ size ;
var edges = this [ ' edges ' ] ; var normals:==:this [ ' normals ' ] ;
var jn <CAM> acc = con . jn <CAM> acc ; var jt <CAM> acc:==:con . jt <CAM> acc ;
var removed <CAM> objects = this . _ removed <CAM> objects ; var changed <CAM> objects:==:this . _ changed <CAM> objects ;
var spy = require ( ' sinon ' ) . spy ( bs . logger , ' debug ' ) ; var req:==:require ( ' http ' ) . request ( obj , function ( )
var get <CAM> scroll <CAM> position = require ( ' get <CAM> scroll <CAM> position ' ) ; var get <CAM> viewport <CAM> dimensions:==:require ( ' get <CAM> viewport <CAM> dimensions ' ) ;
var dy = Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dy ' , this . dy ) ) ) ) ; var r:==:Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' size ' , this . size ) ) ) ) ;
var a = new bigmath . expression . node . symbol <CAM> node ( ' a ' ) ; var b:==:new bigmath . expression . node . constant <CAM> node ( 2 ) ;
var Animated = require ( ' Animated ' ) ; var f8 <CAM> colors:==:require ( ' f8 <CAM> colors ' ) ;
var sq <CAM> expr <CAM> builder = powerbi . data . sq <CAM> expr <CAM> builder ; var create <CAM> data <CAM> view <CAM> scope <CAM> identity:==:powerbi . data . create <CAM> data <CAM> view <CAM> scope <CAM> identity ;
var nodemon = require ( ' nodemon ' ) ; var host:==:argv . host  |  |  ' localhost ' ;
var options = obj . options ; var key:==:event . key <CAM> code  |  |  ( extra & & extra . key <CAM> code ) ;
var identifier <CAM> token = traceur . syntax . identifier <CAM> token ; var parse <CAM> tree:==:traceur . syntax . trees . parse <CAM> tree ;
var creator = opts . creator  |  |  ' initiator ' ; var role:==:opts . role  |  |  ' initiator ' ;
var React = require ( ' React ' ) ; var tab <CAM> barios:==:require ( ' tab <CAM> barios ' ) ;
var layer <CAM> state = this . layer <CAM> states [ i ] ; var layer:==:this . map . layers [ i ] ;
var b = new String ( ' b ' ) ; var c:==:new String ( ' c ' ) ;
var read <CAM> binary <CAM> options = Struct ( ' read <CAM> binary <CAM> options ' ) ; var Script:==:Struct ( ' Script ' ) ;
var del = require ( ' del ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var menus = imports . menus ; var Menu:==:imports . Menu ;
var swipe <CAM> panel = $ . sm <CAM> config . swipe <CAM> panel ; var swipe <CAM> panel <CAM> only <CAM> close:==:$ . sm <CAM> config . swipe <CAM> panel <CAM> only <CAM> close ;
var Stream = require ( ' stream ' ) . Streamvar semver:==:require ( ' semver ' )
var p = this . _ props ; var style:==:this . el . style ;
var a = a : ' foo'var b:==:a : ' bar '
var contrast = params . contrast ; var brightness:==:params . brightness ;
var fs = require ( ' fs ' ) ; var jsdom:==:require ( ' jsdom ' ) . jsdom ;
var n3 = helper . get <CAM> node ( ' n3 ' ) ; var n4:==:helper . get <CAM> node ( ' n4 ' ) ;
var generate <CAM> depth <CAM> buffer = options . generate <CAM> depth <CAM> buffer = = = undefined ? true : options . generate <CAM> depth <CAM> buffer ; var generate <CAM> stencil <CAM> buffer:==:options . generate <CAM> stencil <CAM> buffer      undefined ? false : options . generate <CAM> stencil <CAM> buffer ;
var lime50 = exports . lime50 = ' # f9fbe7 ' ; var lime100:==:exports . lime100    ' # f0f4c3 ' ;
var _ Oval = primitives . _ Ovalvar _ Rect:==:primitives . _ Rect
var b = frustum . bottom ; var r:==:frustum . right ;
var a = this . _ rand ( n2 ) ; var g:==:n . gcd ( a ) ;
var continue <CAM> statement = exports . continue <CAM> statement = build <CAM> label <CAM> statement ( ' continue ' ) ; var return <CAM> statement:==:exports . return <CAM> statement    build <CAM> label <CAM> statement ( ' return ' , ' argument ' ) ;
var layout = imports . layout ; var endpoint:==:imports [ ' vfs . endpoint ' ] ;
var attribute <CAM> type = this . attribute ( ' attribute <CAM> type ' ) . value ; var attribute <CAM> name:==:this . attribute ( ' attribute <CAM> name ' ) . value ;
var inner = dom . create <CAM> dom ( ' div ' , goog . get <CAM> css <CAM> name ( base <CAM> class , ' inner - edge ' ) ) ; var outer:==:dom . create <CAM> dom ( ' div ' , goog . get <CAM> css <CAM> name ( base <CAM> class , ' outer - edge ' ) ) ;
var card <CAM> title <CAM> settings = this . data . card <CAM> title <CAM> settings ; var data <CAM> labels <CAM> settings:==:this . data . data <CAM> labels <CAM> settings ;
var left = this . create <CAM> char ( scale , ( delim . left |  | delim . rep ) , font ) ; var right:==:this . create <CAM> char ( scale , ( delim . right |  | delim . rep ) , font ) ;
var text = el . text <CAM> content ; var service <CAM> to <CAM> plugin:==:architect <CAM> app . service <CAM> to <CAM> plugin ;
var arch = options . arch ; var isopack <CAM> cache:==:options . isopack <CAM> cache ;
var logger = require ( ' pomelo - logger ' ) . get <CAM> logger ( ' pomelo ' , _ _ filename ) ; var Package:==:protocol . Package ;
var path = require ( ' path ' ) ; var test:==:require ( ' tap ' ) . test ;
var y = this . position . y ; var z:==:this . position . z ;
var splitURL = web <CAM> inspector . ParsedURL . spliturl <CAM> into <CAM> path <CAM> components ( url ) ; var project <CAM> id:==:web <CAM> inspector . network <CAM> project . project <CAM> id ( target , splitURL [ 0 ] , true ) ;
var destroy <CAM> tables = window . destroy <CAM> tables ; var get <CAM> cell:==:window . get <CAM> cell ;
var dim1 = panel . dim1 ; var i:==:dim1 . crossfilter <CAM> dimension <CAM> index ;
var get = request . getvar p:==:Promise . promisify ( get , multi <CAM> args : true )
var cellu <CAM> vs    = params . cellu <CAM> vsvar cell <CAM> intensity:==:params . cell <CAM> intensity
var value = ' some - value ' ; var result:==:goog . result . successful <CAM> result ( value ) ;
var PUBLISHED = api . PUBLISHED ; var INSTANCE <UND> ATTRIBUTES:==:api . INSTANCE <UND> ATTRIBUTES ;
var scope = _ ref$scope = = = undefined ? default <CAM> scope : _ ref$scope ; var redirect <UND> uri:==:_ ref . redirect <UND> uri ;
var util   = require ( ' util ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var dom = dom <CAM> mock ( ) var xhr:==:xhr <CAM> mock ( )
var dom <CAM> lazy <CAM> tree = require ( ' dom <CAM> lazy <CAM> tree ' ) ; var dom <CAM> property:==:require ( ' dom <CAM> property ' ) ;
var net = require ( ' net ' ) ; var Stream:==:require ( ' stream ' ) . Stream ;
var purpleA700 = exports . purpleA700 = ' # aa00ff ' ; var deep <CAM> purple50:==:exports . deep <CAM> purple50    ' # ede7f6 ' ;
var when = require ( ' when ' ) ; var sinon:==:require ( ' sinon ' ) ;
var _ i64 <CAM> subtract = Module [ ' _ i64 <CAM> subtract ' ] = asm [ ' _ i64 <CAM> subtract ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var DISTANCE <UND> DISPLAY <UND> CONDITION = Polyline . DISTANCE <UND> DISPLAY <UND> CONDITION = 5 ; var NUMBER <UND> OF <UND> PROPERTIES:==:Polyline . NUMBER <UND> OF <UND> PROPERTIES    6 ;
var create <CAM> string <CAM> literal = parse <CAM> tree <CAM> factory . create <CAM> string <CAM> literal ; var options:==:traceur . options . transform ;
var s = star [ i-1 ] var t:==:star [ i ]
var children = _ props . children ; var disable <CAM> height:==:_ props . disable <CAM> height ;
var baudrates = response . options . baudrates ; var port <CAM> preference:==:response . options . port <CAM> preference ;
var parse <CAM> tree <CAM> type = traceur . syntax . trees . parse <CAM> tree <CAM> type ; var postfix <CAM> expression:==:traceur . syntax . trees . postfix <CAM> expression ;
var retrieve = _ _ webpack <UND> require _ _ ( 4 ) . retrieve ; var parse <CAM> percent:==:_ _ webpack <UND> require _ _ ( 7 ) . parse <CAM> percent ;
var sass = require ( ' node - sass ' ) ; var fs:==:require ( ' fs ' ) ;
var northeast <CAM> corner <CAM> cartesian = this . northeast <CAM> corner <CAM> cartesian ; var west <CAM> normal:==:this . west <CAM> normal ;
var changed <CAM> objects = this . _ changed <CAM> objects ; var entity:==:updater . entity ;
var ev = event . original <CAM> event  |  |  event ; var time <CAM> stamp:==:ev . $ manual <CAM> time <CAM> stamp  |  |  ev . time <CAM> stamp  |  |  Date . now ( ) ;
var g = _ add <CAM> group <CAM> and <CAM> dom <CAM> element ( _ js <CAM> plumb , ' g1 ' ) ; var d1:==:_ add <CAM> div ( ' d1 ' ) ;
var knot = BABYLON . Mesh . create <CAM> torus <CAM> knot ( ' knot ' , 2 , 0 . 5 , 128 , 64 , 2 , 3 , scene ) ; var lines:==:BABYLON . Mesh . create <CAM> lines ( ' lines ' , [
var get <CAM> song <CAM> file = client . method ( ' get <CAM> song <CAM> file ' , file <CAM> path ) ; var get <CAM> song <CAM> thumbnail:==:client . method ( ' get <CAM> song <CAM> thumbnail ' , file <CAM> path ) ;
var expect = require ( ' chai ' ) . expect ; var fs:==:require ( ' fs ' ) ;
var scroll <CAM> left = _ ref . scroll <CAM> left ; var scroll <CAM> top:==:_ ref . scroll <CAM> top ;
var _ cf = 37 ; values [ _ cf ] = _ cf ; var _ cg:==:38 ; values [ _ cg ]    _ cg ;
var denom = this . _ denominators ; var coef:==:this . _ coef ;
var fill <CAM> color = node . _ style . fill <CAM> color ; var stroke <CAM> color:==:node . _ style . stroke <CAM> color ;
var pipe = function pipe ( ) var r:==:_ jquery2 [ ' default ' ] . Deferred ( ) ;
var maximum = args . form . maximum  |  |  false ; var exclusive <CAM> maximum:==:args . form . exclusive <CAM> maximum  |  |  false ;
var g = sp <CAM> color . g ; var b:==:sp <CAM> color . b ;
var Emitter = require ( ' events ' ) . event <CAM> emitter ; var sliced:==:require ( ' sliced ' ) ;
var extent = this . _ extent ; var scale:==:this . scale ;
var prev = record . _ prev <CAM> removed ; var next:==:record . _ next <CAM> removed ;
var spread <CAM> expression = traceur . syntax . trees . spread <CAM> expression ; var spread <CAM> pattern <CAM> element:==:traceur . syntax . trees . spread <CAM> pattern <CAM> element ;
var n = this . n ; var e:==:new BN ( msg ) ;
var add <CAM> days = fc . add <CAM> days ; var apply <CAM> all:==:fc . apply <CAM> all ;
var before = new Blockly . field <CAM> label ( ' before ' ) ; var after:==:new Blockly . field <CAM> label ( ' after ' ) ;
var counters = metrics . counters ; var timers:==:metrics . timers ;
var IMPORT <UND> SPECIFIER = ' IMPORT <UND> SPECIFIER ' ; var IMPORT <UND> SPECIFIER <UND> SET:==:' IMPORT <UND> SPECIFIER <UND> SET ' ;
var index = current . index ; var opts:==:current . opts ;
var sizeX = options . sizeX  |  |  size  |  |  1 ; var sizeY:==:options . sizeY  |  |  size  |  |  1 ;
var parse <CAM> tree <CAM> transformer = traceur . codegeneration . parse <CAM> tree <CAM> transformer ; var parse <CAM> tree <CAM> type:==:traceur . syntax . trees . parse <CAM> tree <CAM> type ;
var protos = ! ! pomelo . data . protos?pomelo . data . protos . server : ; var abbrs:==:pomelo . data . abbrs ;
var weight = dom . weight . value ; var rotation:==:parse <CAM> float ( dom . rotation . value ) ;
var question = imports [ ' dialog . question ' ] ; var preinstalled:==:options . preinstalled ;
var start = this . remote . start <CAM> date ; var end:==:this . remote . end <CAM> date ;
var assert = require ( ' assert - diff ' ) ; var path:==:require ( ' path ' ) ;
var entity <CAM> manager = firepad . entity <CAM> manager ; var parse <CAM> html:==:firepad . parse <CAM> html ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var radius = sphere . radius ; var normal:==:plane . normal ;
var fs = opts . fs  |  |  node <CAM> fsvar readlink:==:opts . readlink  |  |  promisify ( Promise , fs . readlink )
var deltaY = this . _ deltaY + normalized <CAM> event . pixelY ; var handle <CAM> scrollx:==:this . _ handle <CAM> scrollx ( deltaX , deltaY ) ;
var height = rrect <CAM> data . height ; var radius:==:rrect <CAM> data . radius ;
var description = scenario <CAM> test . description ; var name:==:scenario <CAM> test . operation . name ;
var map = zr <CAM> util . map ; var merge:==:zr <CAM> util . merge ;
var computed <CAM> joint <CAM> matrices = node . computed <CAM> joint <CAM> matrices ; var joints:==:node . joints ;
var extent = frame <CAM> state . extent ; var resolution:==:frame <CAM> state . view <CAM> state . resolution ;
var os = require ( ' os ' ) ; var async:==:require ( ' async ' ) ;
var bip66 = require ( ' bip66 ' ) var typeforce:==:require ( ' typeforce ' )
var attr = props . attr ; var one:==:props . one ;
var li = document . create <CAM> element ( ' li ' ) ; var timestamp:==:+ record . timestamp ;
var KIND <UND> PACKAGE = scope <CAM> analyzer . KIND <UND> PACKAGE ; var KIND <UND> DEFAULT:==:scope <CAM> analyzer . KIND <UND> DEFAULT ;
var wanted <CAM> tiles = frame <CAM> state . wanted <CAM> tiles [ tile <CAM> source <CAM> key ] ; var tile <CAM> queue:==:frame <CAM> state . tile <CAM> queue ;
var crypto = require ( ' crypto ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var e = [ ] ; e . push ( e ) ; var f:==:[ ] ; f . push ( f ) ;
var process <CAM> version = this . get <CAM> attributens ( node , this . namespaces . wps , ' process <CAM> version ' ) ; var process:==:process <CAM> version : process <CAM> version ;
var pointers = self . pointers ; var pointer:==:pointers [ object <CAM> keys ( pointers ) [ 0 ] ] ;
var key = okey . to <CAM> string ( ) var match:==:key . match ( find <CAM> proc )
var range <CAM> color = this . range <CAM> colors _ [ i ] ; var from <CAM> value:==:range <CAM> color . from <CAM> value ;
var origin <CAM> app = obj . origin <CAM> app ; var message:==:obj . message  |  |  '' ;
var nested = toJSON : nested <CAM> tojson ; var replaced:==:a : false , replaced : true , nested ;
var container <CAM> count = checks . container <CAM> count  |  |  1 ; var text:==:checks . text ;
var name = event <UND> data . script ( ) . name ( ) ; var i d:==:event <UND> data . script ( ) . i d ( ) ;
var key = keys [ i ] ; var col <CAM> info:==:_ this7 . col <CAM> infos [ key ] ;
var notify = require ( ' gulp - notify ' ) ; var typescript:==:require ( ' gulp - typescript ' ) ;
var width <CAM> data = options . width <CAM> data ; var key <CAM> expression:==:options . key <CAM> expression ;
var doc = documentvar loc:==:location
var Injection = dom <CAM> property <CAM> injection ; var Properties:==:dom <CAM> property <CAM> config . Properties  |  |  ;
var anims = imports . anims ; var commands:==:imports . commands ;
var bit <CAM> field = follower . _ bit <CAM> field ; var fulfill:==:follower . _ fulfillment <CAM> handler0 ;
var CONTINUE <UND> STATEMENT = ' CONTINUE <UND> STATEMENT ' ; var COVER <UND> FORMALS:==:' COVER <UND> FORMALS ' ;
var recid = parent . next ( ) . attr ( ' recid ' ) ; var grid:==:parent . parents ( ' . w2ui - grid ' ) . attr ( ' name ' ) ;
var params = ob . paramsvar validate:==:ob . validate <CAM> user <CAM> for <CAM> data <CAM> readapi ;
var records = summary ? this . summary : this . records ; var rec:==:records [ index ] ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var exec <CAM> sync:==:require ( ' child <UND> process ' ) . exec <CAM> sync ;
var _ da = 48 ; values [ _ da ] = _ da ; var _ db:==:49 ; values [ _ db ]    _ db ;
var c = rounded . coefficients ; var e:==:rounded . exponent ;
var lab = exports . lab = Lab . script ( ) ; var expect:==:Code . expect ;
var period   = options . period ; var damping <CAM> ratio:==:options . damping <CAM> ratio ;
var cache = this . cache ; var cache <CAM> count:==:this . cache <CAM> count ;
var stat <CAM> timer = shared <CAM> util . stat <CAM> timer ; var unexpected <CAM> response <CAM> exception:==:shared <CAM> util . unexpected <CAM> response <CAM> exception ;
var _ _ env = context . _ _ env = ; var parse:==:context . parse    function ( s <CAM> data , s <CAM> path , b <CAM> compress , b <CAM> compressjson , s <CAM> library <CAM> name )
var test = imports . test ; var commands:==:imports . commands ;
var glob = require ( ' glob ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var width = qrcode . width ; var height:==:qrcode . height ;
var anchor = document . get <CAM> element <CAM> by <CAM> id ( ' anchor2 ' ) ; var popup:==:document . get <CAM> element <CAM> by <CAM> id ( ' popup2 ' ) ;
var commander = require ( ' commander ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : cli ' ) ;
var target = event . target  |  |  event . src <CAM> elementvar parent:==:target & & target . parent <CAM> node
var sources = fs . sources . slice ( 0 ) ; var length:==:sources . length ;
var qs = require ( ' qs ' ) var querystring:==:require ( ' querystring ' )
var button = buttons [ i ] ; var title:==:button . title ;
var tiling <CAM> pattern = display <CAM> pattern <CAM> helper . tiling <CAM> pattern ; var get <CAM> shading <CAM> pattern <CAM> fromir:==:display <CAM> pattern <CAM> helper . get <CAM> shading <CAM> pattern <CAM> fromir ;
var event = seg . event ; var start:==:event . start ;
var is <CAM> int = shared <CAM> util . is <CAM> int ; var is <CAM> string:==:shared <CAM> util . is <CAM> string ;
var is <CAM> category <CAM> column <CAM> selected = powerbi . visuals . is <CAM> category <CAM> column <CAM> selected ; var converter <CAM> helper:==:powerbi . visuals . converter <CAM> helper ;
var x = proxy <CAM> ofp <CAM> foo . bind ( 1 ) ; var y:==:new Proxy ( x , handler ) ;
var sqlite3 = require ( ' sqlite3 ' ) ; var plugins:==:require ( util . dirs ( ) . gekko + ' plugins ' ) ;
var http = require ( ' http ' ) ; var fresh:==:require ( ' fresh ' ) ;
var radi = data . radi ; var data:==:data . data ;
var provider = provider <CAM> info [ i ] ; var copyright <CAM> string:==:provider . copyright <CAM> string ;
var client = this . client ; var section:==:client . api . page . simple <CAM> page <CAM> obj ( ) . section . sign <CAM> up ;
var crop = texture . crop ; var w:==:crop . width ;
var light <CAM> scene = light <CAM> scene <CAM> data . scene ; var light <CAM> fullscreen <CAM> scene:==:light <CAM> fullscreen <CAM> scene <CAM> data . scene ;
var prefiltered <CAM> cube <CAM> map64 = this . prefiltered <CAM> cube <CAM> map64  |  |  global <CAM> sky64 ; var prefiltered <CAM> cube <CAM> map32:==:this . prefiltered <CAM> cube <CAM> map32  |  |  global <CAM> sky32 ;
var express = require ( ' express ' ) ; var passport:==:require ( ' passport ' ) ;
var alt <CAM> key = default <CAM> value ( options . alt <CAM> key , false ) ; var shift <CAM> key:==:default <CAM> value ( options . shift <CAM> key , false ) ;
var super <CAM> transformer = traceur . codegeneration . super <CAM> transformer ; var temp <CAM> var <CAM> transformer:==:traceur . codegeneration . temp <CAM> var <CAM> transformer ;
var panini = require ( ' panini ' ) ; var sequence:==:require ( ' run - sequence ' ) ;
var tape = require ( ' tape ' ) var s:==:server . create <CAM> server ( )
var symbol <CAM> type = effect <CAM> cfg . symbol <CAM> type ; var color:==:effect <CAM> cfg . color ;
var y <CAM> axis <CAM> position = powerbi . visuals . y <CAM> axis <CAM> position ; var data <CAM> color <CAM> palette:==:powerbi . visuals . data <CAM> color <CAM> palette ;
var function <CAM> declaration = traceur . syntax . trees . function <CAM> declaration ; var generator <CAM> comprehension:==:traceur . syntax . trees . generator <CAM> comprehension ;
var Symbol = traceur . semantics . symbols . Symbol ; var symbol <CAM> type:==:traceur . semantics . symbols . symbol <CAM> type ;
var uglify = require ( ' gulp - uglify ' ) ; var yaml:==:require ( ' js - yaml ' ) . safe <CAM> load ;
var shows <CAM> updated = this . shows <CAM> updated . values ; var length:==:shows <CAM> updated . length ;
var utility = require ( ' utility ' ) ; var path:==:require ( ' path ' ) ;
var name = Handlebars . Utils . escape <CAM> expression ( param . name ) ; var value <CAM> id:==:Handlebars . Utils . escape <CAM> expression ( param . value <CAM> id ) ;
var gulp = require ( ' gulp ' ) ; var jscs:==:require ( ' gulp - jscs ' ) ;
var buf = new ssh <CAM> buffer ( buffer : data ) ; var d:==:buf . read <CAM> buffer ( ) ;
var sorted <CAM> cols = g . sorted <CAM> cols ( ) ; var sorted <CAM> rows:==:g . sorted <CAM> rows ( ) ;
var column <CAM> index = _ ref4 . column <CAM> index ; var is <CAM> scrolling:==:_ ref4 . is <CAM> scrolling ;
var scroll <CAM> top = this . $ scroll <CAM> element . scroll <CAM> top ( ) + this . options . offsetvar scroll <CAM> height:==:this . $ scroll <CAM> element [ 0 ] . scroll <CAM> height  |  |  this . $ body [ 0 ] . scroll <CAM> height
var support <CAM> function = exports . support <CAM> function = ' rgb | rgba | url | attr | counter | counters ' ; var support <CAM> constant:==:exports . support <CAM> constant    ' absolute | after - edge | after | all - scroll | all | alphabetic | always | antialiased | armenian | auto | avoid - column | avoid - page | avoid | balance | baseline | before - edge | before | below | bidi - override | block - line - height | block | bold | bolder | border - box | both | bottom | box | break - all | break - word | capitalize | caps - height | caption | center | central | char | circle | cjk - ideographic | clone | close - quote | col - resize | collapse | column | consider - shifts | contain | content - box | cover | crosshair | cubic - bezier | dashed | decimal - leading - zero | decimal | default | disabled | disc | disregard - shifts | distribute - all - lines | distribute - letter | distribute - space | distribute | dotted | double | e - resize | ease - in | ease - in - out | ease - out | ease | ellipsis | end | exclude - ruby | fill | fixed | georgian | glyphs | grid - height | groove | hand | hanging | hebrew | help | hidden | hiragana - iroha | hiragana | horizontal | icon | ideograph - alpha | ideograph - numeric | ideograph - parenthesis | ideograph - space | ideographic | inactive | include - ruby | inherit | initial | inline - block | inline - box | inline - line - height | inline - table | inline | inset | inside | inter - ideograph | inter - word | invert | italic | justify | katakana - iroha | katakana | keep - all | last | left | lighter | line - edge | line - through | line | linear | list - item | local | loose | lower - alpha | lower - greek | lower - latin | lower - roman | lowercase | lr - tb | ltr | mathematical | max - height | max - size | medium | menu | message - box | middle | move | n - resize | ne - resize | newspaper | no - change | no - close - quote | no - drop | no - open - quote | no - repeat | none | normal | not - allowed | nowrap | nw - resize | oblique | open - quote | outset | outside | overline | padding - box | page | pointer | pre - line | pre - wrap | pre | preserve-3d | progress | relative | repeat - x | repeat - y | repeat | replaced | reset - size | ridge | right | round | row - resize | rtl | s - resize | scroll | se - resize | separate | slice | small - caps | small - caption | solid | space | square | start | static | status - bar | step - end | step - start | steps | stretch | strict | sub | super | sw - resize | table - caption | table - cell | table - column - group | table - column | table - footer - group | table - header - group | table - row - group | table - row | table | tb - rl | text - after - edge | text - before - edge | text - bottom | text - size | text - top | text | thick | thin | transparent | underline | upper - alpha | upper - latin | upper - roman | uppercase | use - script | vertical - ideographic | vertical - text | visible | w - resize | wait | whitespace | z - index | zero ' ;
var run = test . run <CAM> id ( ) ; var coll:==:new Mongo . Collection ( ' livedata <UND> invalidation <UND> collection <UND> '+run , collection <CAM> options ) ;
var multiplier = attribute . multiplier  |  |  1 ; var components:==:attribute . components  |  |  1 ;
var defer = _ _ dependency7 _ _ . defer ; var config:==:_ _ dependency8 _ _ . config ;
var _ rf = 277 ; values [ _ rf ] = _ rf ; var _ rg:==:278 ; values [ _ rg ]    _ rg ;
var link <CAM> service = this . link <CAM> service ; var pdf <CAM> page:==:this . pdf <CAM> page ;
var color = symbol <CAM> meta . color ; var data <CAM> index:==:symbol <CAM> meta . data <CAM> index ;
var fraction = math . fraction ; var matrix:==:math . matrix ;
var _ gnu = doc <CAM> set . get <CAM> by <CAM> longname ( ' Thingy# <UND> gnu ' ) [ 0 ] ; var pez:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' Thingy#pez ' ) [ 0 ] ;
var _ dm = 60 ; values [ _ dm ] = _ dm ; var _ dn:==:61 ; values [ _ dn ]    _ dn ;
var camera = frame <CAM> state . camera ; var position <CAM> cartographic:==:camera . position <CAM> cartographic ;
var plugins = ( options . plugins  |  |  [ ] ) . map ( function ( plugin <CAM> name ) var plugin:==:load <CAM> builtin ( available <CAM> plugins , plugin <CAM> name ) ;
var BSON = require ( ' bson ' ) . native ( ) . BSON ; var suite:==:new Suite ( ' feather weight test suite ' ,
var create <CAM> class = preact <CAM> compat . create <CAM> class ; var create <CAM> element:==:preact <CAM> compat . create <CAM> element ;
var resolve = require ( ' path ' ) . resolvevar url:==:require ( ' url ' )
var min = item . min . code <CAM> point ; var max:==:item . max . code <CAM> point ;
var View = require ( ' View ' ) ; var require <CAM> native <CAM> component:==:require ( ' require <CAM> native <CAM> component ' ) ;
var group = grouped <UND> 1 [ _ i ] ; var has <CAM> role:==:_ . any ( group . values , function ( value ) return data <CAM> role <CAM> helper . has <CAM> role <CAM> in <CAM> value <CAM> column ( value , ' forecast . forecast <CAM> value ' ) ; ) ;
var shader   = this . shadervar tickX:==:this . tickX [ axis ]
var path = require ( ' path ' ) ; var hbs:==:require ( ' express - hbs ' ) ;
var EXPORT <UND> DECLARATION = ' EXPORT <UND> DECLARATION ' ; var EXPORT <UND> DEFAULT:==:' EXPORT <UND> DEFAULT ' ;
var points = options . points ; var first <CAM> tangent:==:options . first <CAM> tangent ;
var allow <CAM> mime = get <CAM> mime <CAM> regex ( this . settings . allow <CAM> mime ) ; var deny <CAM> mime:==:get <CAM> mime <CAM> regex ( this . settings . deny <CAM> mime ) ;
var alert = imports [ ' dialog . alert ' ] . show ; var apf:==:imports . apf ;
var card <CAM> padding = powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , visuals . multi <CAM> row <CAM> card <CAM> props . card . card <CAM> padding , multi <CAM> row <CAM> card . default <CAM> style . row . margin <CAM> bottom ) ; var card <CAM> background:==:powerbi . data <CAM> view <CAM> objects . get <CAM> fill <CAM> color ( objects , visuals . multi <CAM> row <CAM> card <CAM> props . card . card <CAM> background , multi <CAM> row <CAM> card . default <CAM> style . row . background ) ;
var is <CAM> startish = event <CAM> plugin <CAM> utils . is <CAM> startish ; var is <CAM> endish:==:event <CAM> plugin <CAM> utils . is <CAM> endish ;
var a = ( this . tubular <CAM> segments + 1 ) * j + i - 1 ; var b:==:( this . tubular <CAM> segments + 1 ) * ( j - 1 ) + i - 1 ;
var next <CAM> tick = $ md <CAM> util . next <CAM> tick ; var timeout:==:next <CAM> tick . timeout ;
var w = this . image . width ; var h:==:this . image . height ;
var members = type . members ; var ambient <CAM> members:==:type . ambient <CAM> members ;
var rotation <CAM> matrix = this . rotation <CAM> matrix ; var y <CAM> stretch:==:this . y <CAM> stretch ;
var options = this . options ; var paths:==:this . paths
var duration = scheduled <CAM> animation . _ duration ; var stop <CAM> time:==:scheduled <CAM> animation . stop <CAM> time ;
var store = instance . stores [ store <CAM> name ] ; var config:==:store . store <CAM> model . config ;
var babel = require ( ' broccoli - babel - transpiler ' ) ; var path:==:require ( ' path ' ) ;
var pink50 = exports . pink50 = ' # fce4ec ' ; var pink100:==:exports . pink100    ' # f8bbd0 ' ;
var bind = require ( ' bind ' ) ; var defaults:==:require ( ' defaults ' ) ;
var note <CAM> id = note <CAM> ids [ i ] ; var note:==:me . get <CAM> note ( note <CAM> id ) ;
var nconf = require ( ' nconf ' ) ; var mongoose:==:require ( ' mongoose ' ) ;
var Component = _ require . Component ; var prop <CAM> types:==:_ require . prop <CAM> types ;
var layer = this . map . layers [ i ] ; var c:==:this . layers . char <CAM> at ( i ) ;
var acc = _ acc ; var str <UND> ind:==:_ str <UND> ind ;
var l = compare ( lo , node . key ) var h:==:compare ( hi , node . key )
var name = device . name  |  |  device . address ; var paired:==:device . paired ;
var assert = require ( ' assert ' ) ; var vows:==:require ( ' vows ' ) ;
var express = require ( ' express ' ) ; var when:==:require ( ' when ' ) ;
var children = [ ] . slice . call ( container . children , 0 ) . filter ( function ( el ) var pos:==:computed <CAM> style ( el , ' position ' ) ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var f8 <CAM> navigator:==:require ( ' f8 <CAM> navigator ' ) ;
var initially <CAM> expanded = _ props . initially <CAM> expanded ; var on <CAM> expand <CAM> change:==:_ props . on <CAM> expand <CAM> change ;
var _ gk = 106 ; values [ _ gk ] = _ gk ; var _ gl:==:107 ; values [ _ gl ]    _ gl ;
var input = utils . elt ( ' input ' , null , ' class ' : ' firepad - dialog - input ' , ' i d ' : i d , ' type ' : ' text ' , ' placeholder ' : placeholder , ' autofocus ' : ' autofocus ' ) ; var submit:==:utils . elt ( ' a ' , ' Submit ' , ' class ' : ' firepad - btn ' , ' i d ' : ' submitbtn ' ) ;
var imdb <UND> id = _ this . model . get ( ' imdb <UND> id ' ) ; var episodes:==:this . model . get ( ' episodes ' ) ;
var setting = ( settings [ i ] ) . split ( ' = ' ) ; var on:==:' \'on\ ' ' ;
var scene <CAM> mode <CAM> picker = viewer . _ scene <CAM> mode <CAM> picker ; var projection <CAM> picker:==:viewer . _ projection <CAM> picker ;
var y = shape . cy ; var a:==:shape . width ;
var x2 = shape . x2 ; var y2:==:shape . y2 ;
var text = ' cesium - credit - text ' ; var image:==:' cesium - credit - image ' ;
var batch <UND> size = opts . batch <UND> size  |  |  1 ; var doc <UND> ids:==:opts . doc <UND> ids ;
var c = reject <CAM> thenable <CAM> soon ( ' rejected - c ' , 10 ) ; var d:==:reject <CAM> thenable <CAM> soon ( ' rejected - d ' , 20 ) ;
var chrome <CAM> binary = options . chrome <CAM> binary ; var key <CAM> file:==:options . key <CAM> file ;
var data <CAM> label <CAM> utils = powerbi . visuals . data <CAM> label <CAM> utils ; var will <CAM> labels <CAM> fit:==:powerbi . visuals . axis <CAM> helper . label <CAM> layout <CAM> strategy . will <CAM> labels <CAM> fit ;
var i d = option . i d ; var color:==:option . color |  | null ;
var assert = require ( ' assert ' ) ; var child <UND> process:==:require ( ' child <UND> process ' ) ;
var create <CAM> parameter <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> parameter <CAM> list ; var create <CAM> parameter <CAM> reference:==:parse <CAM> tree <CAM> factory . create <CAM> parameter <CAM> reference ;
var stun = ice <CAM> candidates . stun ; var turn:==:ice <CAM> candidates . turn ;
var event <CAM> emitter = require ( ' events ' ) . event <CAM> emitter ; var connect:==:require ( ' connect ' ) ;
var border <CAM> line <CAM> width = this . border <CAM> line <CAM> widthvar border <CAM> line <CAM> color:==:this . border <CAM> line <CAM> color
var use <CAM> send = ! options . use <CAM> collab & & options . use <CAM> send ; var max <CAM> try <CAM> series <CAM> length:==:options . max <CAM> try <CAM> series <CAM> length  |  |  3 ;
var log = log <CAM> error . bind ( this ) ; var stop:==:stop <CAM> build . bind ( this ) ;
var fs = require ( ' fs ' ) ; var findit:==:require ( ' findit ' ) ;
var resolve = require ( ' path ' ) . resolve ; var basename:==:require ( ' path ' ) . basename ;
var l = this . leftvar r:==:this . right
var Sensors = Windows . Devices . Sensors ; var simple <CAM> orientation:==:Windows . Devices . Sensors . simple <CAM> orientation ;
var d16 = _ add <CAM> div ( ' d16 ' ) , d17 = _ add <CAM> div ( ' d17 ' ) ; var conn:==:_ js <CAM> plumb . connect ( source : d16 , target : d17 , endpoint : ' Rectangle ' ) ;
var parenthesis = ( options & & options . parenthesis ) ? options . parenthesis : ' keep ' ; var expr:==:this . expr . to <CAM> string ( options ) ;
var Variable = scope <CAM> analyzer . Variable ; var PROPER:==:scope <CAM> analyzer . PROPER ;
var handle <CAM> scrollx = this . _ handle <CAM> scrollx ( deltaX , deltaY ) ; var handle <CAM> scrolly:==:this . _ handle <CAM> scrolly ( deltaY , deltaX ) ;
var generate <CAM> random <CAM> key = require ( ' generate <CAM> random <CAM> key ' ) ; var remove <CAM> entities <CAM> at <CAM> edges:==:require ( ' remove <CAM> entities <CAM> at <CAM> edges ' ) ;
var now = max <CAM> age ? Date . now ( ) : 0var len:==:priv ( this , ' length <CAM> calculator ' ) . call ( this , value , key )
var end <CAM> date = this . arg ( ' end <CAM> date ' ) ; var is <CAM> all <CAM> day:==:this . arg ( ' is <CAM> all <CAM> day ' ) ;
var child <CAM> object = Parse . Object . extend ( class <CAM> name : ' child <CAM> object ' ) ; var parent <CAM> object:==:Parse . Object . extend ( class <CAM> name : ' parent <CAM> object ' ) ;
var val = fragment . val = c . valvar index:==:fragment . index    c . index
var entry <CAM> index = level <CAM> indexes [ entry <CAM> index <CAM> on <CAM> level ] ; var entry <CAM> start <CAM> time:==:entry <CAM> start <CAM> times [ entry <CAM> index ] ;
var $ element = self . $ element = jq <CAM> lite ( element ) ; var scroll <CAM> view:==:self . scroll <CAM> view    new ionic . views . Scroll ( scroll <CAM> view <CAM> options ) ;
var b = parse <CAM> int ( hex . substring ( 5 , 7 ) , 16 ) ; var a:==:parse <CAM> int ( hex . substring ( 7 , 9 ) , 16 ) ;
var cache <CAM> functions <CAM> crc32 = options [ ' cache <CAM> functions <CAM> crc32 ' ] = = null ? false : options [ ' cache <CAM> functions <CAM> crc32 ' ] ; var fields <CAM> as <CAM> raw:==:options [ ' fields <CAM> as <CAM> raw ' ]     null ? null : options [ ' fields <CAM> as <CAM> raw ' ] ;
var cap    = options . cap ; var cutoff:==:options . cutoff ;
var timeout = this . _ timeoutvar data:==:this . _ form <CAM> data  |  |  this . _ data
var v = j <CAM> query ( ' # form ' ) . validate ( ) ; var method:==:$ . validator . methods . range ,
var slot <CAM> data <CAM> list = armature <CAM> data . slot <CAM> data <CAM> list ; var i:==:bone <CAM> data <CAM> list . length ;
var column <CAM> index = _ ref2 . column <CAM> index ; var is <CAM> scrolling:==:_ ref2 . is <CAM> scrolling ;
var has     = _ _ webpack <UND> require _ _ ( 1023 ) . has ; var unescape <CAM> md:==:_ _ webpack <UND> require _ _ ( 1023 ) . unescape <CAM> md ;
var x = 400 + this . xx [ i ] * perspective ; var y:==:300 + this . yy [ i ] * perspective ;
var height = code <CAM> view . height ( ) ; var scroll <CAM> top:==:code <CAM> view . scroll <CAM> top ( ) ;
var key = ' key ' in opts ? opts . key : false ; var descending:==:' descending ' in opts ? opts . descending : false ;
var body = client . find <CAM> element ( ' body ' ) ; var child:==:client . find <CAM> element ( ' . child ' ) ;
var start = moment ( now ) . clone ( ) . start <CAM> of ( ' hour ' ) . to <CAM> date ( ) ; var end:==:moment ( now ) . clone ( ) . end <CAM> of ( ' hour ' ) . to <CAM> date ( ) ;
var debug = require ( ' debug ' ) ( ' socket . io : client ' ) ; var url:==:require ( ' url ' ) ;
var concat = arr . concat ; var push:==:arr . push ;
var set <CAM> definition <CAM> function <CAM> wrapper = exports . set <CAM> definition <CAM> function <CAM> wrapper = proxy <CAM> support <CAM> code ( ' set <CAM> definition <CAM> function <CAM> wrapper ' ) ; var set <CAM> world <CAM> constructor:==:exports . set <CAM> world <CAM> constructor    proxy <CAM> support <CAM> code ( ' set <CAM> world <CAM> constructor ' ) ;
var predefined <CAM> name = traceur . syntax . predefined <CAM> name ; var Program:==:traceur . syntax . trees . Program ;
var center = view <CAM> state . center ; var rotation:==:view <CAM> state . rotation ;
var clip = clips [ i ] ; var e:==:clip . step ( time , delta ) ;
var ember <CAM> destroy = blueprint <CAM> helpers . ember <CAM> destroy ; var ember <CAM> generate <CAM> destroy:==:blueprint <CAM> helpers . ember <CAM> generate <CAM> destroy ;
var domain = y [ p . key ] . domain ( ) ; var range:==:y [ p . key ] . range ( ) ;
var alias = doclet . alias ; var name:==:doclet . name ;
var data <CAM> provider = this . _ data <CAM> provider ; var timeline <CAM> data:==:this . _ timeline <CAM> data ( ) ;
var xhr = this . xhr = request . getXHR ( ) ; var data:==:this . _ form <CAM> data  |  |  this . _ data ;
var i = is <CAM> start <CAM> endpoint ? j : length - j - 1 ; var child:==:node . child <CAM> nodes [ i ] ;
var panels = imports . panels ; var find:==:imports . find ;
var write <CAM> file = bluebird . promisify ( fs . write <CAM> file ) ; var beautify:==:require ( ' js - beautify ' ) . js <UND> beautify ;
var parser = require ( ' socket . io - parser ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io : namespace ' ) ;
var protocol = require ( ' pomelo - protocol ' ) ; var Package:==:protocol . Package ;
var on <CAM> mouse <CAM> enter = _ props . on <CAM> mouse <CAM> enter ; var on <CAM> mouse <CAM> leave:==:_ props . on <CAM> mouse <CAM> leave ;
var tab <CAM> manager = imports . tab <CAM> manager ; var panels:==:imports . panels ;
var span = body . html ( ' ' ) . append ( ' span ' ) ; var div:==:body . insert ( ' div ' , ' span ' ) ;
var browsers = grunt . option ( ' browsers ' ) ; var libs:==:grunt . option ( ' libs ' ) ;
var skeleton = active . skeleton ; var state:==:active . state ;
var hsep = opts . hsep = = = undefined ? ' ' : opts . hsep ; var align:==:opts . align  |  |  [ ] ;
var tls = require ( ' tls ' ) ; var http:==:require ( ' http ' ) ;
var shader   = this . shadervar ticks:==:this . ticks
var texture = gltf <CAM> runtime . textures [ i d ] ; var source:==:gltf <CAM> runtime . images [ texture . source ] ;
var is <CAM> valid <CAM> default <CAM> coordinate = property <CAM> types . is <CAM> valid <CAM> default <CAM> coordinate ; var is <CAM> valid <CAM> default <CAM> value:==:property <CAM> types . is <CAM> valid <CAM> default <CAM> value ;
var Matrix = math . type . Matrix ; var dense <CAM> matrix:==:math . type . dense <CAM> matrix ;
var fs = require ( ' fs ' ) ; var wd:==:require ( ' wd ' ) ;
var Unit = math . type . Unit ; var min:==:math . min ;
var nodes = g . nodes ( ) . map ( v = > var node:==:g . node ( v ) ;
var level = threats [ i ] . level ; var count:==:threats [ i ] . count ;
var _ _ GLOBAL <UND>  <UND> I <UND> a = Module [ ' _ _ GLOBAL <UND>  <UND> I <UND> a ' ] = asm [ ' _ _ GLOBAL <UND>  <UND> I <UND> a ' ] ; var _ _ GLOBAL <UND>  <UND> I <UND> a18:==:Module [ ' _ _ GLOBAL <UND>  <UND> I <UND> a18 ' ]    asm [ ' _ _ GLOBAL <UND>  <UND> I <UND> a18 ' ] ;
var stylish = require ( ' jshint - stylish ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var replace = require ( ' replace ' ) ; var exec:==:require ( ' child - process - promise ' ) . exec ;
var EMPTY <UND> STATEMENT = ' EMPTY <UND> STATEMENT ' ; var EXPORT <UND> DECLARATION:==:' EXPORT <UND> DECLARATION ' ;
var author <CAM> pool = ws . author <CAM> pool <CAM> parsed ; var color <CAM> pool:==:ws . color <CAM> pool <CAM> parsed ;
var run = require ( ' run - sequence ' ) ; var spawn:==:require ( ' spawn - local - bin ' ) ;
var doc = tab . document ; var path:==:tab . path ;
var wait <CAM> for = ( spec . wait <CAM> for = = undefined ) ? true : spec . wait <CAM> for ; var button:==:this . get <CAM> addon <CAM> button ( addon : addon , button : button ) ;
var data = device . data . bind ( this ) ; var setup:==:device . setup ;
var username = identify . username ( ) ; var traits:==:identify . traits ( ) ;
var should = require ( ' should ' ) ; var util:==:require ( ' util ' ) ;
var ref = this . references [ vertex . triangle <CAM> start + i ] ; var t:==:this . triangles [ ref . triangle <CAM> id ] ;
var merge = require ( ' utils - merge ' ) ; var parseurl:==:require ( ' parseurl ' ) ;
var maximum <CAM> heights = wall . maximum <CAM> heights ; var outline <CAM> width:==:wall . outline <CAM> width ;
var m = date . getutc <CAM> minutes ( ) ; m = m > = 10 ? m : ' 0'+m ; var s:==:date . getutc <CAM> seconds ( ) ; s    s >   10 ? s : ' 0'+s ;
var ALIAS <UND> KEYS = exports . ALIAS <UND> KEYS = ; var NODE <UND> FIELDS:==:exports . NODE <UND> FIELDS    ;
var x1 = Math . max ( a . x1 , b . x1 ) ; var y1:==:Math . max ( a . y1 , b . y1 ) ;
var projection = view <CAM> state . projection ; var resolution:==:view <CAM> state . resolution ;
var tab <CAM> manager = imports . tab <CAM> manager ; var ui:==:imports . ui ;
var semver = require ( ' semver ' ) var extend:==:Object . assign  |  |  require ( ' util ' ) . _ extend
var addon = spec . addon ; var button:==:spec . button ;
var method = obj . method . to <CAM> lower <CAM> case ( ) ; var timeout:==:obj . timeout ;
var diff = imagediff . diff ( old <CAM> img , new <CAM> img ) ; var canvas:==:document . create <CAM> element ( ' canvas ' ) ;
var favicon = require ( ' serve - favicon ' ) ; var path:==:require ( ' path ' ) ;
var form = document . create <CAM> element ( ' form ' ) ; var select:==:document . create <CAM> element ( ' select ' ) ;
var round <CAM> radius = ( settings . round <CAM> radius = = null ) ? 0 : settings . round <CAM> radius ; var border <CAM> thickness:==:( settings . border <CAM> thickness     null ) ? 1 : settings . border <CAM> thickness ;
var test = imports . test ; var proc:==:imports . proc ;
var bind = _ angular . bind ; var copy:==:_ angular . copy ;
var container = document . get <CAM> element <CAM> by <CAM> id ( ' container ' ) ; var control <CAM> panel:==:document . get <CAM> element <CAM> by <CAM> id ( ' control <CAM> panel ' ) ;
var vy = this . vy * damping + ( gravity . y + this . f . y * this . m <UND> inv ) * dt ; var v <UND> limit:==:this . v <UND> limit ;
var el = this . el ; var material:==:el . get <CAM> attribute ( ' material ' ) ;
var create <CAM> function <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> function <CAM> expression ; var create <CAM> member <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> member <CAM> expression ;
var immutable <CAM> dense <CAM> matrix = math . type . immutable <CAM> dense <CAM> matrix ; var sparse <CAM> matrix:==:math . type . sparse <CAM> matrix ;
var disable <CAM> height = _ props . disable <CAM> height ; var disable <CAM> width:==:_ props . disable <CAM> width ;
var clean = require ( ' gulp - clean - css ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var col = widget . col ; var row:==:widget . row ;
var c = document . create <CAM> element ( ' canvas ' ) ; var w:==:c . width    poster <CAM> cache . width ;
var i d = condition . i d ; var name:==:condition . name ;
var child = element . children [ i ] ; var text:==:$ . html <CAM> clean . trim ( text <CAM> clean ( is <CAM> text ( child ) ? child : child . children <CAM> to <CAM> string ( ) ) ) ;
var KIND <UND> PACKAGE = scope <CAM> analyzer . KIND <UND> PACKAGE ; var KIND <UND> HIDDEN:==:scope <CAM> analyzer . KIND <UND> HIDDEN ;
var item = items [ i ] ; var entity:==:item . entity ;
var eggs = _ get <CAM> formatted <CAM> item <CAM> reference ( ' items . eggs ' , _ . keys ( Content . eggs ) , ' Numeric Quantity ' ) ; var hatching <CAM> potions:==:_ get <CAM> formatted <CAM> item <CAM> reference ( ' items . hatching <CAM> potions ' , _ . keys ( Content . hatching <CAM> potions ) , ' Numeric Quantity ' ) ;
var t = this . lastT ( ) var c:==:options . center
var Utility = js <CAM> common . Utility ; var create <CAM> solid <CAM> fill <CAM> definition:==:powerbi . fill <CAM> definition <CAM> helpers . create <CAM> solid <CAM> fill <CAM> definition ;
var x = center <UND> pt . xvar y:==:center <UND> pt . y
var tooltip = this . $ ( ' . ui - tooltip - top ' ) ; var val:==:this . input . val ( ) ;
var ctor <CAM> registry = this . metadata <CAM> store . _ ctor <CAM> registry ; var r:==:ctor <CAM> registry [ this . name ]  |  |  ctor <CAM> registry [ this . short <CAM> name ]  |  |  ;
var tbody = dom . create <CAM> element ( ' tbody ' ) ; var tfoot:==:dom . create <CAM> element ( ' tfoot ' ) ;
var points = this . points ; var point:==:( points . length - 1 ) * t ;
var CONSTRUCTOR <UND> TYPE = ' CONSTRUCTOR <UND> TYPE ' ; var CONTINUE <UND> STATEMENT:==:' CONTINUE <UND> STATEMENT ' ;
var a = observable ( 1 ) var b:==:mobx . computed ( ( )   >
var object <CAM> id = result . result . result . object <CAM> id ; var promise:==:Protocol . Runtime . await <CAM> promise ( promise <CAM> object <CAM> id : object <CAM> id ) ;
var platform = this . defaults [ platform <CAM> name ]  |  |  this . defaults . fallbackvar has <CAM> unicode:==:! ! opts . has <CAM> unicode
var commands = imports . commands ; var coverage:==:imports [ ' test . coverage ' ] ;
var l = _ l ; var accu:==:_ accu ;
var thunkify = require ( ' thunkify ' ) ; var unyield:==:require ( ' unyield ' ) ;
var a = new constant <CAM> node ( 1 ) ; var n:==:new function <CAM> assignment <CAM> node ( ' func ' , [ ' x ' ] , a ) ;
var green500 = exports . green500 = ' # 4caf50 ' ; var green600:==:exports . green600    ' # 43a047 ' ;
var source <CAM> cache = this . source <CAM> cache ; var file <CAM> name:==:stackframe . file <CAM> name ;
var model = this . model ; var series <CAM> index:==:model . get ( ' series <CAM> index . ' + type ) ;
var report <CAM> event <CAM> element = t . report <CAM> event <CAM> element ; var show <CAM> events:==:t . show <CAM> events ;
var w = texture . width ; var h:==:texture . height ;
var WireV8 = goog . labs . net . web <CAM> channel . WireV8 ; var net <CAM> utils:==:goog . labs . net . web <CAM> channel . net <CAM> utils ;
var width = canvas . width ; var height:==:canvas . height - 2 * this . _ vertical <CAM> padding ;
var proc = imports . proc ; var auth:==:imports . auth ;
var width = corridor <CAM> geometry . _ width ; var extruded <CAM> height:==:corridor <CAM> geometry . _ extruded <CAM> height ;
var width = option <UND> consume ( options , ' html <UND> width ' ) ; var height:==:option <UND> consume ( options , ' html <UND> height ' ) ;
var $ element = this . $ element ; var animation:==:( options . animation ) ?
var query = url . parse ( req . url , true ) . query ; var referer:==:req . headers . referer ;
var multi <CAM> test <CAM> runner = goog . require ( ' goog . testing . multi <CAM> test <CAM> runner ' ) ; var property <CAM> replacer:==:goog . require ( ' goog . testing . property <CAM> replacer ' ) ;
var mtl <CAM> loader = this . mtl <CAM> loader ; var obj <CAM> loader:==:this . obj <CAM> loader ;
var tag <CAM> name = active <CAM> element . attr ( ' tag <CAM> name ' ) . to <CAM> lower <CAM> case ( ) ; var type:==:active <CAM> element . attr ( ' type ' ) . to <CAM> lower <CAM> case ( ) ;
var show = _ props . show ; var style:==:_ props . style ;
var exec <CAM> file = require ( ' child <UND> process ' ) . exec <CAM> filevar python <CAM> finder:==:configure . test . python <CAM> finder
var red600 = exports . red600 = ' # e53935 ' ; var red700:==:exports . red700    ' # d32f2f ' ;
var eslint = require ( ' gulp - eslint ' ) ; var gulp:==:require ( ' gulp ' ) ;
var direction = ray . direction ; var hit <CAM> point <CAM> world:==:intersectHeightfield <UND> hitPointWorld ;
var i d = identify . user <CAM> id ( ) ; var traits:==:identify . traits ( ) ;
var create <CAM> define <CAM> property = parse <CAM> tree <CAM> factory . create <CAM> define <CAM> property ; var create <CAM> identifier <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> identifier <CAM> expression ;
var interpret = require ( ' interpret ' ) ; var v8flags:==:require ( ' v8flags ' ) ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ; var g:==:new Dygraph ( graph , ' data . csv ' ,
var tooltip <CAM> builder = powerbi . visuals . tooltip <CAM> builder ; var text <CAM> measurement <CAM> service:==:powerbi . text <CAM> measurement <CAM> service ;
var load <CAM> hero = sandbox . spy ( scope , ' load <CAM> hero ' ) ; var scroll <CAM> to:==:sandbox . spy ( window , ' scroll <CAM> to ' ) ;
var server = process . servervar server2:==:process . server2
var u = ( a . yuv <UND> p _ ) ; var v:==:( a . yuv <UND> p <UND> off + bG ) ;
var align = definition . align ; var size:==:definition . size ;
var left = window . pagex <CAM> offset + input <CAM> bounds . left ; var right:==:window . document . body . offset <CAM> width - input <CAM> bounds . right ;
var g = d3 . select ( this ) . style ( ' pointer - events ' , ' all ' ) . style ( ' -webkit - tap - highlight - color ' , ' rgba ( 0,0,0,0 ) ' ) . on ( ' mousedown . brush ' , brushstart ) . on ( ' touchstart . brush ' , brushstart ) ; var background:==:g . select <CAM> all ( ' . background ' ) . data ( [ 0 ] ) ;
var DELIMITERS = SVG . FONTDATA . DELIMITERS ; var H:==:' H ' , V    ' V ' ;
var test = q <CAM> unit . test ; var expect:==:q <CAM> unit . expect ;
var order = array . ordervar dtype:==:array . dtype
var title = config . titles [ i ] ; var message:==:config . messages [ i ] ;
var prop = node . properties [ i ] ; var value:==:( prop . value      null ) ? prop . value : walk ( prop . value ) ;
var query = require ( ' component~query@0 . 0 . 3 ' ) ; var after:==:require ( ' yields~after - transition@0 . 0 . 1 ' ) ;
var r <CAM> qi = this . _ sock . get <UND> rQi ( ) ; var rQ:==:this . _ sock . r <CAM> qwhole ( ) ;
var data = this . data ; var spacing <CAM> mode:==:data . spacing <CAM> mode ;
var array <CAM> pattern = traceur . syntax . trees . array <CAM> pattern ; var binary <CAM> operator:==:traceur . syntax . trees . binary <CAM> operator ;
var data <CAM> label <CAM> manager = powerbi . data <CAM> label <CAM> manager ; var shapes:==:powerbi . visuals . shapes ;
var name = this . name ; var default <CAM> error:==:this . default <CAM> error ;
var device <CAM> name <CAM> service = _ app <CAM> js <CAM> services <CAM> device <CAM> name <CAM> service [ ' default ' ] ; var http <CAM> client <CAM> service:==:_ app <CAM> js <CAM> services <CAM> http <CAM> client <CAM> service [ ' default ' ] ;
var contained1 <UND> 1 = document . get <CAM> element <CAM> by <CAM> id ( ' contained1 <UND> 1 ' ) ; var contained1 <UND> 2:==:document . get <CAM> element <CAM> by <CAM> id ( ' contained1 <UND> 2 ' ) ;
var http = require ( ' http ' ) ; var url:==:require ( ' url ' ) ;
var overlay <CAM> content <CAM> style = _ props . overlay <CAM> content <CAM> style ; var overlay <CAM> style:==:_ props . overlay <CAM> style ;
var undefsafe = require ( ' undefsafe ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var _ im <UND> search = Module [ ' _ im <UND> search ' ] = asm [ ' _ im <UND> search ' ] ; var _ memcpy:==:Module [ ' _ memcpy ' ]    asm [ ' _ memcpy ' ] ;
var moment = require ( ' moment ' ) ; var util:==:require ( ' util ' ) ;
var text <CAM> color = default <CAM> value ( parse <CAM> color <CAM> string ( query <CAM> string <CAM> value ( node , ' text <CAM> color ' , namespaces . kml ) ) , Color . BLACK ) ; var text:==:query <CAM> string <CAM> value ( node , ' text ' , namespaces . kml ) ;
var table = require ( ' text - table ' ) var semver:==:require ( ' semver ' )
var platform = rplatform . exec ( ua )  |  |  [ ] ; var tablet:==:rtablet . exec ( ua )  |  |
var socket = options . redis . socket ; var port:==:! socket ? ( options . redis . port  |  |  6379 ) : null ;
var N = N  |  |  3 ; var f <CAM> ctr0:==:f <CAM> ctr0  |  |  15 . 625 ;
var set <CAM> height = t . set <CAM> height ; var get <CAM> day <CAM> segment <CAM> container:==:t . get <CAM> day <CAM> segment <CAM> container ;
var height = shape . height ; var r:==:shape . r ;
var get <CAM> unicode <CAM> range <CAM> for = core <CAM> unicode . get <CAM> unicode <CAM> range <CAM> for ; var map <CAM> special <CAM> unicode <CAM> values:==:core <CAM> unicode . map <CAM> special <CAM> unicode <CAM> values ;
var round = number <CAM> util . round ; var PI:==:Math . PI ;
var max = Math . max ( r , g , b ) ; var min:==:Math . min ( r , g , b ) ;
var selenium <CAM> address = grunt . option ( ' selenium <CAM> address ' ) ; var selenium <CAM> host:==:grunt . option ( ' selenium <CAM> host ' ) ;
var engine <CAM> settings = render <CAM> settings . engine <CAM> settings ; var stylesheets:==:engine <CAM> settings . stylesheets ;
var Identify = require ( ' facade ' ) . Identify ; var Track:==:require ( ' facade ' ) . Track ;
var container = $ ( ' # simplecontainer ' ) ; var v:==:$ ( ' # form ' ) . validate (
var fall <CAM> through <CAM> state = traceur . codegeneration . generator . fall <CAM> through <CAM> state ; var create <CAM> argument <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> argument <CAM> list ;
var commit <CAM> collection = Collections . commit <CAM> collection ; var branch <CAM> collection:==:Collections . branch <CAM> collection ;
var get <CAM> icon <CAM> quads = Quads . get <CAM> icon <CAM> quads ; var EXTENT:==:Bucket . EXTENT ;
var module <CAM> info = this . module <CAM> info <CAM> map _ [ module <CAM> id ] ; var d:==:new goog . async . Deferred ( ) ;
var g = 255 - Math . abs ( 255 - color2 . rgb [ 1 ] - color1 . rgb [ 1 ] ) ; var b:==:255 - Math . abs ( 255 - color2 . rgb [ 2 ] - color1 . rgb [ 2 ] ) ;
var message = error . message ; var status:==:error . status ;
var constant = Parsers . constant ; var map <CAM> result:==:Parsers . map <CAM> result ;
var log = require ( ' npmlog ' ) var osenv:==:require ( ' osenv ' )
var create <CAM> property <CAM> name <CAM> assignment = parse <CAM> tree <CAM> factory . create <CAM> property <CAM> name <CAM> assignment ; var create <CAM> string <CAM> literal:==:parse <CAM> tree <CAM> factory . create <CAM> string <CAM> literal ;
var start = this . multiselection . start ; var end:==:this . multiselection . end  |  |  this . multiselection . start ;
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : middleware : token ' ) ;
var radiusX = p . radiusX ! = null ? p . radiusX : p . radius ; var radiusY:==:p . radiusY !   null ? p . radiusY : p . radius ;
var shaders = gltf . shaders ; var programs:==:gltf . programs ;
var expected = ret . value . expected ; var rendered:==:ret . value . rendered ;
var def = $ q . defer ( ) ; var ref:==:this . $ ref ( ) . ref . push ( ) ;
var set <CAM> attribute = Element . prototype . set <CAM> attribute ; var noop:==:function noop ( ) ;
var monday = selector . query <CAM> selector ( ' . monday ' ) ; var sunday:==:selector . query <CAM> selector ( ' . sunday ' ) ;
var NUMERIC = ci . NUMERIC ; var CR:==:ci . CR ;
var b = Math . min ( this . bottom , region . bottom ) ; var l:==:Math . max ( this . left , region . left ) ;
var callback = $ . data ( this , ' numeric . callback ' ) ; var negative:==:$ . data ( this , ' numeric . negative ' ) ;
var w = this . width - xs ; var h:==:this . height - xs ;
var function <CAM> infos = this . _ function <CAM> infos ; var id <CAM> to <CAM> top <CAM> down <CAM> node:==:this . _ id <CAM> to <CAM> top <CAM> down <CAM> node ;
var data = args . data ; var series:==:args . series ;
var data = this . $ data ; var editor:==:data . editor ;
var settings = imports . settings ; var join:==:require ( ' path ' ) . join ;
var build = imports . build ; var fs:==:imports . fs ;
var plug = require ( ' gulp - load - plugins ' ) ( ) ; var reload:==:browser <CAM> sync . reload ;
var compute <CAM> metadata <CAM> callback = _ ref . compute <CAM> metadata <CAM> callback ; var compute <CAM> metadata <CAM> callback <CAM> props:==:_ ref . compute <CAM> metadata <CAM> callback <CAM> props ;
var cx = pcx + dot * dirx ; var cy:==:pcy + dot * diry ;
var utils = require ( ' utils ' ) ; var jsmin:==:require ( ' jsmin ' ) ;
var high = result . high ; var low:==:result . low ;
var d1 = _ add <CAM> div ( ' d1 ' ) ; var d2:==:_ add <CAM> div ( ' d2 ' , d1 ) ;
var async = require ( ' async ' ) var render:==:require ( ' consolidate ' ) . handlebars . render
var create <CAM> return <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> return <CAM> statement ; var create <CAM> this <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> this <CAM> expression ;
var h = highlight [ 0 ] . get <CAM> bounding <CAM> client <CAM> rect ( ) . height ; var pos:==:highlight . position ( ) ;
var Gradient = react <CAM> canvas . Gradient ; var Surface:==:react <CAM> canvas . Surface ;
var ignore <CAM> punctuation = get <CAM> option ( options , ' ignore <CAM> punctuation ' , ' boolean ' , undefined , false ) ; var case <CAM> first:==:get <CAM> option ( options , ' case <CAM> first ' , ' string ' , [ ' upper ' , ' lower ' , ' false ' ] , undefined ) ;
var _ od = 227 ; values [ _ od ] = _ od ; var _ oe:==:228 ; values [ _ oe ]    _ oe ;
var exec = require ( ' child <UND> process ' ) . exec ; var assert:==:require ( ' assert ' ) ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var connect:==:require ( ' react - redux ' ) ;
var end = new Date ( this . $ end <CAM> date . datepicker ( ' get <CAM> date ' ) ) ; var start:==:new Date ( this . $ start <CAM> date . datepicker ( ' get <CAM> date ' ) ) ;
var new <CAM> audio <CAM> channel = obj . new <CAM> audio <CAM> channel ; var active <CAM> audio <CAM> channels:==:obj . active <CAM> audio <CAM> channels ;
var inp = + ( input  |  |  0 ) ; var prev:==:+ ( previous <CAM> output  |  |  0 ) ;
var test = this . vexpr ( s . test ) ; var end:==:this . new <CAM> block ( ' end ' ) ;
var length = children . length ; var child:==:children . shift ( ) ;
var i <CAM> timeout = this . _ i <CAM> timeout ; var o <CAM> app:==:this . _ o <CAM> app ;
var scroll <CAM> top = this . $ window . scroll <CAM> top ( ) ; var options:==:this . options ;
var group = this . group ; var layout <CAM> info:==:series <CAM> model . layout <CAM> info ;
var clone <CAM> node = scope . clone <CAM> node ; var define <CAM> wrap <CAM> getter:==:scope . define <CAM> wrap <CAM> getter ;
var path = require ( ' path ' ) var merge:==:require ( ' merge - stream ' )
var output = this . output ; var output <CAM> encodings:==:this . output <CAM> encodings ;
var category = ' category ' ; var random <CAM> id:==:' random <CAM> id ' ;
var store = tx . object <CAM> store ( ' store ' ) ; var index:==:store . get <CAM> index ( ' index ' ) ;
var fake <CAM> settings = config . fake <CAM> settings  |  |  ; var fake <CAM> configuration:==:config . fake <CAM> configuration  |  |  ;
var ui = window . app . ns ( ' ui ' ) ; var ux:==:window . app . ns ( ' ux ' ) ;
var Peer = _ app <CAM> js <CAM> models <CAM> peer [ ' default ' ] ; var apps <CAM> service:==:_ app <CAM> js <CAM> services <CAM> apps <CAM> service [ ' default ' ] ;
var minify = require ( ' gulp - minify - css ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var b = this . b ; var angle:==:this . angle ;
var binder = this . binder ; var hierarchy <CAM> navigator:==:this . _ owner . owner . owner . hierarchy <CAM> navigator ;
var solution = self . solution ; var constraints:==:self . analysis . constraints ;
var light <CAM> blue900 = exports . light <CAM> blue900 = ' # 01579b ' ; var light <CAM> bluea100:==:exports . light <CAM> bluea100    ' # 80d8ff ' ;
var file = source . file ; var type:==:source . type ;
var if <CAM> axis <CAM> cross <CAM> zero = axis <CAM> helper . if <CAM> axis <CAM> cross <CAM> zero ; var nice <CAM> scale <CAM> extent:==:axis <CAM> helper . nice <CAM> scale <CAM> extent ;
var create <CAM> member <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> member <CAM> expression ; var create <CAM> variable <CAM> declaration:==:parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> declaration ;
var last <UND> logic = this . last <UND> logic ; var last <UND> field:==:this . last <UND> field ;
var jison = require ( ' gulp - jison ' ) var filelog:==:require ( ' gulp - filelog ' )
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' icons ' , ' readwrite ' ) ;
var done = self . _ done ( resolve , self ) ; var on <CAM> dom <CAM> added:==:self . config [ ' on <CAM> dom <CAM> added ' ]  |  |  angular . noop ;
var Agent = require ( ' smith ' ) . Agent ; var web <CAM> socket <CAM> transport:==:require ( ' smith ' ) . web <CAM> socket <CAM> transport
var minX = this . minX ; var minY:==:this . minY ;
var scroll <CAM> offset = priv . scroll <CAM> offset ; var total <CAM> rows:==:priv . total <CAM> rows ;
var kpi <CAM> arc <CAM> paths = this . kpi <CAM> arc <CAM> paths = [ ] ; var main <CAM> graphics <CAM> context:==:this . main <CAM> graphics <CAM> context ;
var mode = editor . session . $ mode ; var is <CAM> supported:==:exports . is <CAM> supported <CAM> mode ( mode ) ;
var update = aggregator . _ update ; var movement:==:aggregator . _ movement ;
var password = _ . get ( options , ' password ' ) ; var host <CAM> port:==:_ . get ( options , ' host <CAM> port ' ) ;
var is <CAM> array = shared <CAM> util . is <CAM> array ; var is <CAM> int:==:shared <CAM> util . is <CAM> int ;
var editor = this . jsoneditor . get <CAM> editor <CAM> class ( schema <UND> copy , this . jsoneditor ) ; var row:==:this . row <UND> holder . append <CAM> child ( this . theme . get <CAM> table <CAM> row ( ) ) ;
var on <CAM> after <CAM> validate = jasmine . create <CAM> spy ( ' on <CAM> after <CAM> validate ' ) ; var sync <CAM> sources:==:jasmine . create <CAM> spy ( ' sync <CAM> sources ' ) ;
var journal = response . journal ; var nodes:==:response . nodes ;
var create <CAM> block = parse <CAM> tree <CAM> factory . create <CAM> block ; var create <CAM> conditional <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> conditional <CAM> expression ;
var DISTANCE <UND> DISPLAY <UND> CONDITION = Polyline . DISTANCE <UND> DISPLAY <UND> CONDITION ; var NUMBER <UND> OF <UND> PROPERTIES:==:Polyline . NUMBER <UND> OF <UND> PROPERTIES ;
var rec = this . records [ index ] ; var recid:==:rec ? rec . recid : null ;
var data <CAM> label <CAM> utils = powerbi . visuals . data <CAM> label <CAM> utils ; var data <CAM> view <CAM> objects:==:powerbi . data <CAM> view <CAM> objects ;
var posts = locals . posts . sort ( ' -date ' ) . to <CAM> array ( ) ; var length:==:posts . length ;
var AT = ci . AT ; var classify:==:string <CAM> mapper . classify ;
var where = rewriter . rewrite <CAM> where ( this . where <CAM> items , from ) ; var order <CAM> by:==:rewriter . rewrite <CAM> order <CAM> by ( this . order <CAM> by <CAM> items , from ) ;
var package <CAM> name = options . package <CAM> name ; var version:==:options . version ;
var badge <CAM> notification = Windows . UI . Notifications . badge <CAM> notification ; var Badges:==:notifications <CAM> extensions . Badges ;
var div = document . create <CAM> element ( ' div ' ) ; var label <CAM> style:==:label <CAM> styles [ prec <UND> axis     ' y2 ' ? ' y2 ' : axis ] ;
var rename = require ( ' gulp - rename ' ) ; var rimraf:==:require ( ' gulp - rimraf ' ) ;
var y = center . y ; var z:==:center . z ;
var create <CAM> case <CAM> clause = parse <CAM> tree <CAM> factory . create <CAM> case <CAM> clause ; var create <CAM> statement <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> statement <CAM> list ;
var event <CAM> emitter = require ( ' events ' ) . event <CAM> emitter ; var spawn:==:require ( ' child <UND> process ' ) . spawn ;
var assets = response [ ' assets ' ] ; var scripts:==:response [ ' scripts ' ] ;
var param = params [ key ] ; var type:==:param . type ;
var Stream = core <CAM> stream . Stream ; var get <CAM> glyphs <CAM> unicode:==:core <CAM> glyph <CAM> list . get <CAM> glyphs <CAM> unicode ;
var items <CAM> indom = list . els . items <CAM> indom ; var items:==:list . els . items ;
var end = content . cursor <UND> end ; var matches:==:content . matches ;
var children = this . app <CAM> bar <CAM> el . children ; var length:==:children . length ;
var mark = $ ( ' # chatinput mark ' ) ; var input:==:$ ( ' # chatinput input ' ) ;
var encoding = this . _ mesh . encoding ; var skirt <CAM> height:==:this . _ skirt <CAM> height ;
var code = options . code ; var base <CAM> url:==:options . base <CAM> url ;
var time <CAM> window <CAM> left = this . _ time <CAM> window <CAM> left ; var flow <CAM> start <CAM> times:==:timeline <CAM> data . flow <CAM> start <CAM> times ;
var async = require ( ' async ' ) ; var os:==:require ( ' os ' ) ;
var index = _ dereq _ ( ' indexof ' ) ; var parser:==:_ dereq _ ( ' engine . io - parser ' ) ;
var formal <CAM> parameter <CAM> list = traceur . syntax . trees . formal <CAM> parameter <CAM> list ; var function <CAM> declaration:==:traceur . syntax . trees . function <CAM> declaration ;
var util = require ( ' util ' ) ; var vm:==:require ( ' vm ' ) ;
var nav = window . navigator ; var user <CAM> lang:==:args [ ' lang ' ]  |  |  ( nav . languages & & nav . languages [ 0 ] )  |  |  nav . language  |  |  nav . user <CAM> language ;
var transform <CAM> constraints = this . transform <CAM> constraints ; var path <CAM> constraints:==:this . path <CAM> constraints ;
var entities = this . _ entities <CAM> to <CAM> visualize ; var model <CAM> hash:==:this . _ model <CAM> hash ;
var fixed <CAM> height = node . get <CAM> attribute ( ' fixed <CAM> height ' ) ; var parent:==:parent <CAM> layer  |  |  ,
var hour = parse <CAM> int ( $ ( ' . edit . ' + i d + ' . edit - alarm - hour ' ) . val ( ) ) ; var minute:==:parse <CAM> int ( $ ( ' . edit . ' + i d + ' . edit - alarm - minute ' ) . val ( ) ) ;
var dom <CAM> position = dom . dom <CAM> position ; var dom <CAM> range:==:api . dom <CAM> range ;
var fs = require ( ' fs ' ) ; var selectx <CAM> path:==:require ( ' casper ' ) . selectx <CAM> path ;
var x = ( frame ) ? frame . x : 0 ; var y:==:( frame ) ? frame . y : 0 ;
var fill = Bytes . fill ; var blit:==:Bytes . blit <UND> string ;
var pick <CAM> buffer   = this . pick <CAM> buffervar bounds:==:this . bounds
var value = this . arg ( ' value ' ) ; var selected:==:this . arg ( ' selected ' ) ;
var meta <CAM> key = default <CAM> value ( options . meta <CAM> key , false ) ; var wheel <CAM> delta:==:default <CAM> value ( options . wheel <CAM> delta , 0 ) ;
var start <CAM> pos = self . select . start <CAM> pos ; var end <CAM> pos:==:self . select . end <CAM> pos ;
var Pattern = require ( ' hexo - util ' ) . Pattern ; var moment:==:require ( ' moment - timezone ' ) ;
var path = require ( ' path ' ) ; var env:==:process . env ;
var parse <CAM> tree <CAM> transformer = traceur . codegeneration . parse <CAM> tree <CAM> transformer ; var for <CAM> of <CAM> transformer:==:traceur . codegeneration . for <CAM> of <CAM> transformer ;
var fs = require ( ' fs ' ) var path:==:require ( ' path ' ) ;
var c9 = imports . c9 ; var commands:==:imports . commands ;
var render <CAM> day <CAM> events = t . render <CAM> day <CAM> events ; var get <CAM> min <CAM> time:==:t . get <CAM> min <CAM> time ;
var b = observable ( 3 ) ; var c:==:computed ( function ( ) return String ( a . get ( ) * b . get ( ) ) ) ;
var data = scenario . data ; var db:==:client . db ( scenario . database <UND> name ) ;
var dx = document . get <CAM> element <CAM> by <CAM> id ( ' dx ' ) ; var dy:==:document . get <CAM> element <CAM> by <CAM> id ( ' dy ' ) ;
var center <CAM> ripple = _ props3 . center <CAM> ripple ; var children:==:_ props3 . children ;
var remote = new PouchDB ( dbs . remote ) ; var changes:==:remote . changes ;
var step <CAM> plot = g . get <CAM> boolean <CAM> option ( ' step <CAM> plot ' , set <CAM> name ) ; var points:==:e . points ;
var current = format <CAM> tag <CAM> number ( current <CAM> version ) ; var latest:==:format <CAM> tag <CAM> number ( latest <CAM> version ) ;
var t = this ; if ( arguments . length ) var i:==:Array . prototype . slice . call ( arguments ) ; i . for <CAM> each ( function ( i )
var view = views [ name ] ; var pointer:==:view . pointer ;
var height = shape . height ; var width:==:shape . width ;
var last <CAM> stat = entry . last <CAM> stat ; var stat:==:files . stat <CAM> or <CAM> null ( abs <CAM> path ) ;
var replace = require ( ' gulp - replace ' ) ; var mocha:==:require ( ' gulp - spawn - mocha ' ) ;
var dynCall <UND> iiii = Module [ ' dynCall <UND> iiii ' ] = asm [ ' dynCall <UND> iiii ' ] ; var dynCall <UND> vii:==:Module [ ' dynCall <UND> vii ' ]    asm [ ' dynCall <UND> vii ' ] ;
var COVER <UND> FORMALS = ' COVER <UND> FORMALS ' ; var COVER <UND> INITIALIZED <UND> NAME:==:' COVER <UND> INITIALIZED <UND> NAME ' ;
var sequence <CAM> name = level . sequence <CAM> name ; var sequence:==:level <CAM> sequences [ sequence <CAM> name ] ;
var models = _ _ alloy <CAM> id14 . models ; var len:==:models . length ;
var file = opts . file ; var hash:==:opts . hash ;
var can <CAM> use <CAM> membrane = exports . can <CAM> use <CAM> membrane = false ; var deprecate <CAM> object <CAM> properties:==:function deprecate <CAM> object <CAM> properties ( object )
var path   = require ( ' path ' ) ; var connect:==:require ( ' connect ' ) ;
var type = ref . type ; var payload:==:ref . payload ;
var depth = segment <CAM> data . depth ; var geometry:==:segment <CAM> data . geometry ;
var topic = sanitize ( ( o . topic |  |  ' ' ) . to <CAM> string ( ) ) ; var property:==:sanitize ( o . property?o . property : '' ) ;
var icon = this . icon <CAM> el ; var button:==:angular . element ( this . button <CAM> el ) ;
var body = dialog . find ( ' . modal - body ' ) ; var buttons:==:options . buttons ;
var includes = require ( ' includes ' ) ; var is:==:require ( ' is ' ) ;
var connect = require ( ' connect ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var right <CAM> curly <CAM> count = this . right <CAM> curly <CAM> count ; var seen <CAM> unicode <CAM> char:==:this . seen <CAM> unicode <CAM> char ;
var src = listener . src ; var type:==:listener . type ;
var parse <CAM> tree = traceur . syntax . trees . parse <CAM> tree ; var switch <CAM> statement:==:traceur . syntax . trees . switch <CAM> statement ;
var model <CAM> matrix = billboard <CAM> collection . model <CAM> matrix ; var position:==:this . _ position ;
var keys = Object . keys ( members ) ; var is <CAM> array:==:Array . is <CAM> array ( target ) ;
var src = state . src ; var method:==:state . method ;
var container = document . get <CAM> element <CAM> by <CAM> id ( ' container ' ) ; var contained1:==:document . get <CAM> element <CAM> by <CAM> id ( ' contained1 ' ) ;
var winston = require ( ' winston ' ) ; var path:==:require ( ' path ' ) ;
var sprite = game . add . sprite ( -400 , 0 , ' einstein ' ) ; var tween:==:game . add . tween ( sprite ) ;
var values = config . values  |  |  [ ] ; var len:==:values . length ;
var row = ace . selection . lead . row ; var i:==:find <CAM> chunk <CAM> index ( this . chunks , row , orig ) ;
var extended <CAM> data = kml <CAM> data . extended <CAM> data ; var description:==:query <CAM> string <CAM> value ( node , ' description ' , namespaces . kml ) ;
var react <CAM> native <CAM> view <CAM> attributes = require ( ' react <CAM> native <CAM> view <CAM> attributes ' ) ; var Platform:==:require ( ' Platform ' ) ;
var HEAD = 1 ; var FLAGS:==:2 ;
var touch <CAM> ripple <CAM> opacity = _ props3 . touch <CAM> ripple <CAM> opacity ; var on <CAM> blur:==:_ props3 . on <CAM> blur ;
var s = goog . vec . vec3d . create <CAM> from <CAM> values ( 6 , 7 , 8 ) ; var o:==:goog . vec . vec3d . create <CAM> from <CAM> values ( 9 , 10 , -11 ) ;
var score = scores [ k ] . score ; var li:==:create <CAM> element ( ' li ' , initials + ' : ' + score ) ;
var lexed = opts . lexed ; var filename:==:opts . filename ;
var target = event . target ; var node <CAM> name:==:target . node <CAM> name ;
var paper = this . _ paper ; var font:==:this . _ font ;
var x = days <CAM> since <CAM> epoch - first <CAM> index * this . _ step <CAM> size <CAM> days ; var work:==:this . _ work ;
var Animated = require ( ' Animated ' ) ; var Dimensions:==:require ( ' Dimensions ' ) ;
var first = visible <CAM> thumbs . first . i d ; var last:==:( num <CAM> visible <CAM> thumbs > 1 ? visible <CAM> thumbs . last . i d : first ) ;
var add   = create <CAM> adder ( 1 , ' add ' ) ; var subtract:==:create <CAM> adder ( -1 , ' subtract ' ) ;
var assertion = this . assertions [ i ] ; var li:==:document . create <CAM> element ( ' li ' ) ;
var cookie = require ( ' cookie ' ) ; var debug:==:require ( ' debug ' ) ( ' analytics . js : cookie ' ) ;
var root = new KM . minder <CAM> node ( ' root ' ) ; var first:==:new KM . minder <CAM> node ( ' first ' ) ;
var tab <CAM> index = _ props4 . tab <CAM> index ; var width:==:_ props4 . width ;
var context <CAM> options = options . context <CAM> options ; var credit <CAM> container:==:options . credit <CAM> container ;
var _ bf = 21 ; values [ _ bf ] = _ bf ; var _ bg:==:22 ; values [ _ bg ]    _ bg ;
var node = _ this3 . body . nodes [ branch <CAM> node ] ; var level:==:_ this3 . hierarchical . levels [ node . i d ] ;
var switch <CAM> statement = traceur . syntax . trees . switch <CAM> statement ; var State:==:traceur . codegeneration . generator . State ;
var all = Promise . all . bind ( Promise ) ; var argsarray:==:require ( ' argsarray ' ) ;
var style = _ props3 . style ; var tab <CAM> index:==:_ props3 . tab <CAM> index ;
var for <CAM> each = [ ] . for <CAM> each ; var slice:==:[ ] . slice ;
var msecs = ( options . msecs ! = null ) ? options . msecs : new Date ( ) . get <CAM> time ( ) ; var nsecs:==:( options . nsecs !   null ) ? options . nsecs : _ lastn <CAM> secs + 1 ;
var backdrop = new Animation ( ele . query <CAM> selector ( ' . backdrop ' ) ) ; var wrapper:==:new Animation ( ele . query <CAM> selector ( ' . action - sheet - wrapper ' ) ) ;
var Platform = require ( ' Platform ' ) ; var crc32:==:require ( ' crc32 ' ) ;
var tmp = require ( ' tmp ' ) var fs:==:require ( ' fs ' )
var kr = this . kr ; var n:==:yl . length ;
var target = e . target ; var tag <CAM> name:==:target . tag <CAM> name . to <CAM> lower <CAM> case ( ) ;
var vim = cm . state . vim ; var macro <CAM> mode <CAM> state:==:vim <CAM> global <CAM> state . macro <CAM> mode <CAM> state ;
var create <CAM> for <CAM> of <CAM> statement = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> for <CAM> of <CAM> statement ; var create <CAM> variable <CAM> declaration <CAM> list:==:traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> declaration <CAM> list ;
var PROPERTY <UND> NAME <UND> SHORTHAND = ' PROPERTY <UND> NAME <UND> SHORTHAND ' ; var PROPERTY <UND> SIGNATURE:==:' PROPERTY <UND> SIGNATURE ' ;
var host = document . location . host ; var protocol:==:document . location . protocol ;
var dirty <CAM> list = this . dirty <CAM> list ; var region:==:region <CAM> create ( ) ;
var link = $ link . val ( ) ; var text:==:$ text . val ( ) ;
var url = require ( ' url ' ) ; var dive:==:require ( ' dive <CAM> sync ' ) ;
var web <CAM> socket <CAM> error = Windows . Networking . Sockets . web <CAM> socket <CAM> error ; var web <CAM> error <CAM> status:==:Windows . Web . web <CAM> error <CAM> status ;
var object <CAM> enumeration <CAM> builder = powerbi . visuals . object <CAM> enumeration <CAM> builder ; var axis <CAM> scale:==:powerbi . visuals . axis <CAM> scale ;
var accu = _ accu ; var m:==:_ m ;
var tiles <CAM> to <CAM> render = this . _ surface . _ tiles <CAM> to <CAM> render ; var length:==:tiles <CAM> to <CAM> render . length ;
var Gaze = require ( ' gaze ' ) . Gaze ; var closure:==:require ( ' closure - util ' ) ;
var location = this . _ location ; var orient:==:this . _ orient ;
var fs = require ( ' fs ' ) ; var ncp:==:require ( ' ncp ' ) . ncp ;
var crypto = require ( ' crypto ' ) ; var logger:==:require ( ' pomelo - logger ' ) . get <CAM> logger ( ' pomelo ' , _ _ filename ) ;
var format = imports . format ; var settings:==:imports . settings ;
var tab = req . query . tab  |  |  ' all ' ; var proxy:==:new eventproxy ( ) ;
var combo = $ scope . combo ; var drop <CAM> down:==:$ scope . drop <CAM> down ;
var source = new ol . source . OSM ( ) ; var layer:==:new ol . layer . Tile ( ) ;
var nodemon = require ( ' gulp - nodemon ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var cascade = this . shared . cascade ; var interval:==:this . shared . interval ;
var   TYPEDO = 13 ; var   STORED:==:14 ;
var data = this . data ; var nodes:==:this . _ nodes ;
var react <CAM> native = require ( ' react <CAM> native ' ) ; var Subscribable:==:require ( ' Subscribable ' ) ;
var parseuri = require ( ' parseuri ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io - client : url ' ) ;
var draw <CAM> calls = scene . draw <CAM> calls ; var shadow <CAM> casters:==:scene . shadow <CAM> casters ;
var more <CAM> expected = result . more <CAM> expected ; var message <CAM> namer:==:result . message <CAM> namer ;
var saveA = b2 <CAM> distance . s <UND> saveA ; var saveB:==:b2 <CAM> distance . s <UND> saveB ;
var sf <CAM> field     = sf <CAM> builder <CAM> provider . builders . sf <CAM> field ; var ng <CAM> model:==:sf <CAM> builder <CAM> provider . builders . ng <CAM> model ;
var object <CAM> id = mongoose . Schema . Types . object <CAM> id ; var Schema:==:mongoose . Schema ;
var frames = this . frames ; var bone:==:skeleton . bones [ this . bone <CAM> index ] ;
var container = config . container ; var shadow <CAM> canvas:==:this . shadow <CAM> canvas    document . create <CAM> element ( ' canvas ' ) ;
var util = require ( ' util ' ) ; var doctrine:==:require ( ' doctrine ' ) ;
var timings = data . timings ; var stagger:==:data . stagger ;
var property <CAM> name <CAM> assignment = traceur . syntax . trees . property <CAM> name <CAM> assignment ; var property <CAM> name <CAM> shorthand:==:traceur . syntax . trees . property <CAM> name <CAM> shorthand ;
var b = reject <CAM> soon ( ' rejected - b ' , 30 ) ; var c:==:' c ' ;
var log = Math . log ; var max:==:Math . max ;
var x = current <CAM> pos . x ; var y:==:current <CAM> pos . y ;
var type = ref . type ; var enter <CAM> class:==:ref . enter <CAM> class ;
var slice = Array . prototype . slice . call . bind ( Array . prototype . slice ) ; var map:==:Array . prototype . map . call . bind ( Array . prototype . map ) ;
var slow <CAM> animations = exports . Layout . _ debug <CAM> animations  |  |  exports . Layout . _ slow <CAM> animations ; var site:==:this . _ site ;
var os = require ( ' os ' ) ; var util:==:require ( ' util ' ) ;
var xmax = options . xmax ; var zmax:==:options . zmax ;
var buffer = require ( ' vinyl - buffer ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var apf = imports . apf ; var workspace:==:imports [ ' collab . workspace ' ] ;
var r = s . right ; var t:==:s . top ;
var touch = require ( ' touch ' ) ; var watchify:==:require ( ' watchify ' ) ;
var get <CAM> interval = axis <CAM> builder . get <CAM> interval = function ( model , label <CAM> interval ) var interval:==:model . get ( ' interval ' ) ;
var indices = geometry . indices ; var attributes:==:geometry . attributes ;
var screen <CAM> top = _ window . screen <CAM> top  |  |  _ window . screenY  |  |  0 ; var scroll <CAM> left:==:_ document . body . scroll <CAM> left + _ document . document <CAM> element . scroll <CAM> left ;
var tooltip <CAM> model = this . _ tooltip <CAM> model ; var trigger <CAM> on:==:tooltip <CAM> model . get ( ' trigger <CAM> on ' ) ;
var n = ' rc'+ <CAM> math . random ( ) var assert:==:require ( ' assert ' )
var MODULE = ' MODULE ' ; var MODULE <UND> SPECIFIER:==:' MODULE <UND> SPECIFIER ' ;
var winston = require ( ' winston ' ) ; var express:==:require ( ' express ' ) ;
var old <CAM> item = event . detail . old <CAM> item ; var new <CAM> item:==:event . detail . new <CAM> item ;
var type = cfg . type  |  |  Physics . SHAPE <UND> RECT ; var group:==:cfg . group      undefined?0 : cfg . group ;
var in <CAM> array = Tools . in <CAM> array , trim = Tools . trim , resolve = Tools . resolve ; var Event:==:event <CAM> utils . Event ;
var value <CAM> formatter = powerbi . visuals . value <CAM> formatter ; var tooltip <CAM> manager:==:powerbi . visuals . tooltip <CAM> manager ;
var border <CAM> right <CAM> width = parse <CAM> float ( computed <CAM> style . border <CAM> right <CAM> width . replace ( ' px ' , '' ) ) ; var border <CAM> left <CAM> width:==:parse <CAM> float ( computed <CAM> style . border <CAM> left <CAM> width . replace ( ' px ' , '' ) ) ;
var register <CAM> wrapper = scope . register <CAM> wrapper ; var unsafe <CAM> unwrap:==:scope . unsafe <CAM> unwrap ;
var st = require ( ' st ' ) var del:==:require ( ' del ' )
var it = lab . it ; var expect:==:Code . expect ;
var b = document . body ; var d:==:document . document <CAM> element ;
var config = _ _ dependency1 _ _ . config ; var configure:==:_ _ dependency1 _ _ . configure ;
var traits = identify . traits ( ) ; var email:==:identify . email ( ) ;
var display <CAM> name <CAM> keys = powerbi . visuals . slicer <CAM> util . display <CAM> name <CAM> keys ; var select <CAM> menu:==:powerbi . visual . controls . select <CAM> menu ;
var offsets   = this . offsetsvar targets:==:this . targets
var col = db . collection ( ' remove <UND> many <UND> with <UND> generators ' ) ; var r:==:yield col . insert <CAM> many ( [ a : 1 , a : 1 ] ) ;
var interval = result . rows [ 0 ] . interval ; var query:==:client . query (
var react <CAM> native <CAM> component <CAM> tree = require ( ' react <CAM> native <CAM> component <CAM> tree ' ) ; var react <CAM> native <CAM> tag <CAM> handles:==:require ( ' react <CAM> native <CAM> tag <CAM> handles ' ) ;
var _ cb = 33 ; values [ _ cb ] = _ cb ; var _ cc:==:34 ; values [ _ cc ]    _ cc ;
var dnode = require ( ' dnode ' ) ; var net:==:require ( ' net ' ) ;
var sel = $ ( this ) . selected <CAM> values ( ) ; var a:==:typeof ( ascending )     ' undefined ' ? true : ! ! ascending ;
var module = q <CAM> unit . module ; var test:==:q <CAM> unit . test ;
var method = event . data . method ; var args:==:event . data . args ;
var keys = Object . keys  |  |  function ( ) var has <CAM> own <CAM> property:==:Object . prototype . has <CAM> own <CAM> property ,
var inner = ' inner ' ; var baz:==:' baz inner ' ;
var is <CAM> number = function is <CAM> number ( val ) var type:==:typeof val ;
var debugID = _ life <CAM> cycle <CAM> timer <CAM> stack$ . debugID ; var timer <CAM> type:==:_ life <CAM> cycle <CAM> timer <CAM> stack$ . timer <CAM> type ;
var quasi <CAM> literal <CAM> portion = traceur . syntax . trees . quasi <CAM> literal <CAM> portion ; var quasi <CAM> substitution:==:traceur . syntax . trees . quasi <CAM> substitution ;
var get <CAM> row <CAM> header = window . get <CAM> row <CAM> header ; var get <CAM> row <CAM> action:==:window . get <CAM> row <CAM> action ;
var age = child . get <CAM> child <CAM> node ( ' age ' ) ; var alive:==:child . get <CAM> child <CAM> node ( ' alive ' ) ;
var accessors = gltf . accessors ; var meshes:==:gltf . meshes ;
var f = document . get <CAM> element <CAM> by <CAM> id ( ' state - frame ' ) ; var d:==:f . content <CAM> document  |  |  f . content <CAM> window . document ;
var minY = r1 . _ minY < r2 . _ minY ? r1 . _ minY : r2 . _ minY ; var maxX:==:r1 . _ maxX > r2 . _ maxX ? r1 . _ maxX : r2 . _ maxX ;
var prop <CAM> types = _ require . prop <CAM> types ; var Children:==:_ require . Children ;
var fs = require ( ' fs ' ) ; var https:==:require ( ' https ' ) ;
var ui = imports . ui ; var debug:==:imports [ ' plugin . debug ' ] ;
var winston = require ( ' winston ' ) ; var url:==:require ( ' url ' ) ;
var p = el . parent ; var index:==:p . children . index <CAM> of ( el ) ;
var o = options  |  |  ; var prefix:==:typeof o . prefix     ' undefined ' & & ' assert '  |  |  o . prefix ;
var sprite = this . export <CAM> common ( img , o , ' sprite ' , -r . x - frame . regX , -r . y - frame . regY ) ; var i d:==:this . getUID ( sprite . id+' <UND> mask ' ) ;
var language = imports . language ; var c9:==:imports . c9 ;
var cache <CAM> functions <CAM> crc32 = options [ ' cache <CAM> functions <CAM> crc32 ' ] = = null ? false : options [ ' cache <CAM> functions <CAM> crc32 ' ] ; var promote <CAM> longs:==:options [ ' promote <CAM> longs ' ]     null ? true : options [ ' promote <CAM> longs ' ] ;
var symbol <CAM> repeat = item <CAM> model . get ( ' symbol <CAM> repeat ' ) ; var symbol <CAM> clip:==:item <CAM> model . get ( ' symbol <CAM> clip ' ) ;
var group = $ ( ' . controlgroup - single - select ' ) . controlgroup ( ) ; var select:==:group . find ( ' . ui - selectmenu - button ' ) ;
var filter = arguments . filter ; var update:==:arguments . update ;
var row <CAM> overscan <CAM> stop <CAM> index = _ ref6 . row <CAM> overscan <CAM> stop <CAM> index ; var row <CAM> start <CAM> index:==:_ ref6 . row <CAM> start <CAM> index ;
var bob = doc . get <CAM> element ( ' bob ' ) ; var disappear:==:doc . get <CAM> element ( ' disappear ' ) ;
var data = JSON . parse ( $ ( this ) . attr ( ' data ' ) ) ; var day:==:$ ( this ) . attr ( ' day ' ) ;
var expand <CAM> member <CAM> expression = traceur . codegeneration . expand <CAM> member <CAM> expression ; var create <CAM> argument <CAM> list:==:parse <CAM> tree <CAM> factory . create <CAM> argument <CAM> list ;
var file = r . file ; var err:==:r . error ;
var react <CAM> native <CAM> stack <CAM> injection = require ( ' react <CAM> native <CAM> stack <CAM> injection ' ) ; var react <CAM> updates:==:require ( ' react <CAM> updates ' ) ;
var workspace = imports [ ' collab . workspace ' ] ; var question:==:imports [ ' dialog . question ' ] ;
var get <CAM> hover <CAM> listener = t . get <CAM> hover <CAM> listener ; var range <CAM> to <CAM> segments:==:t . range <CAM> to <CAM> segments ;
var rotate <CAM> mix = this . rotate <CAM> mix , translate <CAM> mix = this . translate <CAM> mix ; var translate:==:translate <CAM> mix > 0 , rotate    rotate <CAM> mix > 0 ;
var online = require ( ' online ' ) ; var redis:==:require ( ' redis ' ) ;
var width = self . width  |  |  FALLBACK <UND> WIDTH ; var scrollbar <CAM> width:==:self . scrollbar <CAM> width ;
var _ pe = 244 ; values [ _ pe ] = _ pe ; var _ pf:==:245 ; values [ _ pf ]    _ pf ;
var defaults = code <CAM> mirror . defaults = ; var option <CAM> handlers:==:code <CAM> mirror . option <CAM> handlers    ;
var strength = this . options . strength ; var field:==:this . options . field ;
var callback1 = jasmine . create <CAM> spy ( ' callback1 ' ) ; var callback2:==:jasmine . create <CAM> spy ( ' callback2 ' ) ;
var Easing = require ( ' Easing ' ) ; var native <CAM> methods <CAM> mixin:==:require ( ' native <CAM> methods <CAM> mixin ' ) ;
var command = commands [ j ] ; var derived <CAM> command:==:( shadows <CAM> enabled & & command . receive <CAM> shadows ) ? command . derived <CAM> commands . oit . shadows . translucent <CAM> command : command . derived <CAM> commands . oit . translucent <CAM> command ;
var time <UND> start = this . options . time <UND> start . split ( ' : ' ) ; var time <UND> end:==:this . options . time <UND> end . split ( ' : ' ) ;
var each = require ( ' each ' ) ; var is:==:require ( ' is ' ) ;
var cli     = require ( ' cli ' ) ; var path:==:require ( ' path ' ) ;
var lookup = FS . lookup <CAM> path ( path , follow : true ) ; var node:==:lookup . node ;
var _ jf = 149 ; values [ _ jf ] = _ jf ; var _ jg:==:150 ; values [ _ jg ]    _ jg ;
var x = ' x ' ; var derived <CAM> data <CAM> property:==:' derived <CAM> data <CAM> property ' ;
var _ kh = 167 ; values [ _ kh ] = _ kh ; var _ ki:==:168 ; values [ _ ki ]    _ ki ;
var all = _ _ dependency3 _ _ . all ; var race:==:_ _ dependency4 _ _ . race ;
var long = ppo . long . result ; var macd:==:ppo . macd ;
var entry <CAM> start <CAM> time = timeline <CAM> data . entry <CAM> start <CAM> times [ entry <CAM> index ] ; var entry <CAM> total <CAM> time:==:timeline <CAM> data . entry <CAM> total <CAM> times [ entry <CAM> index ] ;
var Dummy7 = mongoose . model ( ' Dummy7 ' , dummy7 <CAM> schema ) ; var Dummy8:==:mongoose . model ( ' Dummy8 ' , dummy8 <CAM> schema ) ;
var selection <CAM> id = powerbi . visuals . selection <CAM> id ; var data <CAM> view <CAM> object:==:powerbi . data <CAM> view <CAM> object ;
var Umask = config <CAM> defs . Umaskvar mkdirp:==:require ( ' mkdirp ' )
var known <CAM> user <CAM> properties = System . known <CAM> user <CAM> properties ; var user <CAM> picture <CAM> size:==:System . user <CAM> picture <CAM> size ;
var is <CAM> number = leaflet <CAM> helpers . is <CAM> number ; var is <CAM> function:==:leaflet <CAM> helpers . is <CAM> function ;
var error = shared <CAM> util . error ; var deprecated:==:shared <CAM> util . deprecated ;
var n = this [ ' n ' ] ; var d:==:this [ ' d ' ] ;
var x = _ ref . x ; var y:==:_ ref . y ;
var q = readmp <CAM> int ( der , ' q ' ) ; var g:==:readmp <CAM> int ( der , ' g ' ) ;
var dynCall <UND> iiii = Module [ ' dynCall <UND> iiii ' ] = asm [ ' dynCall <UND> iiii ' ] ; var dynCall <UND> iiiddiiiiiiiiiii:==:Module [ ' dynCall <UND> iiiddiiiiiiiiiii ' ]    asm [ ' dynCall <UND> iiiddiiiiiiiiiii ' ] ;
var n = + + Node . indent <CAM> level ; var s:==:' \n ' + INDENTATION . repeat ( n ) + ' type : ' + token <CAM> string ( this . type ) ;
var export <CAM> star <CAM> binding = $ _ _ 6 . export <CAM> star <CAM> bindings [ index ] ; var module <CAM> binding:==:$ _ _ 6 . module <CAM> bindings [ index ] ;
var script <CAM> visual <CAM> authoring <CAM> enabled = feature <CAM> switches ? feature <CAM> switches . script <CAM> visual <CAM> authoring <CAM> enabled : false ; var is <CAM> label <CAM> interactivity <CAM> enabled:==:feature <CAM> switches ? feature <CAM> switches . is <CAM> label <CAM> interactivity <CAM> enabled : false ;
var column = this . s . columns [ cell . col <CAM> idx ] ; var read:==:column . read . call ( column , cell . node ) ;
var amberA200 = exports . amberA200 = ' # ffd740 ' ; var amberA400:==:exports . amberA400    ' # ffc400 ' ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ; var g:==:new Dygraph ( graph , ZERO <UND> TO <UND> FIFTY ) ;
var on <CAM> row <CAM> mouse <CAM> out = _ ref . on <CAM> row <CAM> mouse <CAM> out ; var row <CAM> data:==:_ ref . row <CAM> data ;
var accumulate <CAM> into = require ( ' accumulate <CAM> into ' ) ; var for <CAM> each <CAM> accumulated:==:require ( ' for <CAM> each <CAM> accumulated ' ) ;
var key <CAM> prefix = book <CAM> keeping . key <CAM> prefix ; var func:==:book <CAM> keeping . func ;
var top = this . rect <CAM> px <CAM> bounds . top ; var left:==:this . rect <CAM> px <CAM> bounds . left ;
var keep <CAM> collapsed <CAM> content = _ props3 . keep <CAM> collapsed <CAM> content ; var props:==:_ object <CAM> without <CAM> properties ( _ props3 , [ ' spring <CAM> config ' , ' on <CAM> height <CAM> ready ' , ' on <CAM> rest ' , ' is <CAM> opened ' , ' style ' , ' children ' , ' fixed <CAM> height ' , ' keep <CAM> collapsed <CAM> content ' ] ) ;
var uglify = require ( ' gulp - uglify ' ) ; var buffer:==:require ( ' vinyl - buffer ' ) ;
var collab = imports . collab ; var members <CAM> panel:==:imports . members <CAM> panel ;
var g = pub . data . gvar y:==:pub . data . pub <UND> key
var is <CAM> up <CAM> arrow = utilities . is <CAM> up <CAM> arrow ; var is <CAM> down <CAM> arrow:==:utilities . is <CAM> down <CAM> arrow ;
var react <CAM> fiber <CAM> reconciler = require ( ' react <CAM> fiber <CAM> reconciler ' ) ; var react <CAM> generic <CAM> batching:==:require ( ' react <CAM> generic <CAM> batching ' ) ;
var regex <UND> allowed = S . regex <UND> allowed ; var i:==:find <UND> eol ( ) , ret ;
var Person = db . model ( ' gh2562 <UND> a0 ' , person <CAM> schema ) ; var Band:==:db . model ( ' gh2562 <UND> a1 ' , band <CAM> schema ) ;
var card <CAM> id = target . dataset . card <CAM> id ; var card:==:this . card <CAM> manager . find <CAM> card <CAM> from <CAM> card <CAM> list ( card <CAM> id : card <CAM> id ) ;
var alltext = rep . alltext ; var len:==:alltext . length ;
var tile <CAM> provider = surface . tile <CAM> provider ; var terrain <CAM> provider:==:this . terrain <CAM> provider ;
var util = require ( ' gulp - util ' ) ; var clean:==:require ( ' gulp - clean ' ) ;
var uglify = require ( ' uglify - js ' ) ; var nconf:==:require ( ' nconf ' ) ;
var contact <CAM> manager = Contacts . contact <CAM> manager ; var contact <CAM> card <CAM> options:==:Contacts . contact <CAM> card <CAM> options ;
var m = Math . min ( h , w ) ; var size:==:Math . max ( 0 , Math . min ( m , m * parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' size ' , this . size ) ) ) ) ;
var msg <UND> id = msg . parent <UND> header . msg <UND> id ; var callbacks:==:this . get <UND> output <UND> callbacks <UND> for <UND> msg ( msg <UND> id ) ;
var data = image <CAM> data . data ; var map:==:this . _ map <CAM> data ;
var first <CAM> edge <CAM> indexes = this . _ first <CAM> edge <CAM> indexes ; var node <CAM> count:==:this . node <CAM> count ;
var dynCall <UND> iid = Module [ ' dynCall <UND> iid ' ] = asm [ ' dynCall <UND> iid ' ] ; var dynCall <UND> viiiiiii:==:Module [ ' dynCall <UND> viiiiiii ' ]    asm [ ' dynCall <UND> viiiiiii ' ] ;
var Buffer = require ( ' safe - buffer ' ) . Buffervar debug:==:require ( ' debug ' ) ( ' webtorrent : webconn ' )
var layers = this . _ layers ; var progressive <CAM> layers:==:this . _ progressive <CAM> layers ;
var a = ' dc99c646fa4cb7c24314bb6f4ca2d391297acd0dacb0430a13bbf1e37dcf8071 ' ; var b:==:' cf878e00c9f2b6aa48a10f66df9706e64fef2ca399f396d65f5b0a27cb8ae237 ' ;
var rect = params . options . rect ; var w:==:rect . width ;
var ms2 <CAM> date <CAM> time = Lib . ms2 <CAM> date <CAM> time ; var date <CAM> time2ms:==:Lib . date <CAM> time2ms ;
var f = fs [ 0 ] ; var g:==:f . get <CAM> geometry ( ) ;
var ifr = document . get <CAM> element <CAM> by <CAM> id ( ' iframe ' ) ; var body:==:ifr . content <CAM> window . document . body ;
var video = this . dialog . video ; var canvas:==:this . canvas ;
var projection = camera . _ projection ; var ellipsoid:==:projection . ellipsoid ;
var create <CAM> object <CAM> literal <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> object <CAM> literal <CAM> expression ; var create <CAM> property <CAM> name <CAM> assignment:==:parse <CAM> tree <CAM> factory . create <CAM> property <CAM> name <CAM> assignment ;
var is <CAM> function = Logic . _ is <CAM> function ; var is <CAM> string:==:Logic . _ is <CAM> string ;
var x = pointX - ul . x ; var y:==:pointY - ul . y ;
var _ fh = 87 ; values [ _ fh ] = _ fh ; var _ fi:==:88 ; values [ _ fi ]    _ fi ;
var module <CAM> definition = traceur . syntax . trees . module <CAM> definition ; var module <CAM> expression:==:traceur . syntax . trees . module <CAM> expression ;
var states = graph . view . states . get <CAM> values ( ) ; var token:==:tokens [ 1 ] . to <CAM> lower <CAM> case ( ) ;
var spy = this . sinon . spy ( mode <CAM> manager , ' start ' ) ; var input:==:document . get <CAM> element <CAM> by <CAM> id ( ' views - tiles - search - input ' ) ;
var cd = point <CAM> data . cd ; var trace:==:cd [ 0 ] . trace ;
var legend <CAM> position = powerbi . visuals . legend <CAM> position ; var color <CAM> helper:==:powerbi . visuals . color <CAM> helper ;
var dynCall <UND> iii = Module [ ' dynCall <UND> iii ' ] = asm [ ' dynCall <UND> iii ' ] ; var dynCall <UND> diii:==:Module [ ' dynCall <UND> diii ' ]    asm [ ' dynCall <UND> diii ' ] ;
var private <CAM> name <CAM> syntax <CAM> transformer = traceur . codegeneration . private <CAM> name <CAM> syntax <CAM> transformer ; var program <CAM> tree:==:traceur . syntax . trees . program <CAM> tree ;
var attrs = vnode . attrsvar is:==:attrs & & attrs . is
var ctx = current <CAM> layer . ctx ; var m:==:el . transform ;
var a = new constant <CAM> node ( 2 ) ; var n:==:new operator <CAM> node ( ' - ' , ' unary <CAM> minus ' , [ a ] ) ;
var body = angular . element ( $ document [ 0 ] . body ) ; var head:==:angular . element ( $ document [ 0 ] . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' head ' ) [ 0 ] ) ;
var scroll <CAM> to <CAM> row = props . scroll <CAM> to <CAM> row ; var scroll <CAM> top:==:state . scroll <CAM> top ;
var column <CAM> width = config . column <CAM> width ; var data:==:this . data ;
var status = group . status  |  |  '' ; var contact:==:group . contact ;
var ENTITY <UND> NODE      = node <CAM> type . ENTITY <UND> NODE      = 6 ; var PROCESSING <UND> INSTRUCTION <UND> NODE:==:node <CAM> type . PROCESSING <UND> INSTRUCTION <UND> NODE    7 ;
var provider = this . provider ; var sel:==:provider . selected <CAM> items ;
var auto <CAM> increment = this . auto <CAM> increment ; var include <CAM> spinner:==:this . include <CAM> spinner ;
var format = require ( ' util ' ) . format ; var hbs:==:require ( ' hbs ' ) ;
var a = mobx . observable ( 3 ) ; var b:==:mobx . observable ( a : 3 ) ;
var base <CAM> texture = texture . base <CAM> texture ; var frame:==:texture . frame ;
var coll = new Mongo . Collection ( coll <CAM> name , connection : conn ) ; var o:==:observe <CAM> cursor ( test , coll . find ( ) ) ;
var order <CAM> by = options . order <CAM> by ; var order:==:order <CAM> criteria [ order <CAM> by ] ;
var slice = array . slice ; var map:==:array . map ;
var command1 = command <CAM> manager . register ( ' Toggle Checkmark ' , ' extension <CAM> test . command1 ' , test <CAM> command1 ) ; var command2:==:command <CAM> manager . register ( ' Enabled when previous is Checked ' , ' extension <CAM> test . command2 ' , test <CAM> command2 ) ;
var first <CAM> inner <CAM> quadrangle = options . first <CAM> inner <CAM> quadrangle ; var last <CAM> inner <CAM> quadrangle:==:options . last <CAM> inner <CAM> quadrangle ;
var path = re . path ; var query:==:location . query ;
var program <CAM> tree = traceur . syntax . trees . program <CAM> tree ; var property <CAM> name <CAM> shorthand <CAM> transformer:==:traceur . codegeneration . property <CAM> name <CAM> shorthand <CAM> transformer ;
var s = editor . settings ; var depth:==:parse <CAM> int ( s . toc <UND> depth , 10 )  |  |  0 ;
var Component = _ require . Component ; var create <CAM> element:==:_ require . create <CAM> element ;
var resolve = _ _ dependency9 _ _ . resolve ; var reject:==:_ _ dependency10 _ _ . reject ;
var iter = ical <CAM> event . iterator ( ) ; var next:==:iter . next ( ) ;
var orientation = this . options . orientation . item ; var point:==:this . dom . point ;
var parent = that . _ parent <CAM> widget ( ) ; var focusout:==:isIE ? ' blur ' : ' focusout ' ;
var Menu = imports . Menu ; var Datagrid:==:imports . Datagrid ;
var timers = metrics . timers ; var sets:==:metrics . sets ;
var fs   = require ( ' fs ' ) var http:==:require ( ' http ' )
var name = prop . name ; var name$ _:==:prop . name$ _ ;
var render = require ( ' render - media ' ) var stream:==:require ( ' readable - stream ' )
var commander = require ( ' commander ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var d = b . segment <UND> hdr _ . num <UND> segments _ ; var e:==:Arr ( be , int ) ;
var cell <CAM> count = _ ref . cell <CAM> count ; var cell <CAM> size:==:_ ref . cell <CAM> size ;
var create <CAM> throw <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> throw <CAM> statement ; var create <CAM> variable <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> statement ;
var tile <CAM> height = default <CAM> value ( options . tile <CAM> height , 256 ) ; var minimum <CAM> level:==:default <CAM> value ( options . minimum <CAM> level , 0 ) ;
var src = value . src ; var dest:==:value . dest ;
var task2 = ' task2 ' ; var task3:==:' task3 ' ;
var uint16 = Fn . uint16 ; var to <CAM> fixed:==:Fn . to <CAM> fixed ;
var e = new constant <CAM> node ( 5 ) ; var f:==:d . transform ( function ( node )
var constants = require ( ' constants ' ) ; var join:==:require ( ' path ' ) . join ;
var t = doc . types . shift ( ) ; var n:==:doc . nums . shift ( ) ;
var utils = require ( ' utils ' ) ; var fs:==:require ( ' fs ' ) ;
var address = opts . address  |  |  0x23 ; var mode:==:opts . mode  |  |  0x10 ;
var replacer = app . get ( ' json replacer ' ) ; var spaces:==:app . get ( ' json spaces ' ) ;
var args = event . data . args ; var max <CAM> call <CAM> interval:==:event . data . max <CAM> call <CAM> interval !   null ? event . data . max <CAM> call <CAM> interval : 2000 ;
var data <CAM> grid = options . data <CAM> grid ? options . data <CAM> grid : $ ( ' # data <CAM> grid ' ) ; var data <CAM> grid <CAM> page:==:options . data <CAM> grid <CAM> page ? options . data <CAM> grid <CAM> page : $ ( ' # data <CAM> grid <CAM> page ' ) ;
var container <CAM> attrs = options . _ container <CAM> attrs ; var replacer <CAM> attrs:==:options . _ replacer <CAM> attrs ;
var cols = g . cols . groups ; var rows:==:g . rows . groups ;
var node <CAM> native <CAM> type = this . _ node <CAM> native <CAM> type ; var node <CAM> field <CAM> count:==:this . _ node <CAM> field <CAM> count ;
var fn = klass . fn ; var _ _ init _ _:==:klass . _ _ init _ _ ;
var value = series <CAM> data . value ; var highlighted <CAM> value:==:series <CAM> data . highlighted <CAM> value ;
var minimist = require ( ' minimist ' ) var mkdirp:==:require ( ' mkdirp ' )
var promise = this . _ promise ; var callback:==:this . _ callback ;
var expect = chai . expect ; var event <CAM> emitter:==:events . event <CAM> emitter ;
var _ im <UND> open <UND> decoder <UND> fd = Module [ ' _ im <UND> open <UND> decoder <UND> fd ' ] = asm [ ' _ im <UND> open <UND> decoder <UND> fd ' ] ; var _ strncpy:==:Module [ ' _ strncpy ' ]    asm [ ' _ strncpy ' ] ;
var extend = require ( ' util ' ) . _ extend ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ,
var ref <CAM> line = this . ref <CAM> line ; var coding <CAM> line:==:this . coding <CAM> line ;
var debug = require ( ' debug ' ) ( ' engine . io - client : socket ' ) ; var index:==:require ( ' indexof ' ) ;
var exists = fs . exists  |  |  path . exists ; var async:==:require ( ' async ' ) ;
var keys = typeof Object . keys = = = ' function ' ? Object . keys : keys <CAM> shim ; var get <CAM> own <CAM> property <CAM> names:==:typeof Object . get <CAM> own <CAM> property <CAM> names      ' function ' ?
var ik <CAM> constraints = this . ik <CAM> constraints ; var transform <CAM> constraints:==:this . transform <CAM> constraints ;
var offset = file <UND> ids [ file <UND> id ] . offset ; var buffer:==:file <UND> ids [ file <UND> id ] . buffer ;
var type = res . headers [ ' content - type ' ] ; var extension:==:mime . extension ( type ) ;
var Agent = smith . Agent ; var Stream:==:require ( ' stream ' ) . Stream ;
var index = legend <CAM> item . index ; var chart:==:this . chart ;
var scope = picker . $ scope ; var options:==:picker . $ options ;
var type = event . data [ ' type ' ] ; var payload:==:event . data [ ' payload ' ] ;
var Alias = Facade . Alias ; var Group:==:Facade . Group ;
var dom = this . dom ; var menu:==:dom . menu ;
var values = this . values ; var destination:==:this . destination ;
var load = require ( ' pug - load ' ) ; var filters:==:require ( ' pug - filters ' ) ;
var top = a . top ; var height:==:a . height ;
var css <CAM> document = imports . css <CAM> document ; var html <CAM> document:==:imports . html <CAM> document ;
var undo = this . actions . get ( ' undo ' ) ; var redo:==:this . actions . get ( ' redo ' ) ;
var dispatch <CAM> listeners = event . _ dispatch <CAM> listeners ; var dispatch <CAM> instances:==:event . _ dispatch <CAM> instances ;
var sass    = require ( ' gulp - sass ' ) var sourcemaps:==:require ( ' gulp - sourcemaps ' )
var oauth = require ( ' oauth - sign ' ) var crypto:==:require ( ' crypto ' )
var default <CAM> thickness = parameters . default <CAM> thickness ! = = undefined ? parameters . default <CAM> thickness : 0 . 003 ; var default <CAM> color:==:parameters . default <CAM> color !    undefined ? parameters . default <CAM> color : new THREE . Color ( 0x000000 ) ;
var Unit = math . type . Unit ; var std:==:math . std ;
var order = $ scope . order ; var currency:==:order . first <UND> currency ;
var assert = require ( ' assert ' ) var fixer:==:require ( ' normalize - package - data ' ) . fixer
var add <CAM> button = function add <CAM> button ( options ) var options:==:options  |  |  new acro <CAM> form . Field ( ) ;
var bigi = require ( ' bigi ' ) var bip39:==:require ( ' bip39 ' )
var d = f . d & & new big <CAM> integer ( f . d ) var Q:==:f . Q & & ecurve . Point . decode <CAM> from ( curve , Buffer . from ( f . Q , ' hex ' ) )
var deep <CAM> purplea700 = exports . deep <CAM> purplea700 = ' # 6200ea ' ; var indigo50:==:exports . indigo50    ' # e8eaf6 ' ;
var editor <CAM> state = require ( ' editor <CAM> state ' ) ; var ReactDOM:==:require ( ' ReactDOM ' ) ;
var Cancel = axios . Cancel ; var cancel <CAM> token:==:axios . cancel <CAM> token ;
var motion <CAM> args = input <CAM> state . motion <CAM> args  |  |  ; var operator:==:input <CAM> state . operator ;
var onclick = options . onclick ; var submenu:==:options . submenu ;
var WAIT <UND> AFTER <UND> LAST <UND> REQUEST = process . env . WAIT <UND> AFTER <UND> LAST <UND> REQUEST  |  |  500 ; var JS <UND> CHECK <UND> TIMEOUT:==:process . env . JS <UND> CHECK <UND> TIMEOUT  |  |  300 ;
var assert   = require ( ' chai ' ) . assert ; var path:==:require ( ' path ' ) ;
var billboard <CAM> collection = entity <CAM> cluster . _ billboard <CAM> collection ; var point <CAM> collection:==:entity <CAM> cluster . _ point <CAM> collection ;
var framework = require ( ' framework ' ) ; var tabs:==:require ( ' tabs ' ) ;
var e = new constant <CAM> node ( 3 ) ; var f:==:n . map ( function ( node , path , parent )
var routes = _ state . routes ; var params:==:_ state . params ;
var Platform = require ( ' Platform ' ) ; var React:==:require ( ' React ' ) ;
var edges = this . edges ; var len:==:edges . length ;
var convert = require ( ' npm - convert ' ) ; var utils:==:require ( ' npm - utils ' ) ;
var express = require ( ' express ' ) ; var grappling:==:require ( ' grappling - hook ' ) ;
var col = filter <CAM> cols ( cols , group ) [ 0 ] ; var val:==:$ utils . eval <CAM> property ( model , group ) ;
var d3 = require ( ' d3 ' ) ; var fs:==:require ( ' fs ' ) ;
var value <CAM> formatter = powerbi . visuals . value <CAM> formatter ; var legend <CAM> props:==:powerbi . visuals . legend <CAM> props ;
var focus <CAM> height = chart . focus <CAM> height = chart <CAM> height * . 7 ; var context <CAM> height:==:chart . context <CAM> height    chart <CAM> height * . 2 ;
var hint = require ( ' jshint ' ) . JSHINT ; var uglify:==:require ( ' uglify - js ' ) ;
var cluster = d3 . select <CAM> all ( ' . cluster ' ) ; var te:==:cluster . append ( ' text ' ) ;
var label = _ label  |  |  ' Loading . . . ' ; var detail:==:_ detail  |  |  ' Please wait ' ;
var contact <CAM> card <CAM> tab <CAM> kind = Contacts . contact <CAM> card <CAM> tab <CAM> kind ; var Placement:==:Windows . UI . Popups . Placement ;
var TYPE <UND> ARGUMENTS = ' TYPE <UND> ARGUMENTS ' ; var TYPE <UND> NAME:==:' TYPE <UND> NAME ' ;
var core = require ( ' core ' ) ; var date <CAM> from <CAM> id:==:Calc . date <CAM> from <CAM> id ;
var batcher = this . batcher ; var skeleton <CAM> renderer:==:this . skeleton <CAM> renderer ;
var editor <CAM> ui = this . editor <CAM> ui ; var graph:==:editor <CAM> ui . editor . graph ;
var from = this . from ; var to:==:this . to ;
var increment = doc <CAM> set . get <CAM> by <CAM> longname ( ' increment ' ) [ 0 ] ; var print:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' print ' ) [ 0 ] ;
var TOTAL <UND> MEMORY = Module [ ' TOTAL <UND> MEMORY ' ]  |  |  4194304 ; var FAST <UND> MEMORY:==:Module [ ' FAST <UND> MEMORY ' ]  |  |  2097152 ;
var maxX = r1 . _ maxX > r2 . _ maxX ? r1 . _ maxX : r2 . _ maxX ; var maxY:==:r1 . _ maxY > r2 . _ maxY ? r1 . _ maxY : r2 . _ maxY ;
var value = that . value ( ) ; var options:==:selector . options ;
var stacks = this . stacks ; var source:==:this . source ;
var predefined <CAM> metrics = ob . predefined <CAM> metrics ; var params:==:ob . params ;
var d = new conditional <CAM> node ( new constant <CAM> node ( 1 ) , new constant <CAM> node ( 5 ) , new constant <CAM> node ( 3 ) ) ; var e:==:new conditional <CAM> node ( new constant <CAM> node ( 1 ) , new constant <CAM> node ( 2 ) , new constant <CAM> node ( 55 ) ) ;
var cell <CAM> renderer = _ column$props . cell <CAM> renderer ; var class <CAM> name:==:_ column$props . class <CAM> name ;
var path = require ( ' path ' ) var spawn:==:require ( ' cross - spawn ' )
var event <CAM> emitter = require ( ' events ' ) . event <CAM> emitter ; var Token:==:require ( ' cst ' ) . Token ;
var provider = this . provider ; var columns:==:provider . columns ;
var debug = imports . debugger ; var tab <CAM> manager:==:imports . tab <CAM> manager ;
var Range = math . type . Range ; var index:==:math . index ;
var BAZ = doc <CAM> set . get <CAM> by <CAM> longname ( ' BAZ ' ) [ 0 ] ; var QUX:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' QUX ' ) [ 0 ] ;
var nav = document . query <CAM> selector ( ' nav ' ) var position:==:window . get <CAM> computed <CAM> style ( nav ) . position
var ui <CAM> location = breakpoint <CAM> locations [ i ] . ui <CAM> location ; var breakpoint:==:breakpoint <CAM> locations [ i ] . breakpoint ;
var uglify = require ( ' gulp - uglify ' ) ; var esformatter:==:require ( ' gulp - esformatter ' ) ;
var scope = selected <CAM> call <CAM> frame . scope <CAM> chain [ i ] ; var object:==:this . target ( ) . runtime <CAM> model . create <CAM> remote <CAM> object ( scope . object ) ;
var is <CAM> array = _ _ dependency1 _ _ . is <CAM> array ; var is <CAM> function:==:_ _ dependency1 _ _ . is <CAM> function ;
var calendar = this . view . calendar ; var start:==:event . start . clone ( ) . strip <CAM> zone ( ) ;
var token <CAM> type = traceur . syntax . token <CAM> type ; var string <CAM> builder:==:traceur . util . string <CAM> builder ;
var commands = imports . commands ; var tab <CAM> manager:==:imports . tab <CAM> manager ;
var debugger <CAM> model = target . debugger <CAM> model ; var workspace:==:debugger <CAM> workspace <CAM> binding . _ workspace ;
var symbol <CAM> size = normalize <CAM> symbol <CAM> size ( data . get <CAM> item <CAM> visual ( idx , ' symbol <CAM> size ' ) ) ; var color:==:data . get <CAM> item <CAM> visual ( idx , ' color ' ) ;
var leave = ref . leave ; var after <CAM> leave:==:ref . after <CAM> leave ;
var w = image . width ; var h:==:image . height ;
var fun1 = foreign . fun1 ; var fun2:==:foreign . fun2 ;
var pad <CAM> right = _ require . pad <CAM> right ; var pad <CAM> center:==:_ require . pad <CAM> center ;
var expect = chai . expect ; var async:==:require ( ' async ' ) ;
var div = document . create <CAM> element ( ' div ' ) ; var form:==:document . create <CAM> element ( ' form ' ) ;
var name = headers [ i ] [ ' name ' ] ; var value:==:headers [ i ] [ ' value ' ] ;
var sinon = require ( ' sinon ' ) ; var expect:==:chai . expect ;
var disable <CAM> keyboard <CAM> focus = _ props . disable <CAM> keyboard <CAM> focus ; var keyboard <CAM> focused:==:_ props . keyboard <CAM> focused ;
var util = require ( ' util ' ) ; var https:==:require ( ' https ' ) ;
var mm = require ( ' mm ' ) ; var should:==:require ( ' should ' ) ;
var width = layout <CAM> info . width ; var height:==:layout <CAM> info . height ;
var use <CAM> named <CAM> references = options . use <CAM> named <CAM> referencesvar allow <CAM> unsafe <CAM> symbols:==:options . allow <CAM> unsafe <CAM> symbols
var deg = Math . floor ( deg <CAM> float ) ; var min:==:Math . floor ( min <CAM> float ) ;
var webot = require ( ' webot ' ) var Webot:==:webot . Webot
var bh = this . _ bh  |  0var ch:==:this . _ ch  |  0
var list <CAM> view = that . list <CAM> view ; var value:==:list <CAM> view . value ( ) [ position ] ;
var data <CAM> points = this . map <CAM> data ? this . map <CAM> data . data <CAM> points : [ ] ; var has <CAM> size:==:this . map <CAM> data . has <CAM> size ;
var color = colors [ feature . get ( ' PLT ' ) ] ; var style:==:style <CAM> cache [ color ] ;
var purple600 = exports . purple600 = ' # 8e24aa ' ; var purple700:==:exports . purple700    ' # 7b1fa2 ' ;
var subplots <CAM> registry = plots . subplots <CAM> registry ; var transforms <CAM> registry:==:plots . transforms <CAM> registry ;
var http = require ( ' http ' ) ; var stream:==:require ( ' stream ' ) ;
var initial <CAM> state = ' initial <CAM> state ' ; var target <CAM> state:==:' target <CAM> state ' ;
var d = moment . duration ( total <CAM> seconds , ' seconds ' ) ; var seconds:==:d . seconds ( ) ;
var vfs = imports . vfs ; var Plugin:==:imports . Plugin ;
var current <CAM> frame = ( this . _ timeline <CAM> data . frame <CAM> list [ this . _ current <CAM> frame <CAM> index ] ) ; var next <CAM> frame:==:( this . _ timeline <CAM> data . frame <CAM> list [ next <CAM> frame <CAM> index ] ) ;
var body = this . transform <CAM> any ( tree . body ) ; var parameter:==:this . transform <CAM> any ( tree . parameter ) ;
var debug <CAM> button = document . get <CAM> element <CAM> by <CAM> id ( ' debug <CAM> button1600 ' ) ; var scene:==:engine . scenes [ 0 ] ;
var skin = skins [ ( Math . random ( ) * skins . length - 1 )  |  0 ] ; var attachments:==:skin . attachments [ slot ] ;
var create <CAM> display <CAM> name <CAM> getter = powerbi . data . create <CAM> display <CAM> name <CAM> getter ; var legend <CAM> position:==:powerbi . visuals . legend <CAM> position ;
var o3 = 0o2 ^ 0o3 ; var o4:==:0o4  |  0o2 ;
var Group = conn . model ( ' gh4049 <UND> 0 ' , group <CAM> schema ) ; var now:==:Date . now ( ) ;
var gulp = require ( ' gulp ' ) ; var webserver:==:require ( ' gulp - webserver ' ) ;
var range = doc . sel . ranges [ i ] ; var from:==:range . from ( ) , to    range . to ( ) ;
var positive <CAM> values = values <CAM> per <CAM> type [ meta . type ] . positive <CAM> values ; var negative <CAM> values:==:values <CAM> per <CAM> type [ meta . type ] . negative <CAM> values ;
var breakpoint <CAM> items = this . _ storage . breakpoint <CAM> items ( this . _ source <CAM> file <CAM> id ( ui <CAM> source <CAM> code ) ) ; var provisional <CAM> breakpoints:==:this . _ provisional <CAM> breakpoints <CAM> for <CAM> source <CAM> file <CAM> id ( source <CAM> file <CAM> id ) ;
var old <CAM> region = cmd . _ old <CAM> region ; var current <CAM> region:==:cmd . _ current <CAM> region ;
var i18n = this . theme . i18n ; var config:==:this . config ;
var write <CAM> con = final <CAM> options . write <CAM> concern ? final <CAM> options . write <CAM> concern : ; var capabilities:==:self . s . topology . capabilities ( ) ;
var noscroll = options . noscroll ; var class <CAM> name:==:options . class <CAM> name  |  |  ' ' ;
var scrollX = this . workspace _ . scrollX ; var scale:==:this . workspace _ . scale ;
var lime700 = exports . lime700 = ' # afb42b ' ; var lime800:==:exports . lime800    ' # 9e9d24 ' ;
var invariant = require ( ' invariant ' ) ; var modify <CAM> block <CAM> for <CAM> content <CAM> state:==:require ( ' modify <CAM> block <CAM> for <CAM> content <CAM> state ' ) ;
var sinon = require ( ' sinon ' ) ; var connect:==:require ( ' connect ' ) ;
var title = pic . photo <UND> title ; var url:==:pic . photo <UND> url ;
var value = element ( by . binding ( ' example . value ' ) ) ; var valid:==:element ( by . binding ( ' my <CAM> form . input . $ valid ' ) ) ;
var is <CAM> primitive = util . is <CAM> primitive ; var wraps <CAM> primitive <CAM> receiver:==:util . wraps <CAM> primitive <CAM> receiver ;
var x = layout . x ; var y0:==:layout . y0 ;
var events = require ( ' events ' ) var tape:==:require ( ' tape ' )
var ref = file . meta . ref ; var path:==:file . meta . path ;
var date = forecast <UND> day . date . split ( ' - ' ) ; var day:==:days [ ( ( new Date ( ) . get <CAM> day ( ) + i ) % 7 ) ] ;
var target = grunt . option ( ' target ' )  |  |  ' development ' ; var beta:==:grunt . option ( ' beta ' )  |  |  false ;
var original = util . get <CAM> arg ( a <CAM> args , ' original ' , null ) ; var source:==:util . get <CAM> arg ( a <CAM> args , ' source ' , null ) ;
var fs = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var context = separate <CAM> dynamic ( options . context  |  |  ) ; var uniforms:==:separate <CAM> dynamic ( options . uniforms  |  |  ) ;
var resolve = node <CAM> require ( ' resolve ' ) ; var res:==:resolve . sync ( specifier ,
var text <CAM> field <CAM> underline = function text <CAM> field <CAM> underline ( props ) var disabled:==:props . disabled ;
var Editor = imports . Editor ; var Document:==:imports . Document ;
var gui = require ( ' nw . gui ' ) ; var fs:==:require ( ' fs ' ) ;
var hash = location . hash ; var share <CAM> id:==:session . share <CAM> id ;
var x = ( lon * ax ) + bx ; var y:==:( lat * ay ) + by ;
var uid = data . uid ; var tid:==:data . tid ;
var typer = require ( ' media - typer ' ) var mime:==:require ( ' mime - types ' )
var w = latest <CAM> change . bounding <CAM> client <CAM> rect . width ; var h:==:latest <CAM> change . bounding <CAM> client <CAM> rect . height ;
var dragon <CAM> bones <CAM> data = build <CAM> armature <CAM> data <CAM> package . dragon <CAM> bones <CAM> data ; var armature <CAM> data:==:build <CAM> armature <CAM> data <CAM> package . armature <CAM> data ;
var x = ~~particle . position . x ; var y:==:~~particle . position . y ;
var react <CAM> controlled <CAM> value <CAM> prop <CAM> types = require ( ' react <CAM> controlled <CAM> value <CAM> prop <CAM> types ' ) ; var reactdom <CAM> component <CAM> tree:==:require ( ' reactdom <CAM> component <CAM> tree ' ) ;
var semantic <CAM> filter = powerbi . data . semantic <CAM> filter ; var url <CAM> utils:==:js <CAM> common . url <CAM> utils ;
var i d = options . i d ; var mock <CAM> open <CAM> close:==:options . mock <CAM> open <CAM> close ;
var h4 = div . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' h4 ' ) [ 0 ] var button:==:div . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' button ' ) [ 0 ]
var O = Object ( this ) ; var len:==:O . length > > > 0 ;
var component = params . component ; var theme:==:params . theme ;
var text = element ( by . binding ( ' example . text ' ) ) ; var valid:==:element ( by . binding ( ' my <CAM> form . input . $ valid ' ) ) ;
var AFTER <UND> USER <UND> ID = nconf . get ( ' AFTER <UND> USER <UND> ID ' ) ; var BEFORE <UND> USER <UND> ID:==:nconf . get ( ' BEFORE <UND> USER <UND> ID ' ) ;
var sdp = msg <CAM> data . sdp ; var pc:==:peer <CAM> conns [ easyrtcid ] . pc ;
var clone = require ( ' clone ' ) ; var assert:==:require ( ' assert ' ) ;
var ui = self . ui ; var type:==:self . options . type ;
var emitX = this . emitX ; var emitY:==:this . emitY ;
var _ strcat = Module [ ' _ strcat ' ] = asm [ ' _ strcat ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var channel = form . elements [ ' channel ' ]  |  | var email:==:form . elements [ ' email ' ]
var extsprintf = require ( ' extsprintf ' ) ; var fs:==:require ( ' fs ' ) ;
var on <CAM> left <CAM> icon <CAM> button <CAM> touch <CAM> tap = _ props . on <CAM> left <CAM> icon <CAM> button <CAM> touch <CAM> tap ; var class <CAM> name:==:_ props . class <CAM> name ;
var body = options . body  |  |  options . datavar headers:==:xhr . headers    options . headers  |  |
var fill = elem . get <CAM> attributens ( null , ' fill ' ) ; var stroke:==:elem . get <CAM> attributens ( null , ' stroke ' ) ;
var shard = replica . shard ; var routings:==:nodes [ get <CAM> index <CAM> for <CAM> node ( node ) ] . routings ;
var mode = frame <CAM> state . mode ; var point <CAM> primitives:==:point <CAM> primitive <CAM> collection . _ point <CAM> primitives ;
var identifiers = parser <CAM> conf . identifiers |  |  new reg <CAM> exp ( ' ^ [ _ A - Za - z ] [ _ A - Za - z0 - 9 ] * ' ) ; var hanging <CAM> indent:==:parser <CAM> conf . hanging <CAM> indent  |  |  conf . indent <CAM> unit ;
var nodes = tree . nodes ( graph <CAM> data ) ; var link:==:vis . select <CAM> all ( ' path . link ' )
var way = relation . ways [ j ] var ref:==:way . get <CAM> attribute ( ' ref ' ) ;
var r = safe <UND> decode <UND> range ( sheet [ ' ! ref ' ] ) ; var FS:==:o . FS !    undefined ? o . FS : ' , ' , fs    FS . char <CAM> code <CAM> at ( 0 ) ;
var red400 = exports . red400 = ' # ef5350 ' ; var red500:==:exports . red500    ' # f44336 ' ;
var selected <CAM> ids = this . selected <CAM> ids ; var selectable <CAM> data <CAM> points:==:this . selectable <CAM> data <CAM> points ;
var width = canvas . width * scale ; var height:==:canvas . height * scale ;
var deep <CAM> purple700 = exports . deep <CAM> purple700 = ' # 512da8 ' ; var deep <CAM> purple800:==:exports . deep <CAM> purple800    ' # 4527a0 ' ;
var require <CAM> config = data . require <CAM> config ; var dojo <CAM> config:==:data . dojo <CAM> config ;
var body = editor . body ; var br:==:UE . browser . ie ? ' ' : ' < br > ' ;
var f = fixtures . valid [ 1 ] var c:==:f . children [ 0 ]
var b = ' b ' ; var c:==:fulfill <CAM> soon ( ' c ' , 10 ) ;
var tileset = this . _ tileset <CAM> for <CAM> layer ( layer <CAM> info , map <CAM> info ) ; var layer:==:new cc . tmx <CAM> layer ( tileset , layer <CAM> info , map <CAM> info ) ;
var v = '' + v <UND> var w:==:'' + w _
var common <CAM> objs = this . common <CAM> objs ; var objs:==:this . objs ;
var Class = kendo . Class ; var support:==:kendo . support ;
var attributes = vertex <CAM> array . _ attributes ; var length:==:attributes . length ;
var max   = $ ( this ) . attr ( ' maxvalue ' ) ; var ajax <UND> branch:==:$ ( this ) . attr ( ' ajax <UND> branch ' ) ;
var size = active . bounds . size ; var x:==:offset . x + size . x + 100 , offsetY    offset . y ;
var Unit = math . type . Unit ; var result <CAM> set:==:math . type . result <CAM> set ;
var a = mobx . observable ( 1 ) ; var b:==:mobx . observable ( 2 ) ;
var null <CAM> stream = core <CAM> stream . null <CAM> stream ; var Stream:==:core <CAM> stream . Stream ;
var c = d3 . select ( this ) ; var trace:==:d . trace ;
var error = shared <CAM> util . error ; var webgl <CAM> utils:==:display <CAM> webgl . webgl <CAM> utils ;
var foo = new accessor <CAM> node ( a , new index <CAM> node ( [ new constant <CAM> node ( ' foo ' ) ] ) ) ; var bar:==:new accessor <CAM> node ( foo , new index <CAM> node ( [ new constant <CAM> node ( ' bar ' ) ] ) ) ;
var axe1 = obj . axe1  |  |  [ 1,0,0 ] ; var axe2:==:obj . axe2  |  |  [ 1,0,0 ] ;
var TNS <UND> PREFIX = utils . TNS <UND> PREFIX ; var find <CAM> prefix:==:utils . find <CAM> prefix ;
var ellipsoid = ellipse <CAM> geometry . _ ellipsoid ; var min <CAM> height:==:min <CAM> height <CAM> func ( granularity , ellipsoid ) ;
var subscriptions = this . subscriptions  |  |  ( this . subscriptions = ) ; var listeners:==:this . listeners  |  |  ( this . listeners    ) ;
var u = params . uuids ? params . uuids [ index ] : null ; var e:==:_ new <CAM> endpoint ( paint <CAM> style : es , hover <CAM> paint <CAM> style : ehs , endpoint : ep , connections : [ self ] , uuid : u , anchor : a , source : element ) ;
var colors <CAM> per <CAM> vertex = polyline <CAM> geometry . _ colors <CAM> per <CAM> vertex ; var follow <CAM> surface:==:polyline <CAM> geometry . _ follow <CAM> surface ;
var flow = this . flow _ ; var executor:==:this . executor _ ;
var pixel <CAM> converter = js <CAM> common . pixel <CAM> converter ; var sq <CAM> expr <CAM> builder:==:powerbi . data . sq <CAM> expr <CAM> builder ;
var special = _ get <CAM> formatted <CAM> item <CAM> reference ( ' items . special ' , _ . keys ( Content . special ) , ' Numeric Quantity ' ) ; var gear:==:_ get <CAM> formatted <CAM> item <CAM> reference ( ' items . gear . owned ' , _ . keys ( Content . gear . flat ) , ' Boolean ' ) ;
var pez = doc <CAM> set . get <CAM> by <CAM> longname ( ' pez ' ) [ 0 ] ; var cos:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' cos ' ) [ 0 ] ;
var data <CAM> source = that . data <CAM> source ; var data <CAM> item:==:that . data <CAM> item ( item ) ;
var p = priv . params . pvar q:==:priv . params . q
var req = msg . req ; var res:==:msg . res ;
var x2 = parse <CAM> percent ( position <CAM> info . x2 , container <CAM> width ) ; var y2:==:parse <CAM> percent ( position <CAM> info . y2 , container <CAM> height ) ;
var index = geometry . index ; var attributes:==:geometry . attributes ;
var sinon = require ( ' sinon ' ) ; var r:==:require ( ' redis ' ) ;
var option <CAM> component = _ ref . option <CAM> component ; var option <CAM> renderer:==:_ ref . option <CAM> renderer ;
var options = this . options ; var stiffness:==:options . stiffness ;
var m = math . matrix ( [ [ 5 , 0 , 15 ] , [ 223 , 0 , 34 . 5 ] , [ 1 , 0 , 19 ] ] , ' dense ' ) ; var r:==:math . qr ( m ) ;
var geometry = this . point . geometry ; var features:==:this . control . layer . features ;
var all = Ember . RSVP . all ; var hash:==:Ember . RSVP . hash ;
var create <CAM> member <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> member <CAM> expression ; var create <CAM> object <CAM> literal <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> object <CAM> literal <CAM> expression ;
var mesh = meshes [ i ] ; var bounding <CAM> box:==:mesh . get <CAM> bounding <CAM> info ( ) . bounding <CAM> box ;
var event <CAM> emitter = require ( ' events ' ) . event <CAM> emitter ; var expect:==:require ( ' chai ' ) . expect ;
var geom = feature . geometry ; var center:==:this . center ;
var https = require ( ' https ' ) var net:==:require ( ' net ' )
var transform = context . transform ; var opacity:==:context . opacity ;
var iks = mesh . geometry . iks ; var bones:==:mesh . geometry . bones ;
var brightness <CAM> auto <CAM> checkbox = this . elements . brightness <CAM> auto <CAM> checkbox ; var brightness <CAM> manual:==:this . elements . brightness <CAM> manual ;
var siblings = this . siblings ; var index:==:siblings . index <CAM> of ( this ) ;
var prefix = context & & context . prefix ; var inexport:==:context & & context . inexport ;
var mid = opts . mid ; var reset <CAM> css:==:opts . reset <CAM> css ,
var w = ( this . max <CAM> width & & this . max <CAM> width < o . width ) ? this . max <CAM> width : o . width ; var x:==:w * Text . H <UND> OFFSETS [ this . text <CAM> align |  | 'left ' ] ;
var and = stdlib . Atomics . and ; var fround:==:stdlib . Math . fround ;
var text <CAM> operation = firepad . text <CAM> operation ; var Cursor:==:firepad . Cursor ;
var is <CAM> factory = _ _ webpack <UND> require _ _ ( 5 ) . is <CAM> factory ; var traverse:==:_ _ webpack <UND> require _ _ ( 5 ) . traverse ;
var left = get <CAM> identifiers <CAM> from <CAM> binary <CAM> expression ( side . left ) ; var right:==:get <CAM> identifiers <CAM> from <CAM> binary <CAM> expression ( side . right ) ;
var utils = mocha . utils ; var Runnable:==:mocha . Runnable ;
var body = this . get <CAM> dom ( ' body ' ) ; var width:==:ui <CAM> utils . get <CAM> client <CAM> rect ( this . get <CAM> dom ( ' content ' ) ) . width ;
var dom = api . dom ; var util:==:api . util ;
var last <CAM> focus = apf . menu . last <CAM> focussed ; var opener:==:this . opener ;
var data <CAM> grid = this . _ data <CAM> grid ; var root <CAM> node:==:data <CAM> grid . root <CAM> node ( ) ;
var password <CAM> exception = shared <CAM> util . password <CAM> exception ; var stat <CAM> timer:==:shared <CAM> util . stat <CAM> timer ;
var Test = mongoose . model ( ' Test ' , test <CAM> schema ) ; var t:==:new Test ( ) ;
var scrollable = that . options . scrollable ; var distance:==:$ . is <CAM> numeric ( scrollable . distance ) ? scrollable . distance : SCROLLSPEED ;
var context = scene . context ; var frame <CAM> state:==:scene . frame <CAM> state ;
var ellipsoid = corridor <CAM> geometry . _ ellipsoid ; var vertex <CAM> format:==:corridor <CAM> geometry . _ vertex <CAM> format ;
var requirejs = require ( ' requirejs ' ) ; var fs:==:require ( ' fs ' ) ;
var view <CAM> state = frame <CAM> state . view <CAM> state ; var center:==:view <CAM> state . center ;
var uglify = require ( ' uglify - js ' ) ; var mkdirp:==:require ( ' mkdirp ' ) . sync ;
var descriptor = descriptors [ i ] ; var decorators:==:descriptor . decorators ;
var cell <CAM> cache = _ ref . cell <CAM> cache ; var cell <CAM> class <CAM> name:==:_ ref . cell <CAM> class <CAM> name ;
var canvas = this . gl . canvas ; var gl:==:this . gl ;
var manifestURL = layout . manifestURL ; var path:==:layout . path ;
var width = current . owidth ; var height:==:current . oheight ;
var title = tab . title  |  |  '' ; var tpl:==:tab . tpl  |  |  '' ;
var min <CAM> scale = _ props . min <CAM> scale ; var style:==:_ props . style ;
var minimum <CAM> red = default <CAM> value ( options . minimum <CAM> red , 0 ) ; var maximum <CAM> red:==:default <CAM> value ( options . maximum <CAM> red , 1 . 0 ) ;
var path = require ( ' path ' ) var optimist:==:require ( ' optimist ' )
var class <CAM> name = _ props . class <CAM> name ; var style:==:_ props . style ;
var INVALID <UND> STATE <UND> ERR    = exception <CAM> code . INVALID <UND> STATE <UND> ERR    = ( ( exception <CAM> message [ 11 ] = ' Invalid state ' ) , 11 ) ; var SYNTAX <UND> ERR:==:exception <CAM> code . SYNTAX <UND> ERR       ( ( exception <CAM> message [ 12 ]   ' Syntax error ' ) , 12 ) ;
var bottom <CAM> radius = options . bottom <CAM> radius ; var vertex <CAM> format:==:default <CAM> value ( options . vertex <CAM> format , vertex <CAM> format . DEFAULT ) ;
var each = zr <CAM> util . each ; var asc:==:number <CAM> util . asc ;
var row <CAM> coords = this . row <CAM> coords ; var col <CAM> coords:==:this . col <CAM> coords ;
var fs   = require ( ' fs ' ) ; var config:==:require ( ' config ' ) ;
var test <CAM> case = test <CAM> case  |  |  goog . testing . js <CAM> td <CAM> test <CAM> case <CAM> adapter . test <CAM> case _ ; var conditional <CAM> test <CAM> case:==:conditional <CAM> test <CAM> case  |  |
var debug   = require ( ' debug ' ) ( ' axm : transport ' ) ; var stringify:==:require ( ' json - stringify - safe ' ) ;
var $ el = this . $ elementvar val:==:$ el . is ( ' input ' ) ? ' val ' : ' html '
var function <CAM> value = values . function <CAM> value ; var instantiate:==:values . instantiate ;
var path = db . options . path ; var log:==:ctx . log ;
var limit = parse <CAM> int ( params . qstring . limit  |  |  20 ) ; var skip:==:parse <CAM> int ( params . qstring . skip  |  |  0 ) ;
var col = db . collection ( ' batch <UND> write <UND> unordered <UND> ops <UND> legacy <UND> 5 ' ) ; var write <CAM> concern:==:configuration . write <CAM> concern <CAM> max ( ) ;
var style = _ props . style ; var subtitle:==:_ props . subtitle ;
var include <CAM> line <CAM> comment = options . include <CAM> line <CAM> comment  |  |  false ; var start:==:options . start  |  |  0 ;
var attachment = constraint . attachment ; var pin:==:constraint . pin ;
var active <CAM> drag = DDM . active <CAM> drag ; var active <CAM> drop:==:instance . active <CAM> drop ;
var polygon <CAM> offset = render <CAM> state . polygon <CAM> offset ; var enabled:==:polygon <CAM> offset . enabled ;
var location = _ props2 . location ; var routes:==:_ props2 . routes ;
var a = Stream ( function ( value ) return value * 2 ) var u:==:Stream ( function ( value ) return value * 3 )
var rotl32 = utils . rotl32 ; var sum32:==:utils . sum32 ;
var create <CAM> return <CAM> statement = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> return <CAM> statement ; var parse <CAM> tree <CAM> transformer:==:traceur . codegeneration . parse <CAM> tree <CAM> transformer ;
var path = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var properties = element . data ( ' attributes ' )  |  |  element . data ( ' properties ' ) ; var key:==:element . data ( ' key ' )  |  |  element . data ( ' parent ' ) ;
var Writable = require ( ' readable - stream ' ) . Writablevar inherits:==:require ( ' inherits ' )
var greenA100 = exports . greenA100 = ' # b9f6ca ' ; var greenA200:==:exports . greenA200    ' # 69f0ae ' ;
var params = ob . params ; var validate <CAM> user <CAM> for <CAM> mgmt <CAM> readapi:==:ob . validate <CAM> user <CAM> for <CAM> mgmt <CAM> readapi ;
var parse <CAM> tree = traceur . syntax . trees . parse <CAM> tree ; var parse <CAM> tree <CAM> transformer:==:traceur . codegeneration . parse <CAM> tree <CAM> transformer ;
var x = trace . x ; var y:==:trace . y ;
var array <CAM> comprehension <CAM> transformer = traceur . codegeneration . array <CAM> comprehension <CAM> transformer ; var arrow <CAM> function <CAM> transformer:==:traceur . codegeneration . arrow <CAM> function <CAM> transformer ;
var name = sanitize ( ( ( o . name?o . name : o . i d )  |  |  ' ' ) . to <CAM> string ( ) ) ; var topic:==:sanitize ( ( o . topic |  |  ' ' ) . to <CAM> string ( ) ) ;
var data = this . _ data [ i ] ; var r:==:Math . min ( right , data [ 0 ] . length ) ;
var min <CAM> max <CAM> span = axis <CAM> proxy . _ min <CAM> max <CAM> span = ; var data <CAM> zoom <CAM> model:==:axis <CAM> proxy . _ data <CAM> zoom <CAM> model ;
var before <CAM> show <CAM> day = this . _ get ( inst , ' before <CAM> show <CAM> day ' ) ; var show <CAM> other <CAM> months:==:this . _ get ( inst , ' show <CAM> other <CAM> months ' ) ;
var opacity = this . _ opacity ; var max <CAM> opacity:==:this . _ max <CAM> opacity ;
var sprite <CAM> frame <CAM> cache = cc . sprite <CAM> frame <CAM> cache ; var path:==:cc . path ;
var selenium = require ( ' selenium - standalone ' ) ; var querystring:==:require ( ' querystring ' ) ;
var lstat <CAM> sync = require ( ' fs ' ) . lstat <CAM> syncvar write <CAM> file <CAM> sync:==:require ( ' fs ' ) . write <CAM> file <CAM> sync
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : connector : mail ' ) ;
var htmlparser   = require ( ' htmlparser2 ' ) ; var exit:==:require ( ' exit ' ) ;
var comma <CAM> expression = traceur . syntax . trees . comma <CAM> expression ; var conditional <CAM> expression:==:traceur . syntax . trees . conditional <CAM> expression ;
var password <CAM> responses = shared <CAM> util . password <CAM> responses ; var unknown <CAM> error <CAM> exception:==:shared <CAM> util . unknown <CAM> error <CAM> exception ;
var title = self . include <UND> title ? ' title= ' ' + ( actual  |  |  self . data [ idx ] [ 3 ] [ 0 ] ) + ' ' ' : '' ; var text:==:self . include <UND> text ? wrapper + ( actual  |  |  self . data [ idx ] [ 3 ] [ 0 ] ) + wrapper : '' ;
var d3 = _ add <CAM> div ( ' d3 ' ) , d4 = _ add <CAM> div ( ' d4 ' ) ; var c:==:_ js <CAM> plumb . connect ( source : d3 , target : d4 , anchors : [ ' Continuous ' , ' Continuous ' ] ) ;
var _ main = Module [ ' _ main ' ] = asm [ ' _ main ' ] ; var _ memset:==:Module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var del = require ( ' del ' ) ; var less:==:require ( ' gulp - less ' ) ;
var bbox = properties . bbox  |  |  [ 0 , 0 , 0 , 0 ] ; var units <CAM> per <CAM> em:==:( override . units <CAM> per <CAM> em  |  |
var execute <CAM> dispatch = event <CAM> plugin <CAM> utils . execute <CAM> dispatch ; var plugin <CAM> module:==:event <CAM> plugin <CAM> registry . get <CAM> plugin <CAM> module <CAM> for <CAM> event ( event ) ;
var properties = crs . properties ; var name:==:properties & & properties . name ;
var interval = result . interval ; var nice <CAM> tick <CAM> extent:==:result . nice <CAM> tick <CAM> extent ;
var IMPORT <UND> SPECIFIER <UND> SET = ' IMPORT <UND> SPECIFIER <UND> SET ' ; var IMPORTED <UND> BINDING:==:' IMPORTED <UND> BINDING ' ;
var destroy <CAM> tables = window . destroy <CAM> tables ; var fake <CAM> group <CAM> row:==:window . fake <CAM> group <CAM> row ;
var get <CAM> accessor = traceur . syntax . trees . get <CAM> accessor ; var null <CAM> tree:==:traceur . syntax . trees . null <CAM> tree ;
var c = new String ( ' c ' ) ; var d:==:new String ( 'd ' ) ;
var Background = Windows . application <CAM> model . Background ; var background <CAM> execution <CAM> manager:==:Background . background <CAM> execution <CAM> manager ;
var mandatory = ( constraints & & constraints . mandatory ) ? constraints . mandatory : null ; var optional:==:( constraints & & constraints . optional ) ? constraints . optional : null ;
var line <CAM> style = line <CAM> style <CAM> model . get <CAM> line <CAM> style ( ) ; var area <CAM> style:==:area <CAM> style <CAM> model . get <CAM> area <CAM> style ( ) ;
var marker <CAM> cluster <CAM> plugin = leaflet <CAM> helpers . marker <CAM> cluster <CAM> plugin ; var awesome <CAM> markers <CAM> plugin:==:leaflet <CAM> helpers . awesome <CAM> markers <CAM> plugin ;
var with <CAM> appended = util . with <CAM> appended ; var maybe <CAM> wrap <CAM> as <CAM> error:==:util . maybe <CAM> wrap <CAM> as <CAM> error ;
var is <CAM> block = is <CAM> block <CAM> element ( node ) ; var is <CAM> empty:==:_ is <CAM> empty ( node , state ) ;
var node <CAM> path = options . node <CAM> path  |  |  ' ' ; var runners:==:options . runners  |  |  ;
var container = this . container ; var options:==:util . extend ( , this . options ) ;
var oidc <CAM> client = exports . oidc <CAM> client = _ _ webpack <UND> require _ _ ( 301 ) ; var web <CAM> storage <CAM> state <CAM> store:==:exports . web <CAM> storage <CAM> state <CAM> store    _ _ webpack <UND> require _ _ ( 303 ) ;
var num <CAM> elements = this . num <CAM> elements ; var num <CAM> components:==:this . num <CAM> components ;
var dy = Math . max ( 0 , Math . min ( h , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dy ' , this . dy ) ) ) ) ; var dx:==:Math . max ( 0 , Math . min ( w , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . style , ' dx ' , this . dx ) ) ) ) ;
var goal = nodes <CAM> from <CAM> array ( item . goal ) ; var shuffled:==:nodes <CAM> from <CAM> array ( item . shuffled ) ;
var pre = expr <CAM> info [ expr ] . pre ; var post:==:expr <CAM> info [ expr ] . post ;
var Complex = math . type . Complex ; var Fraction:==:math . type . Fraction ;
var left <CAM> calendar = this . left <CAM> calendar ; var right <CAM> calendar:==:this . right <CAM> calendar ;
var d = new block <CAM> node ( [ node : new symbol <CAM> node ( ' x ' ) , node : new constant <CAM> node ( 2 ) , visible : false ] ) ; var e:==:new block <CAM> node ( [ node : new symbol <CAM> node ( ' x ' ) , node : new constant <CAM> node ( 2 ) , node : new constant <CAM> node ( 5 ) ] ) ;
var y1 = layer . y1  |  |  layer . frame . y ; var x2:==:layer . x2  |  |  layer . frame . x ;
var left = Math . max ( rect . left * zoom <CAM> factor + this . _ margins . left , body <CAM> rect . left * zoom <CAM> factor ) ; var top:==:Math . max ( rect . top * zoom <CAM> factor + this . _ margins . top , body <CAM> rect . top * zoom <CAM> factor ) ;
var Channel = goog . labs . net . web <CAM> channel . Channel ; var channel <CAM> request:==:goog . labs . net . web <CAM> channel . channel <CAM> request ;
var ONEAVGMONTH = constants . ONEAVGMONTH ; var ONEDAY:==:constants . ONEDAY ;
var parse = xpath . parse = function parse ( stream , a ) var r:==:or <CAM> expr ( stream , a ) ;
var style = el . style ; var text:==:style . text ;
var selectable <CAM> data <CAM> points = this . selectable <CAM> data <CAM> points ; var selectable <CAM> legend <CAM> data <CAM> points:==:this . selectable <CAM> legend <CAM> data <CAM> points ;
var master = store . master [ type ] ; var delegates:==:store . delegates [ type ]    ( store . delegates [ type ]  |  |  ) ;
var pivotA = options . pivotA ? options . pivotA . clone ( ) : new Vec3 ( ) ; var pivotB:==:options . pivotB ? options . pivotB . clone ( ) : new Vec3 ( ) ;
var test = require ( ' utest ' ) ; var assert:==:require ( ' assert ' ) ;
var nconf = require ( ' nconf ' ) ; var url:==:require ( ' url ' ) ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ; var g:==:new Dygraph ( graph , ZERO <UND> TO <UND> FIFTY , value <CAM> range : [ 0,50 ] ) ;
var values = this . _ values ; var length:==:this . length ( ) ;
var zoom <CAM> out <CAM> label = options . zoom <CAM> out <CAM> label ! = = undefined ? options . zoom <CAM> out <CAM> label : ' \u2212 ' ; var zoom <CAM> in <CAM> tip <CAM> label:==:options . zoom <CAM> in <CAM> tip <CAM> label !    undefined ?
var Rule = open <CAM> layers . Rule ; var Filter:==:open <CAM> layers . Filter ;
var profile = sbx . data . profile ; var prop:==:sbx . properties . basal ;
var save <CAM> option = util . save <CAM> option ; var fill <CAM> dropdown:==:util . fill <CAM> dropdown ;
var fs = require ( ' fs ' ) ; var dirname:==:require ( ' path ' ) . dirname ;
var IMPORT <UND> SPECIFIER <UND> SET = ' IMPORT <UND> SPECIFIER <UND> SET ' ; var IMPORT <UND> TYPE <UND> CLAUSE:==:' IMPORT <UND> TYPE <UND> CLAUSE ' ;
var caption = table . children ( ' caption ' ) ; var caption <CAM> side:==:caption . length ? caption [ 0 ] . _ caption <CAM> side : null ;
var system = require ( ' system ' ) ; var fs:==:require ( ' fs ' ) ;
var Legend = powerbi . visuals . Legend ; var value <CAM> type:==:powerbi . value <CAM> type ;
var _ ff = 85 ; values [ _ ff ] = _ ff ; var _ fg:==:86 ; values [ _ fg ]    _ fg ;
var tab = plugin . active <CAM> document . tab ; var iframe:==:plugin . active <CAM> session . iframe ;
var field = generate <CAM> accessor ( fields [ i ] , accessors , cls ) ; var parameter:==:' parameter _ ' + field ;
var single <CAM> char = node . get <CAM> attribute ( ' single <CAM> char ' ) ; var esc:==:node . get <CAM> attribute ( ' escape ' ) ;
var g = generator ; var len:==:g ( ) . to <CAM> string ( ) . length ;
var left <CAM> boundary = this . _ left <CAM> boundary ; var right <CAM> boundary:==:this . _ right <CAM> boundary ;
var p   = path ; var readline:==:require ( ' readline ' ) ;
var cm    = this . cm ; var editor:==:this . editor ;
var request = require ( ' request ' ) ; var assert:==:require ( ' assert ' ) ;
var when = user . services . password . reset . when ; var reason:==:user . services . password . reset . reason ;
var npm = require ( ' npm ' ) ; var request:==:require ( ' request ' ) ;
var hint = hints [ $ item . data ( ' index ' ) ] ; var item:==:$ item . data ( ' item ' ) ;
var dirs = util . dirs ( ) ; var log:==:require ( util . dirs ( ) . core + ' log ' ) ;
var block = this . blocks [ i ] ; var l:==:position <CAM> block . anchor . left ;
var toolbar = $ ( ' # grid <UND> '+ this . name + ' _ toolbar ' ) ; var summary:==:$ ( ' # grid <UND> '+ this . name + ' _ summary ' ) ;
var path = require ( ' path ' ) ; var stylish:==:require ( ' jshint - stylish ' ) ;
var ignore <CAM> accents = _ props . ignore <CAM> accents ; var ignore <CAM> case:==:_ props . ignore <CAM> case ;
var path = require ( ' path ' ) ; var through2:==:require ( ' through2 ' ) ;
var selection = selections [ 0 ] ; var token:==:this . token <CAM> at <CAM> text <CAM> position ( selection . start <CAM> line , selection . start <CAM> column ) ;
var Dialog = imports . Dialog ; var ui:==:imports . ui ;
var home = this . _ home ; var card:==:home . card <CAM> manager . find <CAM> card <CAM> from <CAM> card <CAM> list ( data ) ;
var VARIABLE <UND> DECLARATION <UND> LIST = ' VARIABLE <UND> DECLARATION <UND> LIST ' ; var VARIABLE <UND> STATEMENT:==:' VARIABLE <UND> STATEMENT ' ;
var iframe = plugin . active <CAM> session . iframe ; var editor:==:plugin . active <CAM> session . editor ;
var test <CAM> global = path . resolve ( base , ' test <CAM> global ' ) var test <CAM> legacy:==:path . resolve ( base , ' test <CAM> legacy ' )
var currentdom <CAM> node = this . _ currentdom <CAM> node ; var crumbs:==:this . crumbs <CAM> element ;
var v <CAM> layout1 = new vertical <CAM> layout ( ' v <CAM> layout1 ' ) ; var v <CAM> layout2:==:new vertical <CAM> layout ( ' v <CAM> layout2 ' ) ;
var class <CAM> name = options . class <CAM> name ! = = undefined ? options . class <CAM> name : ' ol - attribution ' ; var tip <CAM> label:==:options . tip <CAM> label !    undefined ? options . tip <CAM> label : ' Attributions ' ;
var resolution = render <CAM> session . resolution ; var tx:==:( wt . tx * resolution ) + render <CAM> session . shakeX ;
var value <CAM> of = Object . prototype . value <CAM> of ; var has <CAM> own <CAM> property:==:Object . prototype . has <CAM> own <CAM> property ;
var lock = locker . lockvar unlock:==:locker . unlock
var path = require ( ' path ' ) ; var zlib:==:require ( ' zlib ' ) ;
var commonmark = options . commonmark ; var pedantic:==:options . pedantic ;
var column <CAM> count = _ props2 . column <CAM> count ; var row <CAM> count:==:_ props2 . row <CAM> count ;
var ip = require ( ' ip ' ) ; var winston:==:require ( ' winston ' ) ;
var punct = ' punct ' ; var rel:==:' rel ' ;
var assert = require ( ' assert ' ) ; var sinon:==:require ( ' sinon ' ) ;
var react <CAM> updates = require ( ' react <CAM> updates ' ) ; var ui <CAM> manager:==:require ( ' ui <CAM> manager ' ) ;
var scope = scope <CAM> chain [ i ] ; var object:==:scope . object ( ) ;
var assert = require ( ' assert ' ) ; var format:==:require ( ' util ' ) . format ;
var async = require ( ' async ' ) ; var vizion:==:require ( ' vizion ' ) ;
var create <CAM> empty <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> empty <CAM> statement ; var create <CAM> expression <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> expression <CAM> statement ;
var total <CAM> rows = this . instance . get <CAM> setting ( ' total <CAM> rows ' ) ; var row <CAM> headers:==:this . wot . get <CAM> setting ( ' row <CAM> headers ' ) . length ;
var o = self . opts ; var el:==:self . el    create <CAM> el ( null , class <CAM> name : o . class <CAM> name ) ;
var assert = require ( ' assert ' ) var Promise:==:test <CAM> promise ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ bitshift64 <CAM> shl:==:Module [ ' _ bitshift64 <CAM> shl ' ]    asm [ ' _ bitshift64 <CAM> shl ' ] ;
var mode = settings . mode ; var config:==:settings . config ;
var dep1 = require ( ' dep1 ' ) ; var dep2:==:require ( ' dep2 ' ) ;
var events = require ( ' events ' ) ; var ansi:==:require ( ' ansi ' ) ;
var overlay <CAM> text = app . overlay <CAM> text ; var camera <CAM> button:==:app . camera <CAM> button ;
var input = that . input [ 0 ] ; var ignore <CAM> case:==:that . options . ignore <CAM> case ;
var green = Color . float <CAM> to <CAM> byte ( color . green ) ; var blue:==:Color . float <CAM> to <CAM> byte ( color . blue ) ;
var slot = slots [ i ] ; var attachment:==:slot . attachment ;
var river = river <CAM> layer . create ( 0 , 400 , ' river ' ) ; var ufo:==:sprite <CAM> layer . create ( 360 , 240 , ' ufo ' ) ;
var i d = this . i d ; var layout <CAM> file:==:this . layout <CAM> file
var autoprefix = require ( ' less - plugin - autoprefix ' ) ; var logger:==:require ( ' gulp - logger ' ) ;
var holes = options . holes  |  |  [ ] ; var depth:==:options . depth  |  |  0 ;
var is <CAM> array = _ angular . is <CAM> array ; var is <CAM> undefined:==:_ angular . is <CAM> undefined ;
var menus = imports . menus ; var gotoline:==:imports [ ' ace . gotoline ' ] ;
var msg = payload : ' foo ' , _ msgid : ' 987654321 ' ; var m:==:n . metric ( undefined , msg,'15 mb ' ) ;
var context = scene . context ; var framebuffer:==:pass <CAM> state . framebuffer ;
var dir = dirname ( partial ) ; var base:==:basename ( partial , ext ) ;
var fs = require ( ' fs ' ) ; var shell:==:require ( ' shelljs ' ) ;
var superagent = require ( ' superagent ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var r = Math . floor ( this . red*255 ) ; var g:==:Math . floor ( this . green*255 ) ;
var atan2 = Math . atan2 ; var sqrt:==:Math . sqrt ;
var width = view . _ original <CAM> design <CAM> resolution <CAM> size . width ; var height:==:view . _ original <CAM> design <CAM> resolution <CAM> size . height ;
var ao = this . ao ? this . ao . build <CAM> code ( builder , ' fv1 ' ) : undefined ; var ambient:==:this . ambient ? this . ambient . build <CAM> code ( builder , ' c ' ) : undefined ;
var Plugin = imports . Plugin ; var general:==:imports [ ' preferences . general ' ] ;
var max <CAM> col = config . max <CAM> col  |  |  80 ; var min <CAM> help <CAM> col:==:config . min <CAM> help <CAM> col  |  |  20 ;
var hello = h ( ' div ' , ' hello ' ) var again:==:h ( ' span ' , [ ' hello ' , ' again ' ] )
var face = faces [ i ] ; var world <CAM> normal:==:sphereConvex <UND> worldNormal ;
var get = Ember . get ; var set:==:Ember . set ;
var y = this . _ FBU . y + tile <UND> y * 16 ; var w:==:Math . min ( 16 , ( this . _ FBU . x + this . _ FBU . width ) - x ) ;
var constructor = apply <CAM> params ( cls <CAM> def . has <CAM> own <CAM> property ( ' constructor ' ) ? cls <CAM> def . constructor : undefined , ' constructor ' ) ; var proto:==:constructor . prototype ;
var operand = this . transform <CAM> any ( left . operand ) ; var member <CAM> expression:==:this . transform <CAM> any ( left . member <CAM> expression ) ;
var li = document . create <CAM> element ( ' li ' ) ; var button:==:document . create <CAM> element ( ' button ' ) ;
var gulp   = require ( ' gulp ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var options = opt <UND> options  |  |  ; var button:==:document . create <CAM> element ( ' button ' ) ;
var kind = opts . kind  |  |  ' var ' ; var block <CAM> hoist:==:opts . _ block <CAM> hoist     null ? 2 : opts . _ block <CAM> hoist ;
var extend = $ . extend ; var noop:==:$ . noop ;
var all <CAM> classes = init . all <CAM> classes ; var has <CAM> own <CAM> property:==:Object . prototype . has <CAM> own <CAM> property ;
var products = track . products ( ) ; var event:==:track . event ( ) ;
var tty = require ( ' tty ' ) ; var util:==:require ( ' util ' ) ;
var data = connection . data ; var network:==:data & & data . network ;
var Unit = math . type . Unit ; var Fraction:==:math . type . Fraction ;
var load = args . load  |  |  [ ] ; var scope:==:args . scope  |  |  [ ] ;
var ARRAY <UND> LITERAL = ' ARRAY <UND> LITERAL ' ; var ARRAY <UND> PATTERN:==:' ARRAY <UND> PATTERN ' ;
var keys = this . keys ; var params:==:this . params ;
var path <CAM> map = ref . path <CAM> map ; var name <CAM> map:==:ref . name <CAM> map ;
var handler <CAM> path = event . data . handler <CAM> path ; var method:==:event . data . method ;
var style <CAM> sheet <CAM> prop <CAM> type = require ( ' style <CAM> sheet <CAM> prop <CAM> type ' ) ; var View:==:require ( ' View ' ) ;
var ace = tab . editor . ace ; var renderer:==:ace . renderer ;
var fast <CAM> mode = config . fast <CAM> mode ; var quote <CAM> char:==:config . quote <CAM> char  |  |  ' ' ' ;
var style = this . props . style ; var margin:==:style & & resolve <CAM> box <CAM> style ( ' margin ' , style )  |  |  blank ;
var options = widget . prototype . options ; var prototype:==:Object . create ( html <CAM> element . prototype ) ;
var src <CAM> alpha = ( ' src <CAM> alpha ' in value ? value . src <CAM> alpha : value . src ) ; var dstRGB:==:( ' dstRGB ' in value ? value . dstRGB : value . dst ) ;
var updatable = options . updatable ; var side <CAM> orientation:==:mesh <CAM> builder . update <CAM> side <CAM> orientation ( options . side <CAM> orientation , scene ) ;
var start = offsets [ j ] . start ; var count:==:offsets [ j ] . count ;
var k = n . keys [ j ] ; var t:==:k . t ;
var slice = Array . prototype . slice ; var has <CAM> own:==:Object . prototype . has <CAM> own <CAM> property ;
var db = imports . db ; var ensure <CAM> logged <CAM> in:==:imports [ ' c9 . login ' ] . ensure <CAM> logged <CAM> in ( ) ;
var find <CAM> session <CAM> byuri = require ( ' find <CAM> session <CAM> byuri ' ) ; var connect:==:require ( ' react - redux ' ) ;
var label = $ ( input ) . next ( ' label ' ) ; var text:==:label . text ( ) ;
var purple50 = exports . purple50 = ' # f3e5f5 ' ; var purple100:==:exports . purple100    ' # e1bee7 ' ;
var _ Color = primitives . _ Colorvar _ Path:==:primitives . _ Path
var pixel <CAM> ratio = frame <CAM> state . pixel <CAM> ratio ; var resolution:==:view <CAM> state . resolution ;
var cancelable = default <CAM> value ( options . cancelable , true ) ; var alpha:==:default <CAM> value ( options . alpha , 0 . 0 ) ;
var html = pan . html ( ) ; var st:==:pan [ 0 ] . style . css <CAM> text ;
var offset = data . offset  |  |  x : 0 , y : 0 ; var repeat:==:data . repeat  |  |  x : 1 , y : 1 ;
var active <CAM> drop = instance . active <CAM> drop ; var placeholder:==:instance . get ( ' placeholder ' ) ;
var body = att <CAM> obj . body ; var type:==:att <CAM> obj . content <UND> type ;
var y = value . y ; var z:==:value . z ;
var typed <CAM> array = options . typed <CAM> array ; var size <CAM> in <CAM> bytes:==:options . size <CAM> in <CAM> bytes ;
var event <CAM> handler = goog . events . event <CAM> handler ; var Timer:==:goog . Timer ;
var direction = e . gesture . direction ; var x:==:e . gesture . center . x ;
var opn = require ( ' opn ' ) var path:==:require ( ' path ' )
var context = frame <CAM> state . context ; var ellipsoid:==:frame <CAM> state . map <CAM> projection . ellipsoid ;
var x = this . x * 2 ; var y:==:this . y * 2 ;
var head = document . get <CAM> elements <CAM> by <CAM> tag <CAM> name ( ' head ' ) [ 0 ] ; var link:==:head . append <CAM> child ( document . create <CAM> element ( ' link ' ) ) ;
var panels = imports . panels ; var tree:==:imports . tree ;
var interaction = that . interactions [ interaction <CAM> index ] ; var request:==:interaction . requests [ request <CAM> index ] ;
var crop <CAM> box = this . crop <CAM> box ; var aspect <CAM> ratio:==:this . options . aspect <CAM> ratio ;
var divide = math . divide ; var bignumber:==:math . bignumber ;
var head = list . head ( paras ) ; var last:==:list . last ( paras ) ;
var current <CAM> velocity = _ state . current <CAM> velocity ; var last <CAM> ideal <CAM> style:==:_ state . last <CAM> ideal <CAM> style ;
var tree <CAM> outline = this . tree <CAM> outline ; var parent <CAM> node:==:node . parent <CAM> node ;
var attr <CAM> name = goog . is <CAM> string ( opt <UND> attrName ) ? opt <UND> attrName : null ; var attr <CAM> value:==:goog . is <CAM> string ( opt <UND> attrValue ) ? opt <UND> attrValue : null ;
var sync = Backbone . sync ; var ajax:==:Backbone . ajax ;
var MurmurHash3 <UND> 64 = core <CAM> murmur <CAM> hash3 . MurmurHash3 <UND> 64 ; var error <CAM> font:==:core <CAM> fonts . error <CAM> font ;
var resolve <CAM> asset <CAM> source = require ( ' resolve <CAM> asset <CAM> source ' ) ; var React:==:require ( ' React ' ) ;
var base    = desc . stat <UND> desc . extra <UND> base ; var max <UND> length:==:desc . stat <UND> desc . max <UND> length ;
var currency = order . price <UND> amount . currency ( ) . to <UND> json ( ) ; var issuer:==:order . price <UND> amount . issuer ( ) . to <UND> json ( ) ;
var t = ast . true <CAM> exp . visit ( this ) ; var f:==:ast . false <CAM> exp . visit ( this ) ;
var data = component . data ; var assets:==:this . system . app . assets ;
var vector <CAM> markers <CAM> plugin = leaflet <CAM> helpers . vector <CAM> markers <CAM> plugin ; var maki <CAM> markers <CAM> plugin:==:leaflet <CAM> helpers . maki <CAM> markers <CAM> plugin ;
var quat <CAM> without <CAM> yaw = orbit <CAM> camera . quat <CAM> without <CAM> yaw ; var yaw <CAM> offset:==:orbit <CAM> camera . yaw <CAM> offset ;
var icc <CAM> id = messageDOM . dataset . icc <CAM> id ; var button:==:messageDOM . query <CAM> selector ( ' button ' ) ;
var round = Math . round ; var floor:==:Math . floor ;
var chalk = require ( ' chalk ' ) ; var tildify:==:require ( ' tildify ' ) ;
var auto <CAM> height = _ props3 . auto <CAM> height ; var column <CAM> count:==:_ props3 . column <CAM> count ;
var logscale = this . attributes _ . get <CAM> for <CAM> axis ( ' logscale ' , i ) ; var include <CAM> zero:==:this . attributes _ . get <CAM> for <CAM> axis ( ' include <CAM> zero ' , i ) ;
var action = ui . actions . get ( ' find ' ) ; var graph:==:ui . editor . graph ;
var extend = require ( ' extend ' ) ; var mime:==:require ( ' mime ' ) ;
var row = row <UND> col [ 0 ] ; var col:==:row <UND> col [ 1 ] ;
var triangles = this . triangles ; var material <CAM> index:==:this . material <CAM> index ;
var dummy = to <CAM> string : goog . functions . constant ( ' [ object dummy ] ' ) ; var sentinel:==:to <CAM> string : goog . functions . constant ( ' [ object sentinel ] ' ) ;
var month = parse <CAM> int ( this . $ month . val ( ) , 10 ) ; var year:==:parse <CAM> int ( this . $ year . val ( ) , 10 ) ;
var create <CAM> undefined <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> undefined <CAM> expression ; var create <CAM> variable <CAM> declaration:==:parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> declaration ;
var message = messages [ i ] ; var length:==:message . length ;
var last <CAM> camera <CAM> view = this . _ last <CAM> camera <CAM> view ; var camera:==:this . _ camera ;
var url = require ( ' url ' ) ; var Gaze:==:require ( ' gaze ' ) . Gaze ;
var cell <CAM> size = _ ref . cell <CAM> size ; var cell <CAM> size <CAM> and <CAM> position <CAM> manager:==:_ ref . cell <CAM> size <CAM> and <CAM> position <CAM> manager ;
var null <CAM> tree = traceur . syntax . trees . null <CAM> tree ; var object <CAM> literal <CAM> expression:==:traceur . syntax . trees . object <CAM> literal <CAM> expression ;
var period = effect <CAM> model . get ( ' period ' ) * 1000 ; var loop:==:effect <CAM> model . get ( ' loop ' ) ;
var footer = $ ( ' # grid <UND> '+ this . name + ' _ footer ' ) ; var body:==:$ ( ' # grid <UND> '+ this . name + ' _ body ' ) ;
var tab <CAM> manager = imports . tab <CAM> manager ; var preview:==:imports . preview ;
var value = options . value ; var value <CAM> spec:==:options . value <CAM> spec ;
var s = new Schema ( mix : type : Schema . Types . Mixed , default : , shared : true ) ; var M:==:mongoose . model ( ' M2 ' , s ) ;
var i d = i d  |  |  options . size ( ) ; var option:==:chart <UND> option <UND> list ( ) ;
var cap <CAM> level <CAM> controller = new config . cap <CAM> level <CAM> controller ( this ) ; var fps <CAM> controller:==:new config . fps <CAM> controller ( this ) ;
var a = Stream ( ) var b:==:Stream . combine ( function ( a ) return a ( ) * 2 , [ a ] )
var fs   = require ( ' fs ' ) ; var mockery:==:require ( ' mockery ' ) ;
var send <CAM> button = document . query <CAM> selector ( ' button#send <CAM> button ' ) ; var close <CAM> button:==:document . query <CAM> selector ( ' button#close <CAM> button ' ) ;
var appearance = this . appearance ; var material:==:appearance . material ;
var run <CAM> in <CAM> this <CAM> context = require ( ' vm ' ) . run <CAM> in <CAM> this <CAM> context ; var semver:==:require ( ' semver ' ) ;
var ARRAY <UND> PATTERN = ' ARRAY <UND> PATTERN ' ; var ARRAY <UND> TYPE:==:' ARRAY <UND> TYPE ' ;
var children = this . _ children ; var length:==:children . length ;
var create <CAM> variable <CAM> declaration <CAM> list = parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> declaration <CAM> list ; var create <CAM> variable <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> statement ;
var gl     = plot . glvar pixel <CAM> ratio:==:pick ? plot . pick <CAM> pixel <CAM> ratio : plot . pixel <CAM> ratio
var parameters = technique . parameters ; var attributes:==:technique . attributes ;
var info = shared <CAM> util . info ; var is <CAM> array <CAM> buffer:==:shared <CAM> util . is <CAM> array <CAM> buffer ;
var editors = imports . editors ; var anims:==:imports . anims ;
var param = this . get <CAM> parameter ( param <CAM> id ) ; var module <CAM> list:==:_ data . module <CAM> list ,
var target = $ ( ev . target ) ; var pool:==:pools . filter ( function ( pool )
var s = ref . s ; var v:==:ref . v ;
var r = position <CAM> block . anchor . right ; var t:==:position <CAM> block . anchor . top ;
var _ stdin = _ stdin = allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC <UND> STATIC ) ; var _ stderr:==:_ stderr allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC <UND> STATIC ) ;
var react <CAM> native <CAM> attribute <CAM> payload = require ( ' react <CAM> native <CAM> attribute <CAM> payload ' ) ; var react <CAM> native <CAM> component <CAM> tree:==:require ( ' react <CAM> native <CAM> component <CAM> tree ' ) ;
var fail = grunt . fail ; var verbose:==:grunt . verbose ;
var chalk = require ( ' chalk ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var line = this . line ; var col:==:this . col ;
var ui = imports . ui ; var c9:==:imports . c9 ;
var Accessory = require ( ' hap - nodejs ' ) . Accessory ; var Service:==:require ( ' hap - nodejs ' ) . Service ;
var cycles = ( typeof opts . cycles = = = ' boolean ' ) ? opts . cycles : false ; var replacer:==:opts . replacer  |  |  function ( key , value ) return value ; ;
var url = require ( ' url ' ) var log:==:require ( ' npmlog ' )
var dx = Math . max ( 0 , Math . min ( bounds . width , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:Math . max ( 0 , Math . min ( arrow <CAM> head , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var path   = require ( ' path ' ) ; var micromatch:==:require ( ' micromatch ' ) ;
var shape = this . shape ; var p:==:is <CAM> line ( shape )
var area <CAM> color = item <CAM> style <CAM> model . get ( ' area <CAM> color ' ) ; var color:==:item <CAM> style <CAM> model . get ( ' color ' )
var message = this . _ options . message ; var title:==:this . _ options . title ;
var arr = this . _ arrvar key <CAM> indices:==:this . _ key <CAM> indices
var http = require ( ' http ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var col = grid . columns [ 1 ] ; var row:==:grid . rows [ 0 ] ;
var path    = require ( ' path ' ) ; var browserify:==:require ( ' browserify ' ) ;
var iterator1 = el . iterator1 ? ( ' , ' + ( el . iterator1 ) ) : '' ; var iterator2:==:el . iterator2 ? ( ' , ' + ( el . iterator2 ) ) : '' ;
var img = document . create <CAM> element ( ' img ' ) ; var system:==:this . system ;
var width = Math . max ( 400 , win . width ) ; var height:==:Math . max ( 300 , win . height ) ;
var rows = g . rows . groups ; var sorted <CAM> cols:==:g . sorted <CAM> cols ( ) ;
var get <CAM> tree <CAM> scope = scope . get <CAM> tree <CAM> scope ; var unsafe <CAM> unwrap:==:scope . unsafe <CAM> unwrap ;
var scale = ' scale ' in args ? args . scale : this . scale ; var rotation:==:' rotation ' in args ? args . rotation : this . rotation ;
var custom <CAM> context <CAM> file = injector . get ( ' config . custom <CAM> context <CAM> file ' ) var custom <CAM> debug <CAM> file:==:injector . get ( ' config . custom <CAM> debug <CAM> file ' )
var NOT <UND> SUPPORTED <UND> ERR    = exception <CAM> code . NOT <UND> SUPPORTED <UND> ERR    = ( ( exception <CAM> message [ 9 ] = ' Not supported ' ) , 9 ) ; var INUSE <UND> ATTRIBUTE <UND> ERR:==:exception <CAM> code . INUSE <UND> ATTRIBUTE <UND> ERR      ( ( exception <CAM> message [ 10 ]   ' Attribute in use ' ) , 10 ) ;
var frags = this . frags = new Array ( data . length ) ; var alias:==:this . alias ;
var e = error [ i ] var c:==:color [ j ]
var d = new constant <CAM> node ( 4 ) ; var n:==:new array <CAM> node ( [ a , b , c , d ] ) ;
var c = bucket . pop ( ) ; var b:==:bucket . pop ( ) ;
var addr = parsed . address ? parsed . address . to <CAM> string ( ) : '' ; var message:==:parsed . message ;
var d = synopsis . get ( ' days <CAM> spent ' ) var h:==:synopsis . get ( ' hours <CAM> spent ' )
var collection = this . transform <CAM> any ( tree . collection ) ; var body:==:this . transform <CAM> any ( tree . body ) ;
var is <CAM> array = shared <CAM> util . is <CAM> array ; var warn:==:shared <CAM> util . warn ;
var positions = wall . positions ; var show:==:wall . show ;
var form = document . create <CAM> element ( ' form ' ) ; var area:==:document . create <CAM> element ( ' textarea ' ) ;
var role = this . _ element ? this . _ element . get <CAM> attribute ( ' role ' ) : null ; var label:==:this . _ element ? this . _ element . get <CAM> attribute ( ' aria - label ' ) : null ;
var bar <CAM> group = this . _ displayables . bar <CAM> group ; var other <CAM> axis <CAM> inverse:==:( this . _ data <CAM> shadow <CAM> info  |  |  ) . other <CAM> axis <CAM> inverse ;
var text = credit . text ; var link:==:credit . link ;
var Mirror = global . Mirror ; var value <CAM> mirror:==:global . value <CAM> mirror ;
var camera = this . camera ; var audio <CAM> manager:==:this . audio <CAM> manager ;
var object3D = this . el . object3D ; var clone:==:object3D . clone ( ) ;
var content = reply . content ; var metadata:==:reply . metadata ;
var y = Math . floor ( bb . y1 ) ; var width:==:Math . floor ( bb . width ( ) ) ;
var pkg = this . pkg ; var context:==:this . context ;
var unsafe <CAM> unwrap = scope . unsafe <CAM> unwrap ; var unwrap <CAM> if <CAM> needed:==:scope . unwrap <CAM> if <CAM> needed ;
var chart = me . chart ; var chart <CAM> area:==:chart . chart <CAM> area ;
var chalk   = require ( ' chalk ' ) ; var async:==:require ( ' async ' ) ;
var _ strncpy = Module [ ' _ strncpy ' ] = asm [ ' _ strncpy ' ] ; var _ im <UND> get <UND> spl <UND> start <UND> at:==:Module [ ' _ im <UND> get <UND> spl <UND> start <UND> at ' ]    asm [ ' _ im <UND> get <UND> spl <UND> start <UND> at ' ] ;
var url = require ( ' url ' ) var fs:==:require ( ' fs ' )
var clone = node . clone <CAM> node ( ) ; var child <CAM> nodes:==:node . child <CAM> nodes ;
var browserify = require ( ' browserify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var pinv = s . pinv ; var leftmost:==:s . leftmost ;
var mat = this . mat ; var m1:==:mat [ 1 ] , m2    mat [ 2 ] , m3    mat [ 3 ] , m5    mat [ 5 ] ,
var architect = require ( ' architect ' ) ; var os:==:require ( ' os ' ) ;
var basename = require ( ' path ' ) . basename ; var join:==:require ( ' path ' ) . join ;
var object <CAM> map = traceur . util . object <CAM> map ; var parse <CAM> tree <CAM> validator:==:traceur . syntax . parse <CAM> tree <CAM> validator ;
var font <CAM> direction = current . font <CAM> direction ; var texth <CAM> scale:==:current . texth <CAM> scale * font <CAM> direction ;
var column = this . _ grid . get <CAM> or <CAM> create <CAM> column ( column <CAM> index + this . _ column <CAM> layout <CAM> manager . _ grid <CAM> offset ) ; var is <CAM> leaf:==:hierarchy <CAM> nav . is <CAM> leaf ( item ) ;
var response = e . data . response ; var type:==:response . type ;
var circle = s . circle ( 10 , 20 , 30 ) ; var use:==:circle . use ( ) ;
var STOP = C . STOP = 0x12 ; var TRUE1:==:C . TRUE1    0x21 ;
var bgnow = sbx . properties . bgnow ; var delta:==:sbx . properties . delta ;
var delete <CAM> private = m . delete <CAM> private ; var set <CAM> private:==:m . set <CAM> private ;
var input = path . resolve ( _ _ dirname , ' init - input . js ' ) var fs:==:require ( ' fs ' )
var spy = sinon . spy ( ) var q:==:new seq <CAM> queue ( 10 , Infinity )
var vertex <CAM> cache <CAM> optimize = parameters . vertex <CAM> cache <CAM> optimize ; var compress <CAM> vertices:==:parameters . compress <CAM> vertices ;
var scalerank = feature . get ( ' scalerank ' ) ; var labelrank:==:feature . get ( ' labelrank ' ) ;
var length = names . length ; var allow <CAM> picking:==:primitive . allow <CAM> picking ;
var div = document . create <CAM> element ( ' div ' ) ; var b:==:document . create <CAM> element ( ' b ' ) ;
var line <CAM> number = this . line <CAM> number <CAM> in <CAM> source ( index ) ; var column <CAM> number:==:this . column <CAM> number <CAM> in <CAM> source ( index ) ;
var modify = require ( ' gulp - modify ' ) ; var moment:==:require ( ' moment ' ) ;
var method = options . method  |  |  ' GET'var uri:==:options . uri <UND> full  |  |  ( this . config . url + options . uri )
var Globalization = Windows . Globalization ; var Geolocation:==:Windows . Devices . Geolocation ;
var moment = require ( ' moment ' ) var jwt:==:require ( ' jwt - simple ' )
var scope = angular . element ( $ ( ' body ' ) ) . scope ( ) ; var i d:==:obj . i d . split ( ' . ' ) ;
var assert = require ( ' assert ' ) ; var Buffer:==:require ( ' safe - buffer ' ) . Buffer ;
var register = load ( _ _ webpack <UND> require _ _ ( 7 ) ) . register ; var compile:==:load ( _ _ webpack <UND> require _ _ ( 7 ) ) . compile ;
var ribbon <CAM> close <CAM> path = options . ribbon <CAM> close <CAM> path  |  |  false ; var cap:==:( options . cap      0 ) ? 0 : options . cap  |  |  BABYLON . Mesh . NO <UND> CAP ;
var modal <CAM> terminal = Views . modal <CAM> terminal ; var contained <CAM> base:==:Views . contained <CAM> base ;
var layout <CAM> vertex <CAM> array = group . layout <CAM> vertex <CAM> array ; var zoom:==:this . zoom ;
var geometry = this . geometry ; var position:==:geometry . get <CAM> attribute ( ' position ' ) ;
var purple500 = exports . purple500 = ' # 9c27b0 ' ; var purple600:==:exports . purple600    ' # 8e24aa ' ;
var db = mandreel <UND> indexedDB . db ; var trans:==:db . transaction ( [ ' cache ' ] , idb <CAM> transaction . READ <UND> WRITE ) ;
var args = JSON . parse ( target . get <CAM> attribute ( ' data - args ' ) ) ; var file:==:target . get <CAM> attribute ( ' data - file ' ) ;
var style = $ . qsa ( ' style ' , node ) [ 0 ] var sheet:==:style . sheet  |  |  style . style <CAM> sheet
var i2 = _ i2 ; var s1:==:_ s1 ;
var fs = require ( ' fs ' ) ; var resolve:==:require ( ' path ' ) . resolve ;
var predefined <CAM> name = traceur . syntax . predefined <CAM> name ; var Keywords:==:traceur . syntax . Keywords ;
var create <CAM> binary <CAM> operator = parse <CAM> tree <CAM> factory . create <CAM> binary <CAM> operator ; var create <CAM> comma <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> comma <CAM> expression ;
var module = this . props . module ; var member:==:this . props . member ;
var a21 = this . a21 ; var a22:==:this . a22 ;
var iter = goog . iter . slice ( ' ABCDEFG ' . split ( '' ) , 10 ) ; var ex:==:assert <CAM> throws ( function ( ) iter . next ( ) ) ;
var uuid = require ( ' uuid ' ) ; var vasync:==:require ( ' vasync ' ) ;
var nested <CAM> key = db . model ( ' nested <CAM> key ' , nested <CAM> key <CAM> schema ) ; var n:==:new nested <CAM> key ( ) ;
var caption = blocks . is <CAM> string ( options . caption ) & & new virtual <CAM> element ( ' option ' ) ; var option:==:new virtual <CAM> element ( ' option ' ) ;
var converter <CAM> helper = powerbi . visuals . converter <CAM> helper ; var selection <CAM> id <CAM> builder:==:powerbi . visuals . selection <CAM> id <CAM> builder ;
var node = options . node ; var ellipsis <CAM> character:==:options . ellipsis <CAM> character  |  |  ' . . . ' ;
var piece <CAM> list = this . _ piece <CAM> list ; var precision:==:this <CAM> option . precision ;
var audio <CAM> send <CAM> codec = options . audio <CAM> send <CAM> codec  |  |  '' ; var audio <CAM> recv <CAM> codec:==:options . audio <CAM> recv <CAM> codec  |  |  '' ;
var assert = require ( ' assert ' ) ; var async:==:require ( ' async ' ) ;
var eval <CAM> expr = ' eval <CAM> expr ( ' + args . path + ' . condition , model : model , ' + ' ' array <CAM> index ' : $ index , ' + ' ' array <CAM> indices ' : array <CAM> indices , ' + ' ' path ' : path , ' + ' ' $ i ' : $ i , ' + ' ' $ index ' : $ index , ' + ' ' model <CAM> value ' : ' + str <CAM> model + ' ) ' ; var children:==:args . field <CAM> frag . children  |  |  args . field <CAM> frag . child <CAM> nodes ;
var g = d3 . select ( this ) . style ( ' pointer - events ' , ' all ' ) . style ( ' -webkit - tap - highlight - color ' , ' rgba ( 0,0,0,0 ) ' ) . on ( ' mousedown . brush ' , brushstart ) . on ( ' touchstart . brush ' , brushstart ) var background:==:g . select <CAM> all ( ' . background ' ) . data ( [ 0 ] )
var p = tree <CAM> container . parent <CAM> node ; var box:==:new ui . vsplitbox (
var group = this . group ; var scale:==:geo . scale ;
var scroll <CAM> to <CAM> column = props . scroll <CAM> to <CAM> column ; var width:==:props . width ;
var div = document . create <CAM> element ( ' div ' ) ; var span:==:document . create <CAM> element ( ' span ' ) ;
var b2j = this . b2j ; var isbjunk:==:this . isbjunk ;
var item = xml . children . item ( i ) ; var attributes:==:item . attributes ;
var tls = require ( ' tls ' ) ; var url:==:require ( ' url ' ) ;
var multi = this . helpers . multi ; var suffix:==:this . helpers . suffix ;
var left = ( current . oleft + ( e . pageX  |  |  e . clientX ) - current . ox ) ; var top:==:( current . otop + ( e . pageY  |  |  e . clientY ) - current . oy ) ;
var unified = require ( ' unified ' ) ; var parse:==:require ( ' remark - parse ' ) ;
var _ eb = 65 ; values [ _ eb ] = _ eb ; var _ ec:==:66 ; values [ _ ec ]    _ ec ;
var data = this . data ; var mesh:==:this . el . get <CAM> or <CAM> create <CAM> object3d ( ' mesh ' , THREE . Mesh ) ;
var p = server . port  |  |  server . client <CAM> port ; var host:==:server . host ;
var path = require ( ' path ' ) ; var muk:==:require ( ' muk ' ) ;
var EXPORT <UND> SPECIFIER <UND> SET = ' EXPORT <UND> SPECIFIER <UND> SET ' ; var EXPORT <UND> STAR:==:' EXPORT <UND> STAR ' ;
var x = touch . pageX - screen . bounds . xvar y:==:touch . pageY - screen . bounds . y
var animation <CAM> delay = goog . require ( ' goog . async . animation <CAM> delay ' ) ; var Promise:==:goog . require ( ' goog . Promise ' ) ;
var additional <CAM> properties = definition . additional <CAM> properties ; var xml:==:definition . xml ;
var schema <CAM> error = helpers . schema <CAM> error ; var schema <CAM> context:==:helpers . schema <CAM> context ;
var generated = util . get <CAM> arg ( a <CAM> args , ' generated ' ) ; var original:==:util . get <CAM> arg ( a <CAM> args , ' original ' , null ) ;
var tangent = Cartesian3 . from <CAM> array ( tangents , i ) ; var bitangent:==:Cartesian3 . from <CAM> array ( bitangents , i ) ;
var data = node . data ( ) ; var fillcolor:==:( ( ( data [ 0 ]  |  |  [ ] ) [ 0 ]  |  |  ) . trace  |  |  ) . fillcolor ;
var headers = element . _ headers ; var footers:==:element . _ footers ;
var _ mc = 194 ; values [ _ mc ] = _ mc ; var _ md:==:195 ; values [ _ md ]    _ md ;
var assert   = require ( ' assert ' ) var async:==:require ( ' async ' )
var path = require ( ' path ' ) ; var protobuf:==:require ( ' pomelo - protobuf ' ) ;
var active = e . detail . active ; var switch <CAM> in <CAM> progress:==:e . detail . switch <CAM> in <CAM> progress ;
var _ ij = 137 ; values [ _ ij ] = _ ij ; var _ ik:==:138 ; values [ _ ik ]    _ ik ;
var x = doc <CAM> set . get <CAM> by <CAM> longname ( ' x ' ) [ 0 ] ; var Foo:==:doc <CAM> set . get <CAM> by <CAM> longname ( ' Foo ' ) [ 0 ] ;
var context = options . context ; var width:==:options . width ;
var create <CAM> call <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ; var create <CAM> expression <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> expression <CAM> statement ;
var parser = require ( ' socket . io - parser ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io : server ' ) ;
var stopwatch = priv . get ( this ) . stopwatch ; var node:==:this . nodes . laps ;
var codeblock = packet . codeblocks [ i ] ; var precinct:==:codeblock . precinct ;
var render <CAM> selection = t . render <CAM> selection ; var clear <CAM> selection:==:t . clear <CAM> selection ;
var define = loader . global . define ; var require:==:loader . global . require ;
var height = corridor . height ; var extruded <CAM> height:==:corridor . extruded <CAM> height ;
var initPTS = this . _ initPTS ; var initDTS:==:this . _ initDTS ;
var buffer <CAM> target = options . buffer <CAM> target ; var typed <CAM> array:==:options . typed <CAM> array ;
var style = _ props . style ; var textarea <CAM> style:==:_ props . textarea <CAM> style ;
var is <CAM> string = leaflet <CAM> helpers . is <CAM> string ; var is <CAM> number:==:leaflet <CAM> helpers . is <CAM> number ;
var menu = document . query <CAM> selector ( ' . menu ' ) ; var script:==:document . query <CAM> selector ( ' . script ' ) ;
var p = internal <CAM> property <CAM> array [ i ] ; var v:==:p . value ;
var dict = params . dict ; var data:==:this . data ;
var chokidar = require ( ' chokidar ' ) ; var undefsafe:==:require ( ' undefsafe ' ) ;
var portal = window . portals [ guid ] ; var data:==:portal . options . data ;
var async = require ( ' async ' ) ; var flaverr:==:require ( ' flaverr ' ) ;
var radius <CAM> function = options . radius <CAM> function ; var cap:==:options . cap  |  |  BABYLON . Mesh . NO <UND> CAP ;
var c = a . scaled <UND> width ; var d:==:a . scaled <UND> height ;
var new <CAM> expression = traceur . syntax . trees . new <CAM> expression ; var null <CAM> tree:==:traceur . syntax . trees . null <CAM> tree ;
var address = document . get <CAM> element <CAM> by <CAM> id ( ' address ' ) ; var version:==:document . get <CAM> element <CAM> by <CAM> id ( ' version ' ) ;
var metadata = value . _ _ metadata  |  |  ; var deferred:==:value . _ _ deferred  |  |  ;
var line <CAM> color = powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . line <CAM> color , solid : color : default <CAM> color ) ; var transparency:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . transparency , 50 ) ;
var tracked <CAM> entity = viewer . _ tracked <CAM> entity ; var current <CAM> time:==:viewer . clock . current <CAM> time ;
var slot <CAM> seg <CAM> html = t . slot <CAM> seg <CAM> html ; var cell <CAM> to <CAM> date:==:t . cell <CAM> to <CAM> date ;
var ed1 = join ( ' ed1 ' ) ; var ed2:==:join ( ' ed2 ' ) ;
var forum = req . forumvar user:==:req . user
var event <CAM> emitter = require ( ' event <CAM> emitter ' ) ; var Platform:==:require ( ' Platform ' ) ;
var dbname = options . dbargs . dbname ; var executes:==:options . executes ;
var param <CAM> names = _ compile <CAM> pattern2 . param <CAM> names ; var tokens:==:_ compile <CAM> pattern2 . tokens ;
var on <CAM> thrown = function on <CAM> thrown ( err ) var original <CAM> filter:==:err . pipe . original <CAM> filter ;
var FUNCTION <UND> EXPRESSION = ' FUNCTION <UND> EXPRESSION ' ; var FUNCTION <UND> TYPE:==:' FUNCTION <UND> TYPE ' ;
var grey700 = exports . grey700 = ' # 616161 ' ; var grey800:==:exports . grey800    ' # 424242 ' ;
var dynCall <UND> iiiiiii = Module [ ' dynCall <UND> iiiiiii ' ] = asm [ ' dynCall <UND> iiiiiii ' ] ; var dynCall <UND> iiiii:==:Module [ ' dynCall <UND> iiiii ' ]    asm [ ' dynCall <UND> iiiii ' ] ;
var sunburst = nv . models . sunburst ( ) ; var tooltip:==:nv . models . tooltip ( ) ;
var selection <CAM> id = powerbi . visuals . selection <CAM> id ; var data <CAM> view <CAM> objects:==:powerbi . data <CAM> view <CAM> objects ;
var scale = Fn . scale ; var to <CAM> fixed:==:Fn . to <CAM> fixed ;
var http = require ( ' http ' ) ; var https:==:require ( ' https ' ) ;
var self = this . self ; var options:==:self . options ;
var verbose = grunt . verbose ; var _:==:grunt . util . _ ;
var path = require ( ' path ' ) ; var sinon:==:require ( ' sinon ' ) ;
var cst = require ( ' cst ' ) ; var Token:==:cst . Token ;
var key = options . key ; var value:==:options . value ;
var iters = parse <CAM> int ( data . algorithm . decrypt . kde . kdeparams . iters . to <CAM> string ( ) , 10 ) var algo:==:aesid [ data . algorithm . decrypt . cipher . algo . join ( ' . ' ) ]
var weighted <CAM> sum = ( opt <CAM> formula  |  |  Logic . weighted <CAM> sum ( cost <CAM> terms , cost <CAM> weights ) ) ; var progress:==:options & & options . progress ;
var children = this . _ element . children ; var transform:==:CSS . transform ;
var sticky = set <CAM> sticky ( user <CAM> opts . sticky ) ; var duration:==:set <CAM> duration ( user <CAM> opts . duration ) ;
var is <CAM> moment = moment . is <CAM> moment ; var is <CAM> date:==:require ( ' util ' ) . is <CAM> date ;
var fs = require ( ' fs ' ) ; var spawn:==:require ( ' child <UND> process ' ) . spawn ;
var version = req . params . version ; var user:==:req . user ;
var teal100 = exports . teal100 = ' # b2dfdb ' ; var teal200:==:exports . teal200    ' # 80cbc4 ' ;
var matches = this . matches ; var text <CAM> divs:==:this . text <CAM> divs ;
var tabs = this . tabs ; var input:==:operation . input ;
var path = ui <CAM> source <CAM> code . path ( ) ; var source <CAM> file <CAM> id:==:web <CAM> inspector . breakpoint <CAM> manager . _ source <CAM> file <CAM> id ( ui <CAM> source <CAM> code ) ;
var layers = this . layers ; var data <CAM> views:==:this . data <CAM> views ;
var create <CAM> paren <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> paren <CAM> expression ; var create <CAM> program:==:parse <CAM> tree <CAM> factory . create <CAM> program ;
var style <CAM> sheet = require ( ' style <CAM> sheet ' ) ; var style <CAM> sheet <CAM> prop <CAM> type:==:require ( ' style <CAM> sheet <CAM> prop <CAM> type ' ) ;
var doc = window . document ; var html:==:doc . query <CAM> selector ( ' html ' ) ;
var post <CAM> tag = hexo . model ( ' post <CAM> tag ' ) ; var post <CAM> category:==:hexo . model ( ' post <CAM> category ' ) ;
var switch <CAM> statement = traceur . syntax . trees . switch <CAM> statement ; var this <CAM> expression:==:traceur . syntax . trees . this <CAM> expression ;
var seconds = make <CAM> getter ( ' seconds ' ) var minutes:==:make <CAM> getter ( ' minutes ' )
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var exchange = $ scope . exchange ; var currency:==:Currency . from <UND> human ( $ scope . exchange . currency <UND> name ? $ scope . exchange . currency <UND> name : ' XRP ' ) ;
var super <CAM> class = this . transform <CAM> any ( tree . super <CAM> class ) ; var elements:==:this . transform <CAM> list ( tree . elements ) ;
var c = df . append <CAM> child ( document . create <CAM> text <CAM> node ( ' c ' ) ) ; var d:==:df . append <CAM> child ( document . create <CAM> text <CAM> node ( 'd ' ) ) ;
var assign = require ( ' object - assign ' ) ; var di:==:require ( ' asyncdi ' ) ;
var git <CAM> error = Errors . git <CAM> error ; var Warning:==:Errors . Warning ;
var splitURL = web <CAM> inspector . ParsedURL . spliturl <CAM> into <CAM> path <CAM> components ( url ) ; var project <CAM> id:==:web <CAM> inspector . network <CAM> project . project <CAM> id ( target , splitURL [ 0 ] , false ) ;
var l = 0 + ( sleft ? pleft . size <CAM> calculated + this . padding : 0 ) ; var t:==:0 + ( stop ? ptop . size <CAM> calculated + this . padding : 0 ) ;
var debug = require ( ' debug ' ) ( ' nodemon ' ) ; var util:==:require ( ' util ' ) ;
var tx = Transaction . from <CAM> hex ( f . tx <CAM> hex ) var script:==:bscript . fromASM ( f . script )
var blue <CAM> grey100 = exports . blue <CAM> grey100 = ' # cfd8dc ' ; var blue <CAM> grey200:==:exports . blue <CAM> grey200    ' # b0bec5 ' ;
var keys = JSDOC . js <CAM> plate . keys ; var values:==:JSDOC . js <CAM> plate . values ;
var Matrix = math . type . Matrix ; var Range:==:math . type . Range ;
var r = shape . r ; var r0:==:shape . r0 ;
var algorithm <CAM> name = args . detail . continuation <CAM> data [ ' algorithm <CAM> name ' ] ; var file:==:args . detail . files [ 0 ] ;
var font <CAM> char = String . from <CAM> char <CAM> code ( font <CAM> char <CAM> code ) ; var glyph:==:this . glyph <CAM> cache [ charcode ] ;
var duration = this . video <CAM> element . duration ; var now:==:performance . now ( ) ;
var type = binding . typevar directive:==:avalon . directives [ type ]
var node <CAM> type <CAM> offset = snapshot . _ node <CAM> type <CAM> offset ; var node <CAM> name <CAM> offset:==:snapshot . _ node <CAM> name <CAM> offset ;
var bad <CAM> html = bad <CAM> html <CAM> element . text ( ) . trim ( ) ; var t:==:$ ( ' # templates . report ' ) . clone ( ) ;
var post <UND> logout <UND> redirect <UND> uri = _ ref . post <UND> logout <UND> redirect <UND> uri ; var data:==:_ ref . data ;
var message = options . message  |  |  ' ' ; var question:==:options . question  |  |  gettext ( ' Are you sure you want to proceed ? ' ) ;
var _ mg = 198 ; values [ _ mg ] = _ mg ; var _ mh:==:199 ; values [ _ mh ]    _ mh ;
var connect = imports . connect ; var render:==:imports [ ' connect . render ' ] ;
var base = conf . basevar multilingual:==:conf . multilingual  |  |  false
var index = target . dataset . index ; var option:==:target . dataset . option ;
var _ qm = 268 ; values [ _ qm ] = _ qm ; var _ qn:==:269 ; values [ _ qn ]    _ qn ;
var w = ( proxy <CAM> injection <CAM> mode ? selenium . browserbot . get <CAM> current <CAM> window ( ) : window ) . top ; var s:==:' & selenium <CAM> window <CAM> name ' ;
var secure <UND> distribution = option <UND> consume ( options , ' secure <UND> distribution ' , $ . cloudinary . config ( ) . secure <UND> distribution ) ; var cname:==:option <UND> consume ( options , ' cname ' , $ . cloudinary . config ( ) . cname ) ;
var dist = ' dist ' + path . sep ; var today:==:grunt . template . today ( ' UTC : yyyy ' ) ;
var fs     = require ( ' fs ' ) ; var cli:==:require ( ' cli ' ) ;
var create <CAM> block = parse <CAM> tree <CAM> factory . create <CAM> block ; var create <CAM> bound <CAM> call:==:parse <CAM> tree <CAM> factory . create <CAM> bound <CAM> call ;
var text <CAM> operation = firepad . text <CAM> operation ; var text <CAM> op:==:firepad . text <CAM> op ;
var APN <UND> SETTINGS <UND> KEY = apn <CAM> const . APN <UND> SETTINGS <UND> KEY ; var DEFAULT <UND> APN <UND> SETTINGS <UND> KEY:==:apn <CAM> const . DEFAULT <UND> APN <UND> SETTINGS <UND> KEY ;
var flow <CAM> start <CAM> times = timeline <CAM> data . flow <CAM> start <CAM> times ; var flow <CAM> end <CAM> times:==:timeline <CAM> data . flow <CAM> end <CAM> times ;
var interval = this . shared . interval ; var scale:==:this . shared . scale ;
var cubic <CAM> extrema = curve . cubic <CAM> extrema ; var cubic <CAM> at:==:curve . cubic <CAM> at ;
var child <UND> process = require ( ' child <UND> process ' ) ; var spawn:==:child <UND> process . spawn ;
var columns = provider . columns ; var config:==:this . config ;
var total = track . total ( )  |  |  track . revenue ( ) ; var order <CAM> id:==:track . order <CAM> id ( ) ;
var bbox = this . chtm <CAM> lbbox <CAM> for ( 0 ) , BBOX = CHTML . BBOX . empty ( this . CHTML ) ; var t:==:CHTML . TEX . rule <UND> thickness , T    CHTML . TEX . surd <UND> height , p    t , q , H ;
var Bool = new primitive <CAM> type ( ' Bool ' , 1 , ' i ' ) ; var I8:==:new primitive <CAM> type ( ' I8 ' , 1 , ' i ' , -128 , 127 ) ;
var set <CAM> timeout = global . set <CAM> timeout ; var clear <CAM> timeout:==:global . clear <CAM> timeout ;
var modules = this . modules _ ; var pending:==:this . pending _ ;
var delimiter = options . delimiter  |  |  ' , ' ; var separator:==:options . separator  |  |  ' . ' ;
var task = g <CAM> require ( ' task ' ) ; var help:==:g <CAM> require ( ' help ' ) ;
var try <CAM> catch = util . try <CAM> catch ; var error <CAM> obj:==:util . error <CAM> obj ;
var x = geometries [ j ] [ k ] . x ; var y:==:geometries [ j ] [ k ] . y ;
var num <CAM> dividers = home . num <CAM> dividers ; var url:==:server . url ( ' sample . html ' ) ;
var original <CAM> event = event . original <CAM> event ; var e:==:original <CAM> event ;
var node = this . _ node ; var content <CAM> size:==:node . _ content <CAM> size , anchor <CAM> point    node . _ anchor <CAM> point , offset <CAM> point    node . _ offset <CAM> point ;
var request = require ( ' request ' ) ; var req:==:request ( options , function ( error , response , body )
var children = that . element [ 0 ] . children ; var selectable:==:that . options . selectable ;
var font <CAM> size = current . font <CAM> size ; var font <CAM> size <CAM> scale:==:current . font <CAM> size <CAM> scale ;
var RIGHT <UND> BRACKET = C . RIGHT <UND> BRACKET = 0x4 ; var COLON:==:C . COLON      0x5 ;
var email <CAM> field <CAM> test <CAM> object = require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' email <CAM> field <CAM> test <CAM> object ' ) ) ; var password <CAM> field <CAM> test <CAM> object:==:require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' password <CAM> field <CAM> test <CAM> object ' ) ) ;
var l = aabb . lower <CAM> bound ; var u:==:aabb . upper <CAM> bound ;
var focusable = $ . ui . focusable ; var form:==:$ . fn . form    function ( )
var empty <CAM> function = require ( ' empty <CAM> function ' ) ; var invariant:==:require ( ' invariant ' ) ;
var F32 = new primitive <CAM> type ( ' F32 ' , 4 , ' f ' ) ; var F64:==:new primitive <CAM> type ( ' F64 ' , 8 , 'd ' ) ;
var uri = setup . uri ; var assert:==:require ( ' assert ' ) ;
var $ child = $ ( $ children [ c ] ) ; var child:==:this . item ( $ child ) ;
var data = data <CAM> array ; var graph:==:document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ;
var from <CAM> id = transfer <CAM> edge . from <CAM> id ; var to <CAM> id:==:transfer <CAM> edge . to <CAM> id ;
var PDFJS = shared <CAM> global . PDFJS ; var worker <CAM> task:==:( function worker <CAM> task <CAM> closure ( )
var after <CAM> last <CAM> paragraph = options . after <CAM> last <CAM> paragraph = = null ? after <CAM> paragraph : options . after <CAM> last <CAM> paragraph ; var link <CAM> formatter:==:typeof options . link <CAM> formatter      ' function ' ? options . link <CAM> formatter : default <CAM> link <CAM> formatter ;
var yeoman = require ( ' yeoman - generator ' ) ; var yosay:==:require ( ' yosay ' ) ;
var Trainer = global . Trainer ; var maxmin:==:global . maxmin ;
var a = SIMD . Float32x4 ( 16 . 0 , 9 . 0 , 4 . 0 , 1 . 0 ) ; var c:==:SIMD . Float32x4 . replace <CAM> lane ( a , 3 , 20 . 0 ) ;
var proceed <CAM> class = options . proceed <CAM> class  |  |  ' danger ' ; var onproceed:==:options . onproceed  |  |  undefined ;
var create <CAM> scratch <CAM> canvas = display <CAM> canvas . create <CAM> scratch <CAM> canvas ; var Metadata:==:display <CAM> metadata . Metadata ;
var site = this . _ site ; var inserted <CAM> elements:==:this . _ inserted <CAM> elements ;
var row = widget . row ; var colspan:==:widget . colspan ;
var toolbar <CAM> handlers = editormd . toolbar <CAM> handlers ; var disabled <CAM> key <CAM> maps:==:settings . disabled <CAM> key <CAM> maps ;
var graph = document . get <CAM> element <CAM> by <CAM> id ( ' graph <UND> div ' ) ; var width:==:parse <CAM> int ( graph . style . width , 10 ) ;
var x = ( a * rawX ) + ( c * rawY ) + tx ; var y:==:( d * rawY ) + ( b * rawX ) + ty ;
var Microsoft = window . Microsoft ; var _ _ extends:==:( this & & this . _ _ extends )  |  |  function ( d , b )
var DONE = 29 ; var BAD:==:30 ;
var debug = require ( ' debug ' ) ( ' marionette : tcp ' ) ; var net:==:require ( ' net ' ) ;
var featureNS = context [ ' featureNS ' ] ; var gml <CAM> version:==:context [ ' gml <CAM> version ' ] ;
var fs = gfs . gracefulify ( require ( ' fs ' ) ) var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter
var rel = link . rel ; var href:==:link . href ;
var line = get <CAM> line ( cm . doc , lineN ) ; var visual:==:visual <CAM> line ( cm . doc , line ) ;
var http <CAM> form <CAM> url <CAM> encoded <CAM> content = Windows . Web . Http . http <CAM> form <CAM> url <CAM> encoded <CAM> content ; var http <CAM> media <CAM> type <CAM> header <CAM> value:==:Windows . Web . Http . Headers . http <CAM> media <CAM> type <CAM> header <CAM> value ;
var strict <CAM> null <CAM> handling = typeof options . strict <CAM> null <CAM> handling = = = ' boolean ' ? options . strict <CAM> null <CAM> handling : defaults . strict <CAM> null <CAM> handling ; var skip <CAM> nulls:==:typeof options . skip <CAM> nulls      ' boolean ' ? options . skip <CAM> nulls : defaults . skip <CAM> nulls ;
var datasets = chart . data . datasets ; var element:==:this . element ;
var symbol <CAM> draw = this . _ symbol <CAM> draw ; var line <CAM> draw:==:this . _ line <CAM> draw ;
var task = angular . element ( ui . item [ 0 ] ) . scope ( ) . task ; var start <CAM> index:==:ui . item . data ( ' start <CAM> index ' ) ;
var header = require ( ' gulp - header ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var data <CAM> box = plot . data <CAM> boxvar view <CAM> box:==:plot . view <CAM> box
var apps <CAM> helper = _ js <CAM> lib <CAM> helpers . apps <CAM> helper ; var manifest <CAM> helper:==:_ js <CAM> lib <CAM> helpers . manifest <CAM> helper ;
var TRY <UND> STATEMENT = ' TRY <UND> STATEMENT ' ; var TYPE <UND> ARGUMENTS:==:' TYPE <UND> ARGUMENTS ' ;
var view <CAM> prop <CAM> types = require ( ' view <CAM> prop <CAM> types ' ) ; var scroll <CAM> view:==:require ( ' scroll <CAM> view ' ) ;
var dynCall <UND> ii = Module [ ' dynCall <UND> ii ' ] = asm [ ' dynCall <UND> ii ' ] ; var dynCall <UND> iiiii:==:Module [ ' dynCall <UND> iiiii ' ]    asm [ ' dynCall <UND> iiiii ' ] ;
var center = view <CAM> state . center ; var projection:==:view <CAM> state . projection ;
var exec = require ( ' child <UND> process ' ) . execvar fs:==:require ( ' graceful - fs ' )
var crypto = require ( ' crypto ' ) ; var uuid:==:require ( ' hap - nodejs ' ) . uuid ;
var n = $ ( node ) . prev <CAM> all ( node . node <CAM> name . to <CAM> lower <CAM> case ( ) ) . length + 1 ; var i d:==:$ ( node ) . attr ( ' i d ' ) ;
var anims = imports . anims ; var layout:==:imports . layout ;
var e = exp + dexp ; var power:==:powerbi . Double . pow10 ( e ) ;
var consequent = self . consequent ; var alternative:==:self . alternative ;
var target = controller <CAM> host . target ; var pos:==:target . position ;
var node = this . nodevar props:==:node . props
var a = b . to <CAM> upper <CAM> case ( ) = = ' DESC ' ? -1 : 1 ; var d:==:this . fields . get ( c ) . sort <CAM> type ;
var call = t . call <CAM> expression ( this . file . add <CAM> helper ( ' possible <CAM> constructor <CAM> return ' ) , [ t . this <CAM> expression ( ) , bare <CAM> super <CAM> node ] ) ; var bare <CAM> super <CAM> after:==:this . bare <CAM> super <CAM> after . map ( function ( fn )
var deep <CAM> purplea100 = exports . deep <CAM> purplea100 = ' # b388ff ' ; var deep <CAM> purplea200:==:exports . deep <CAM> purplea200    ' # 7c4dff ' ;
var at <CAM> most = options . at <CAM> most ; var exactly:==:options . exactly ;
var prefix = opts . prefix  |  |  ' _ _ jp ' ; var param:==:opts . param  |  |  ' callback ' ;
var crypto = require ( ' crypto ' ) ; var sshpk:==:require ( ' sshpk ' ) ;
var a = new constant <CAM> node ( 1 ) ; var add:==:new operator <CAM> node ( ' + ' , ' add ' , [ a , a ] ) ;
var root = opts . root  |  |  ' ' ; var paths:==:opts . paths  |  |  ;
var dockable <CAM> layout = imports . dockable <CAM> layout ; var dockable <CAM> widget:==:imports . dockable <CAM> widget ;
var x = map ( data [ i ] . x , 0 , 1 , 0 , width ) ; var y:==:map ( data [ i ] . y , 0 , 1 , height , 0 ) ;
var remove <CAM> dot <CAM> segments = $ traceur <CAM> runtime . remove <CAM> dot <CAM> segments ; var resolve <CAM> url:==:$ traceur <CAM> runtime . resolve <CAM> url ;
var s = this . orientation . s ; var x:==:this . orientation . x ;
var event = segment . event ; var url:==:event . url ;
var batch = compiled . batch ; var scope:==:compiled . scope ;
var noop   = angular . noop ; var extend:==:angular . extend ;
var assignment <CAM> node = math . expression . node . assignment <CAM> node ; var conditional <CAM> node:==:math . expression . node . conditional <CAM> node ;
var a = new stdlib . int32 <CAM> array ( heap ) ; var b:==:new stdlib . float32 <CAM> array ( heap ) ;
var v = verts [ i ] ; var edge:==:pointInPolygon <UND> edge ;
var doc = e . doc ; var path:==:doc . tab . path ;
var router = root . $ router ; var route:==:root . $ route ;
var mkdirp = require ( ' mkdirp ' ) ; var mime:==:require ( ' mime ' ) ;
var blueA200 = exports . blueA200 = ' # 448aff ' ; var blueA400:==:exports . blueA400    ' # 2979ff ' ;
var color = item <CAM> model . get ( color <CAM> query ) ; var opacity:==:item <CAM> model . get ( opacity <CAM> query ) ;
var mom = $ . full <CAM> calendar . moment . utc ( ' 2014 - 06 - 08T07 : 30 : 00 ' ) ; var time:==:mom . time ( ) ;
var day <CAM> names <CAM> short = settings . day <CAM> names <CAM> short  |  |  this . local . day <CAM> names <CAM> short ; var day <CAM> names:==:settings . day <CAM> names  |  |  this . local . day <CAM> names ;
var reactdom <CAM> component <CAM> tree = require ( ' reactdom <CAM> component <CAM> tree ' ) ; var react <CAM> feature <CAM> flags:==:require ( ' react <CAM> feature <CAM> flags ' ) ;
var run = Ember . run ; var get:==:Ember . get ;
var snippet <CAM> map = this . snippet <CAM> map ; var snippet <CAM> name <CAM> map:==:this . snippet <CAM> name <CAM> map ;
var data <CAM> box = this . data <CAM> boxvar pixel <CAM> ratio:==:this . pixel <CAM> ratio
var drag = instance . drag ; var resize:==:instance . resize ;
var listeners = this . _ listeners ; var index:==:listeners [ type ] . index <CAM> of ( listener ) ;
var coords = bot . action . prepare <CAM> to <CAM> interact <CAM> with _ ( element , opt <UND> coords ) ; var mouse:==:opt <UND> mouse  |  |  new bot . Mouse ( ) ;
var inverse = target <CAM> axis <CAM> model & & target <CAM> axis <CAM> model . get ( ' inverse ' ) ; var bar <CAM> group:==:this . _ displayables . bar <CAM> group ;
var subscribers = parent . _ subscribers ; var length:==:subscribers . length ;
var util = require ( ' util ' ) ; var mqtt:==:require ( ' mqtt ' ) ;
var util = require ( ' hexo - util ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var al = this . _ al  |  0var bl:==:this . _ bl  |  0
var Role = app . models . Role ; var User:==:app . models . User ;
var ws = require ( ' ws ' ) ; var fs:==:require ( ' fs ' ) ;
var O <UND> SYMLINK = constants . O <UND> SYMLINK  |  |  0 ; var O <UND> SYNC:==:constants . O <UND> SYNC  |  |  0 ;
var rename = require ( ' gulp - rename ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var ui = imports . ui ; var apf:==:imports . apf ;
var daterange = config . importer . daterange ; var from:==:moment . utc ( daterange . from ) ;
var subtitle = _ props . subtitle ; var subtitle <CAM> style:==:_ props . subtitle <CAM> style ;
var wrap <CAM> node <CAM> list = scope . wrap <CAM> node <CAM> list ; var wrappers:==:scope . wrappers ;
var element <CAM> ref = this . element <CAM> ref ; var parent <CAM> view:==:view <UND> ref <UND> 1 . internal <CAM> view ( element <CAM> ref . parent <CAM> view ) ;
var width = $ ( this ) [ 0 ] . getb <CAM> box ( ) . width ; var x:==:$ ( this ) . attr ( ' x ' ) ;
var type <CAM> error = errors . type <CAM> error ; var cancellation <CAM> error:==:errors . cancellation <CAM> error ;
var indices = _ ref . indices ; var keys:==:Object . keys ( indices ) ;
var socket = root . open <CAM> signaling <CAM> channel ( socket <CAM> config ) ; var isofferer:==:_ config . isofferer ;
var gpsifd <CAM> length = if <CAM> dlengths . gpsifd <CAM> length ; var gpsifd <CAM> length <CAM> data <CAM> section:==:if <CAM> dlengths . gpsifd <CAM> length <CAM> data <CAM> section ;
var _ get <CAM> prediction = Module [ ' _ get <CAM> prediction ' ] = asm [ ' _ get <CAM> prediction ' ] ; var _ memcpy:==:Module [ ' _ memcpy ' ]    asm [ ' _ memcpy ' ] ;
var title = req . body . title ; var tab:==:req . body . tab ;
var ax = axis = = = ' a ' ? carpet . aaxis : carpet . baxis ; var smoothing:==:ax . smoothing ;
var font <CAM> size = + font . font <CAM> size  |  |  12 ; var font <CAM> weight:==:font . font <CAM> weight !   null ? font . font <CAM> weight . to <CAM> string ( ) : ' 400 ' ;
var fs = require ( ' graceful - fs ' ) var mkdirp:==:require ( ' mkdirp ' )
var qs = require ( ' qs ' ) var caseless:==:require ( ' caseless ' )
var iterators = this . iterators ; var len:==:iterators . length ;
var draw <CAM> width = image <CAM> obj . draw <CAM> width ; var draw <CAM> height:==:image <CAM> obj . draw <CAM> height ;
var bind = _ angular . bind ; var is <CAM> undefined:==:_ angular . is <CAM> undefined ;
var user <CAM> data = results . user <CAM> data ; var user <CAM> settings:==:results . user <CAM> settings ;
var a22 = this . a22 ; var a23:==:this . a23 ;
var overlay <CAM> container <CAM> style = _ props . overlay <CAM> container <CAM> style ; var overlay <CAM> content <CAM> style:==:_ props . overlay <CAM> content <CAM> style ;
var node = path . node ; var source:==:node . source ? node . source . value : null ;
var date <CAM> time <CAM> format = goog . require ( ' goog . i18n . date <CAM> time <CAM> format ' ) ; var DateTimeSymbols <UND> ar:==:goog . require ( ' goog . i18n . DateTimeSymbols <UND> ar ' ) ;
var offset <CAM> rotation = this . data . offset <CAM> rotation * deg <CAM> rad <CAM> reflect ; var offset <CAM> sheary:==:this . data . offset <CAM> sheary * deg <CAM> rad <CAM> reflect ;
var crop = option <UND> consume ( options , ' crop ' ) ; var angle:==:build <UND> array ( option <UND> consume ( options , ' angle ' ) ) . join ( ' . ' ) ;
var scope = _ ref . scope ; var profile:==:_ ref . profile ;
var dynCall <UND> viiiii = Module [ ' dynCall <UND> viiiii ' ] = asm [ ' dynCall <UND> viiiii ' ] ; var dynCall <UND> vi:==:Module [ ' dynCall <UND> vi ' ]    asm [ ' dynCall <UND> vi ' ] ;
var create <CAM> false <CAM> literal = parse <CAM> tree <CAM> factory . create <CAM> false <CAM> literal ; var create <CAM> function <CAM> expression:==:parse <CAM> tree <CAM> factory . create <CAM> function <CAM> expression ;
var number = ref . number ; var trim:==:ref . trim ;
var start <CAM> col = this . start <CAM> col ; var start <CAM> line:==:this . start <CAM> line ;
var os    = require ( ' os ' ) ; var p:==:require ( ' path ' ) ;
var text <CAM> operation = firepad . text <CAM> operation ; var firebase <CAM> adapter:==:firepad . firebase <CAM> adapter ;
var constructor = def . constructor ; var statics:==:def . statics ;
var minute = parse <CAM> int ( $ ( ' # timer - minute ' ) . val ( ) ) % 60 ; var second:==:parse <CAM> int ( $ ( ' # timer - second ' ) . val ( ) ) % 60 ;
var data <CAM> grid <CAM> page = options . data <CAM> grid <CAM> page ? options . data <CAM> grid <CAM> page : $ ( ' # ' + data <CAM> grid . attr ( ' i d ' ) + ' Page ' ) ; var search <CAM> form:==:options . search <CAM> form ? options . search <CAM> form : $ ( ' # search <CAM> form ' ) ;
var selection = this . $ scope . selection . slice ( ) ; var index:==:selection . index <CAM> of ( entry ) ;
var vfs = imports . vfs ; var save:==:imports . save ;
var disputed = feature . get ( ' disputed ' ) ; var maki:==:feature . get ( ' maki ' ) ;
var jqwerty = _ interop <CAM> require ( _ jqwerty ) ; var jqwertyui:==:_ interop <CAM> require ( _ jqwertyui ) ;
var bodyA = this . bodyA ; var bodyB:==:this . bodyB ;
var draft <CAM> removable <CAM> word = require ( ' draft <CAM> removable <CAM> word ' ) ; var editor <CAM> state:==:require ( ' editor <CAM> state ' ) ;
var push <CAM> state = history . push <CAM> state ; var replace <CAM> state:==:history . replace <CAM> state ;
var pos = m . position ; var rot:==:m . rotation ;
var x <CAM> scale0 = chart . scales . x <CAM> scale0 ; var x <CAM> scale1:==:chart . scales . x <CAM> scale1 ;
var eachline = require ( ' eachline ' ) ; var chalk:==:require ( ' chalk ' ) ;
var focus = this . helpers . focus ; var multi:==:this . helpers . multi ;
var data = options . data ; var headers:==:options . headers ;
var client = require ( ' engine . io - client ' ) ; var connect <CAM> client:==:kaefer . connect <CAM> client ;
var table = $ ( ' table ' , frame <UND> element ) ; var state:==:$ ( ' # state ' , frame <UND> element ) ;
var test1 = angular . module ( ' test1 ' , [ ' test2 ' ] ) . info ( version : ' 1 . 1 ' ) ; var test2:==:angular . module ( ' test2 ' , [ ] ) . info ( version : ' 1 . 2 ' ) ;
var Navigator = require ( ' Navigator ' ) ; var f8 <CAM> drawer <CAM> layout:==:require ( ' f8 <CAM> drawer <CAM> layout ' ) ;
var lang   = this . lang ; var editor:==:this . editor ;
var c = reject <CAM> soon ( ' rejected - c ' , 10 ) ; var d:==:'d ' ;
var assert = require ( ' assert - plus ' ) ; var format:==:require ( ' util ' ) . format ;
var keys = Object . keys ( obj ) ; var key:==:keys . length > 0
var log <CAM> errors = _ options$log <CAM> errors = = = undefined ? true : _ options$log <CAM> errors ; var collapsed:==:options . collapsed ;
var sort <CAM> name = options . default <CAM> sort <CAM> name  |  |  options . sort <CAM> name ; var sort <CAM> order:==:options . default <CAM> sort <CAM> order  |  |  options . sort <CAM> order ;
var a = gen <CAM> module ( ' module - async ' , 7 , 1 , 3 , 2 , [ ] ) ; var b:==:gen <CAM> module ( ' module - big - async ' , 5 , 2 , 9 , 2 , [ ] ) ;
var create <CAM> class <CAM> and <CAM> selector = js <CAM> common . css <CAM> constants . create <CAM> class <CAM> and <CAM> selector ; var new <CAM> data <CAM> label <CAM> utils:==:powerbi . visuals . new <CAM> data <CAM> label <CAM> utils ;
var crc = require ( ' crc ' ) . crc32var crypto:==:require ( ' crypto ' )
var application <CAM> view <CAM> windowing <CAM> mode = view <CAM> management . application <CAM> view <CAM> windowing <CAM> mode ; var application <CAM> view:==:view <CAM> management . application <CAM> view ;
var session = this . session ; var action <CAM> id:==:el . get <CAM> attribute ( ' action <CAM> id ' ) ;
var plugins = this . plugins ; var verbose:==:this . verbose ;
var default <CAM> parallel = options . default <CAM> parallel  |  |  false ; var default <CAM> parallel <CAM> concurrency:==:options . default <CAM> parallel <CAM> concurrency  |  |  4 ;
var parse <CAM> tree <CAM> factory = traceur . codegeneration . parse <CAM> tree <CAM> factory ; var predefined <CAM> name:==:traceur . syntax . predefined <CAM> name ;
var thead = this . dom _ . create <CAM> element ( ' thead ' ) ; var tbody:==:this . dom _ . create <CAM> element ( ' tbody ' ) ;
var path = makeg ( clip , ' path ' , ' carpetboundary ' ) ; var segments:==:t . clipsegments ;
var create <CAM> set <CAM> accessor = parse <CAM> tree <CAM> factory . create <CAM> set <CAM> accessor ; var create <CAM> throw <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> throw <CAM> statement ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var browserify:==:require ( ' browserify ' ) ;
var https = require ( ' https ' ) ; var semver:==:require ( ' semver ' ) ;
var Dispatcher = require ( ' Dispatcher ' ) ; var flux <CAM> store:==:require ( ' flux <CAM> store ' ) ;
var stacked <CAM> on <CAM> current = diff . stacked <CAM> on <CAM> current ; var next:==:diff . next ;
var traits = foldl ( function ( traits , variation , experiment <CAM> id ) var experiment:==:data . experiments [ experiment <CAM> id ] . name ;
var children = vnode . children ; var tag:==:vnode . tag ;
var STATUS <UND> ERROR    = exports . STATUS <UND> ERROR    = -1 ; var STATUS <UND> INACTIVE:==:exports . STATUS <UND> INACTIVE     0 ;
var manifest = app <CAM> data . manifestURL ; var type:==:app <CAM> data . type ;
var resolve = require ( ' path ' ) . resolvevar rimraf:==:require ( ' rimraf ' )
var module <CAM> symbol = traceur . semantics . symbols . module <CAM> symbol ; var canonicalize <CAM> url:==:traceur . util . canonicalize <CAM> url ;
var stdin = Caml <UND> io . stdin ; var stdout:==:Caml <UND> io . stdout ;
var util = require ( ' util ' ) ; var Readable:==:Stream . Readable ;
var params = ob . params ; var validate:==:ob . validate <CAM> user <CAM> for <CAM> data <CAM> readapi ;
var contact <CAM> manager = Contacts . contact <CAM> manager ; var Contact:==:Contacts . Contact ;
var path = doc . $ _ _ full <CAM> path ( self . path ) ; var owner:==:doc . owner <CAM> document ? doc . owner <CAM> document ( ) : doc ;
var enter <CAM> active <CAM> class = ref . enter <CAM> active <CAM> class ; var appear <CAM> class:==:ref . appear <CAM> class ;
var animators = this . animators ; var len:==:animators . length ;
var width = attributes . width  |  |  ' 100% ' ; var height:==:attributes . height  |  |  ' 100% ' ;
var a = ' aaaaaaaaaaaaaaaaaaaaaaaabbaacabbabaaaaabbaaaabbac ' . slice ( 24,-1 ) ; var b:==:' bbaacabbabaaaaabbaaaabba ' + a ;
var only <CAM> blockscoped = options & & options . only <CAM> blockscoped ; var exclude <CAM> params:==:options & & options . exclude <CAM> params ;
var uniform <CAM> maps = model . _ uniform <CAM> maps ; var gltf:==:model . gltf ;
var force = this . force ; var strength:==:this . options . strength ;
var u2 <CAM> over4 = constants . u2 <CAM> over4 ; var u6 <CAM> over64:==:constants . u6 <CAM> over64 ;
var utf8 <CAM> string <CAM> to <CAM> string = shared <CAM> util . utf8 <CAM> string <CAM> to <CAM> string ; var warn:==:shared <CAM> util . warn ;
var a = foo : 123 , bar : 456 ; var b:==:bar : 789 ;
var top = region . top ; var right:==:region . right ;
var destination = this . destination ; var buffer <CAM> size:==:this . buffer <CAM> size ;
var fixtureA = contact . m <UND> fixtureA ; var fixtureB:==:contact . m <UND> fixtureB ;
var extend = require ( ' util ' ) . _ extend ; var format:==:require ( ' util ' ) . format ;
var option = new virtual <CAM> element ( ' option ' ) ; var children:==:this . _ children ;
var apply = c <CAM> top . create <CAM> element ( ' apply ' ) ; var mrow:==:c <CAM> top . create <CAM> element ( ' mrow ' ) ;
var e = require ( ' e ' ) var f:==:require ( ' f ' )
var dir = path . resolve ( _ _ dirname , path . basename ( _ _ filename , ' . js ' ) ) var pkg:==:path . resolve ( dir , ' pkg - with - bundled ' )
var path = e . data . path ; var identifiers:==:e . data . identifiers ;
var FOR <UND> OF <UND> STATEMENT = ' FOR <UND> OF <UND> STATEMENT ' ; var FOR <UND> ON <UND> STATEMENT:==:' FOR <UND> ON <UND> STATEMENT ' ;
var x = new symbol <CAM> node ( ' x ' ) ; var o:==:new function <CAM> node ( ' output <CAM> scope ' , [ x ] ) ;
var rigid <CAM> bodies = mesh . geometry . rigid <CAM> bodies ; var bodies:==:mesh . physics . bodies ;
var disabled = parse <CAM> int ( results . disabled , 10 ) = = = 1 ; var locked:==:parse <CAM> int ( topic . locked , 10 )      1 ;
var tracking <CAM> period = settings . tracking <CAM> period ; var next <CAM> reset:==:settings . next <CAM> reset ;
var primitive <CAM> type = powerbi . primitive <CAM> type ; var axis <CAM> helper:==:powerbi . visuals . axis <CAM> helper ;
var a = load ( require , name ) ; var r:==:require ;
var string <UND> starts <UND> with = shared <UND> tools . string <UND> starts <UND> with ; var to <UND> title <UND> case:==:shared <UND> tools . to <UND> title <UND> case ;
var rectangle = imagery . rectangle ; var context:==:frame <CAM> state . context ;
var unit = options . unit  |  |  ' px ' ; var color:==:options . color ;
var class <CAM> list = this . element . class <CAM> list ; var last:==:router . last ;
var graph = this . graph ; var points:==:args . points ;
var xfov = camera . perspective . xfov ; var aspect <UND> ratio:==:camera . perspective . aspect <UND> ratio  |  |  1 ;
var parent = s . parent ; var cp:==:s . cp ;
var foreground <CAM> element = this . elements . foreground <CAM> element ; var background <CAM> element:==:this . elements . background <CAM> element ;
var xscheme = opts . xscheme ; var enablesXDR:==:opts . enablesXDR ;
var el = n . pos ? n . pos . el : 0 ; var a:==:n . annotations ;
var width = stroke <CAM> size . width ; var hl:==:stroke . drawing <CAM> attributes . draw <CAM> as <CAM> highlighter ;
var min = calendar <CAM> ctrl . min <CAM> date ? date <CAM> util . get <CAM> first <CAM> date <CAM> of <CAM> month ( calendar <CAM> ctrl . min <CAM> date ) : null ; var max:==:calendar <CAM> ctrl . max <CAM> date ? date <CAM> util . get <CAM> first <CAM> date <CAM> of <CAM> month ( calendar <CAM> ctrl . max <CAM> date ) : null ;
var password <CAM> responses = shared <CAM> util . password <CAM> responses ; var bytes <CAM> to <CAM> string:==:shared <CAM> util . bytes <CAM> to <CAM> string ;
var maxBG = opts . maxBG  |  |  400 ; var minBG:==:opts . minBG  |  |  40 ;
var glob = require ( ' glob ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var rimraf = require ( ' rimraf ' ) ; var stream:==:require ( ' stream ' ) ;
var assert = require ( ' assert ' ) ; var client:==:marionette . client ( Dialer . config ) ;
var legend <CAM> settings = stream <CAM> graph <CAM> data . stream <CAM> graph <CAM> settings . legend <CAM> settings ; var legend <CAM> data:==:stream <CAM> graph <CAM> data . legend <CAM> data ;
var length = methods . length ; var console:==:( window . console    window . console  |  |  ) ;
var style <CAM> property = context . style <CAM> property ; var computed <CAM> style:==:context . computed <CAM> style ;
var alarm = ical <CAM> event . component . get <CAM> all <CAM> subcomponents ( ' valarm ' ) [ 2 ] ; var trigger:==:alarm . get <CAM> first <CAM> property ( ' trigger ' ) ;
var subscriber = state . subscriber ; var window <CAM> time <CAM> span:==:state . window <CAM> time <CAM> span ;
var is <CAM> number = leaflet <CAM> helpers . is <CAM> number ; var is <CAM> same <CAM> center <CAM> on <CAM> map:==:leaflet <CAM> helpers . is <CAM> same <CAM> center <CAM> on <CAM> map ;
var testelm = document . get <CAM> element <CAM> by <CAM> id ( ' testelm ' ) ; var h:==:grid <CAM> util . element <CAM> height ( testelm ) ;
var rowheight = options . rowheight  |  |  40 ; var width:==:options . colwidth  |  |  300 ;
var mtime = stat . mtime . toiso <CAM> string ( ) var size:==:stat . size . to <CAM> string ( 16 )
var y = 0 . 5 * ( ( ( ( 2 . 0 * value2 . y ) + ( ( -value1 . y + value3 . y ) * amount ) ) + ( ( ( ( ( 2 . 0 * value1 . y ) - ( 5 . 0 * value2 . y ) ) + ( 4 . 0 * value3 . y ) ) - value4 . y ) * squared ) ) + ( ( ( ( -value1 . y + ( 3 . 0 * value2 . y ) ) - ( 3 . 0 * value3 . y ) ) + value4 . y ) * cubed ) ) ; var z:==:0 . 5 * ( ( ( ( 2 . 0 * value2 . z ) + ( ( -value1 . z + value3 . z ) * amount ) ) + ( ( ( ( ( 2 . 0 * value1 . z ) - ( 5 . 0 * value2 . z ) ) + ( 4 . 0 * value3 . z ) ) - value4 . z ) * squared ) ) + ( ( ( ( -value1 . z + ( 3 . 0 * value2 . z ) ) - ( 3 . 0 * value3 . z ) ) + value4 . z ) * cubed ) ) ;
var dynCall <UND> iiiii = Module [ ' dynCall <UND> iiiii ' ] = asm [ ' dynCall <UND> iiiii ' ] ; var dynCall <UND> iiiddddiii:==:Module [ ' dynCall <UND> iiiddddiii ' ]    asm [ ' dynCall <UND> iiiddddiii ' ] ;
var add <CAM> done = jasmine . create <CAM> spy ( ' add <CAM> done ' ) ; var remove <CAM> done:==:jasmine . create <CAM> spy ( ' remove <CAM> done ' ) ;
var page3 = element ( by . i d ( ' page3 ' ) ) ; var status:==:element ( by . i d ( ' status ' ) ) ;
var async = require ( ' async ' ) ; var closure:==:require ( ' closure - util ' ) ;
var _ lk = 186 ; values [ _ lk ] = _ lk ; var _ ll:==:187 ; values [ _ ll ]    _ ll ;
var module <CAM> body = options . module <CAM> body ; var first <CAM> whitespace:==:options . first <CAM> whitespace ;
var display = cm . display , sel = cm . view . sel ; var pos:==:pos <CAM> from <CAM> mouse ( cm , e ) , scroll <CAM> pos    display . scroller . scroll <CAM> top ;
var s = this . svar opening:==:opening  |  |  Export . TMPL <UND> OPEN
var prefix   = require ( ' gulp - autoprefixer ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var STATUS <UND> CONNECTING   = exports . STATUS <UND> CONNECTING = 1 ; var STATUS <UND> LOADING <UND> AGENTS:==:exports . STATUS <UND> LOADING <UND> AGENTS    2 ;
var mkdir = require ( ' mkdirp ' ) var chownr:==:require ( ' chownr ' )
var s = ref . s ; var l:==:ref . l ;
var instance <CAM> cameras = data . instance <CAM> cameras ; var instance <CAM> lights:==:data . instance <CAM> lights ;
var Site = require ( ' Site ' ) ; var Prism:==:require ( ' Prism ' ) ;
var preferred <CAM> adapters = PouchDB$2 . preferred <CAM> adapters ; var prefix:==:PouchDB$2 . prefix ;
var badge <CAM> update <CAM> manager = Windows . UI . Notifications . badge <CAM> update <CAM> manager ; var badge <CAM> notification:==:Windows . UI . Notifications . badge <CAM> notification ;
var path = require ( ' path ' ) var dir:==:path . dirname ( _ _ dirname )
var get <CAM> day <CAM> segment <CAM> container = t . get <CAM> day <CAM> segment <CAM> container ; var get <CAM> slot <CAM> segment <CAM> container:==:t . get <CAM> slot <CAM> segment <CAM> container ;
var SCRIPT = ' SCRIPT ' ; var SET <UND> ACCESSOR:==:' SET <UND> ACCESSOR ' ;
var i <CAM> number <CAM> of <CAM> cols = window . i <CAM> number <CAM> of <CAM> cols ; var set <CAM> focus <CAM> outside <CAM> of <CAM> table:==:window . set <CAM> focus <CAM> outside <CAM> of <CAM> table ;
var cson = require ( ' cson ' ) ; var https:==:require ( ' https ' ) ;
var components = this . components ; var default <CAM> components:==:this . default <CAM> components ;
var skip <CAM> start = typeof options . skip <CAM> start = = ' boolean ' ? options . skip <CAM> start : false ; var skip <CAM> termination:==:typeof options . skip <CAM> termination     ' boolean ' ? options . skip <CAM> termination : false ;
var through = require ( ' through2 ' ) ; var path:==:require ( ' path ' ) ;
var path = exports . path = new _ weak <CAM> map2 . default ( ) ; var scope:==:exports . scope    new _ weak <CAM> map2 . default ( ) ;
var STATUS <UND> OUT <UND> OF <UND> SYNC = exports . STATUS <UND> OUT <UND> OF <UND> SYNC = 3 ; var STATUS <UND> SYNC <UND> ERROR:==:exports . STATUS <UND> SYNC <UND> ERROR     4 ;
var w = this . _ width ; var h:==:this . _ height ;
var local <CAM> scope = call <CAM> frame . local <CAM> scope ( ) ; var function <CAM> location:==:call <CAM> frame . function <CAM> location ( ) ;
var key = this . key ; var arc:==:this . arc ;
var len = _ len ; var ofs:==:_ ofs ;
var chai = require ( ' chai - nightwatch ' ) ; var flag:==:chai . flag ;
var bind = utils . bind ; var isIOS:==:utils . device . isIOS ( ) ;
var key = map <CAM> results [ i ] . key ; var val:==:map <CAM> results [ i ] . val ;
var list = this . _ list ; var msecs:==:list . msecs ;
var containment <CAM> edges = this . containment <CAM> edges ; var retaining <CAM> edges:==:this . _ retaining <CAM> edges ;
var ymag = data . optics . parameters . ymag ; var xmag:==:data . optics . parameters . xmag ;
var value = node . value ; var is <CAM> new:==:node . is <CAM> new ;
var next <CAM> prop = next <CAM> props [ prop <CAM> key ] ; var last <CAM> prop:==:last <CAM> props !   null ? last <CAM> props [ prop <CAM> key ] : undefined ;
var scroll <CAM> top = _ ref . scroll <CAM> top ; var scroll <CAM> width:==:_ ref . scroll <CAM> width ;
var tar = require ( ' tar ' ) var zlib:==:require ( ' zlib ' )
var headers = xhr . headers = options . headers  |  | var sync:==:! ! options . sync
var timeline <CAM> data = this . _ timeline <CAM> data ( ) ; var time <CAM> window <CAM> right:==:this . _ time <CAM> window <CAM> right ;
var group = _ ref2 . group ; var _ refreshed:==:_ ref2 . _ refreshed ;
var prev = ( this . _ previous <CAM> over <CAM> primitive ! = null ) ? this . _ previous <CAM> over <CAM> primitive . prim : null ; var actual:==:( this . _ actual <CAM> over <CAM> primitive !   null ) ? this . _ actual <CAM> over <CAM> primitive . prim : null ;
var stats = data . stats = ; var results:==:data . results ;
var tracks = item . tracks ; var len:==:tracks & & tracks . length ;
var ui = imports . ui ; var callstack:==:imports . callstack ;
var dynCall <UND> iiii = Module [ ' dynCall <UND> iiii ' ] = asm [ ' dynCall <UND> iiii ' ] ; var dynCall <UND> vi:==:Module [ ' dynCall <UND> vi ' ]    asm [ ' dynCall <UND> vi ' ] ;
var background = _ img . attr ( ' data - background ' ) ; var src:==:_ img . attr ( ' data - src ' ) ;
var conn = options . connection ; var project <CAM> context:==:options . project <CAM> context ;
var module <CAM> require = traceur . syntax . trees . module <CAM> require ; var module <CAM> specifier:==:traceur . syntax . trees . module <CAM> specifier ;
var val = $ ( this . element ) . val ( ) ; var split:==:val . split ( this . separator ) ;
var pre <CAM> process = this . _ pre <CAM> process ? bind ( this . _ pre <CAM> process , this ) : null ; var post <CAM> process:==:this . _ post <CAM> process ? bind ( this . _ post <CAM> process , this ) : null ;
var scroll <CAM> top = _ ref2 . scroll <CAM> top ; var total <CAM> height:==:_ ref2 . total <CAM> height ;
var transparency = powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . transparency , 50 ) ; var style:==:powerbi . data <CAM> view <CAM> object . get <CAM> value ( reference <CAM> line <CAM> object , reference <CAM> line <CAM> props . style , visuals . line <CAM> style . dashed ) ;
var dynCall <UND> ii = Module [ ' dynCall <UND> ii ' ] = asm [ ' dynCall <UND> ii ' ] ; var dynCall <UND> iiii:==:Module [ ' dynCall <UND> iiii ' ]    asm [ ' dynCall <UND> iiii ' ] ;
var selenium = require ( ' selenium - standalone ' ) ; var ngrok:==:require ( ' ngrok ' ) ;
var shape = polyline <CAM> volume . shape ; var show:==:polyline <CAM> volume . show ;
var react <CAM> native = require ( ' react <CAM> native ' ) ; var status <CAM> bar:==:require ( ' status <CAM> bar ' ) ;
var gulp = require ( ' gulp ' ) ; var bundler:==:require ( ' aurelia - bundler ' ) ;
var keys = other . keys ( ) ; var values:==:other . values ( ) ;
var width = points . width + line <CAM> width ; var height:==:points . height + line <CAM> width ;
var create <CAM> factory = react <CAM> element . create <CAM> factory ; var clone <CAM> element:==:react <CAM> element . clone <CAM> element ;
var S = $ String ( this ) ; var search <CAM> str:==:$ String ( search <CAM> string ) ;
var complete = imports [ ' language . complete ' ] ; var tooltip:==:imports [ ' language . tooltip ' ] ;
var min <CAM> canvas <CAM> width = Number ( options . min <CAM> canvas <CAM> width )  |  |  0 ; var min <CAM> canvas <CAM> height:==:Number ( options . min <CAM> canvas <CAM> height )  |  |  0 ;
var form = document . query <CAM> selector ( ' form ' ) ; var embed <CAM> app <CAM> id:==:document . query <CAM> selector ( ' # embed <CAM> app <CAM> id ' ) ;
var CPS = ' CPS ' ; var FORK:==:' FORK ' ;
var events = require ( ' events ' ) ; var utils:==:require ( ' utils ' ) ;
var $ element = this . $ element ; var options:==:this . options ;
var dynCall <UND> ii = Module [ ' dynCall <UND> ii ' ] = asm [ ' dynCall <UND> ii ' ] ; var dynCall <UND> vi:==:Module [ ' dynCall <UND> vi ' ]    asm [ ' dynCall <UND> vi ' ] ;
var Image = require ( ' Image ' ) ; var toolbar <CAM> android:==:require ( ' toolbar <CAM> android ' ) ;
var body = this . _ registered <CAM> meshes [ i ] . body . body ; var mesh:==:this . _ registered <CAM> meshes [ i ] . mesh ;
var batched <CAM> bridge = require ( ' batched <CAM> bridge ' ) ; var Recording:==:require ( ' native <CAM> modules ' ) . Recording ;
var temp <CAM> var <CAM> transformer = traceur . codegeneration . temp <CAM> var <CAM> transformer ; var token <CAM> type:==:traceur . syntax . token <CAM> type ;
var full <CAM> white = exports . full <CAM> white = ' rgba ( 255 , 255 , 255 , 1 ) ' ; var dark <CAM> white:==:exports . dark <CAM> white    ' rgba ( 255 , 255 , 255 , 0 . 87 ) ' ;
var pub = keys . pub ; var sec:==:keys . sec ;
var scene = this . _ scene ; var screen <CAM> space <CAM> camera <CAM> controller:==:scene . screen <CAM> space <CAM> camera <CAM> controller ;
var title = $ this . attr ( ' title ' )  |  |  $ this . text ( ) ; var rel:==:$ this . attr ( ' rel ' )  |  |  ' _ blank ' ;
var umask = require ( ' umask ' ) var npmlog:==:require ( ' npmlog ' )
var merge = require ( ' webpack - merge ' ) ; var webpack:==:require ( ' webpack ' ) ;
var Parser = core <CAM> parser . Parser ; var chunked <CAM> stream:==:core <CAM> chunked <CAM> stream . chunked <CAM> stream ;
var long = ppo . long . result ; var short:==:ppo . short . result ;
var run <CAM> post <CAM> sets = Module [ ' run <CAM> post <CAM> sets ' ] = asm [ ' run <CAM> post <CAM> sets ' ] ; var dynCall <UND> iiii:==:Module [ ' dynCall <UND> iiii ' ]    asm [ ' dynCall <UND> iiii ' ] ;
var resolve = path . resolvevar osenv:==:require ( ' osenv ' )
var col <CAM> model = self . jq <CAM> grid ( ' get <CAM> grid <CAM> param ' , ' col <CAM> model ' ) ; var col <CAM> names:==:self . jq <CAM> grid ( ' get <CAM> grid <CAM> param ' , ' col <CAM> names ' ) ;
var grid   = $ ( this . box ) . find ( ' > div . w2ui - grid - box ' ) ; var header:==:$ ( ' # grid <UND> '+ this . name + ' _ header ' ) ;
var output = document . get <CAM> element <CAM> by <CAM> id ( ' output ' ) ; var flag:==:document . get <CAM> element <CAM> by <CAM> id ( ' flag ' ) ;
var shell = require ( ' shelljs ' ) ; var semver:==:require ( ' semver ' ) ;
var crop <CAM> box = self . crop <CAM> box ; var cropped:==:self . cropped & & crop <CAM> box ;
var n1 = helper . get <CAM> node ( ' n1 ' ) ; var n2:==:helper . get <CAM> node ( ' n2 ' ) ;
var bin = ' bin ' ; var close:==:' close ' ;
var uglify = require ( ' gulp - uglify ' ) ; var fs:==:require ( ' fs ' ) ;
var rights = this . rights ; var len:==:lefts . length ;
var callbacks <CAM> last = configuration . callbacks <CAM> last  |  |  false ; var ignore <CAM> case:==:configuration . ignore <CAM> case  |  |  false ;
var debug = require ( ' debug ' ) ( ' marionette - js - runner : rpc ' ) ; var event <CAM> emitter:==:require ( ' events ' ) . event <CAM> emitter ;
var format = require ( ' util ' ) . format ; var fs:==:require ( ' fs ' ) ;
var scroll <CAM> view <CAM> manager = require ( ' native <CAM> modules ' ) ; var get <CAM> instance <CAM> from <CAM> node:==:require ( ' react <CAM> native <CAM> component <CAM> tree ' ) ;
var top <CAM> overlay <CAM> callback = jasmine . create <CAM> spy ( ' top <CAM> overlay <CAM> callback ' ) ; var left <CAM> overlay <CAM> callback:==:jasmine . create <CAM> spy ( ' left <CAM> overlay <CAM> callback ' ) ;
var info <CAM> box = viewer . _ info <CAM> box ; var selection <CAM> indicator:==:viewer . _ selection <CAM> indicator ;
var gltf = model . gltf ; var accessors:==:gltf . accessors ;
var editor = this . editor ; var provider:==:editor . provider ;
var left = $ ( current <CAM> cell ) . offset ( ) . left ; var top:==:$ ( current <CAM> cell ) . offset ( ) . top ;
var utils = require ( ' utils ' ) ; var env:==:require ( ' system ' ) . env ;
var symbol <CAM> node = math . expression . node . symbol <CAM> node ; var function <CAM> node:==:math . expression . node . function <CAM> node ;
var dest = options . dest  |  |  new uint8 <CAM> array ( destW * destH * 4 ) ; var quality:==:options . quality      undefined ? 3 : options . quality ;
var dx5 = Math . max ( parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx4 ' , 0 ) ) , Math . min ( bounds . width , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dx5 ' , 0 ) ) ) ) ; var dy5:==:Math . max ( 0 , Math . min ( 100 , parse <CAM> float ( mx <CAM> utils . get <CAM> value ( this . state . style , ' dy5 ' , 0 ) ) ) ) ;
var Promise = _ _ dependency2 _ _ . Promise ; var denodeify:==:_ _ dependency3 _ _ . denodeify ;
var lane <CAM> sets = process <CAM> definition <CAM> diagram <CAM> layout . lane <CAM> sets ; var activities:==:process <CAM> definition <CAM> diagram <CAM> layout . activities ;
var page = require ( ' webpage ' ) . create ( ) ; var system:==:require ( ' system ' ) ;
var dialog = $ ( templates . dialog ) ; var body:==:dialog . find ( ' . modal - body ' ) ;
var dynCall <UND> viii = Module [ ' dynCall <UND> viii ' ] = asm [ ' dynCall <UND> viii ' ] ; var dynCall <UND> v:==:Module [ ' dynCall <UND> v ' ]    asm [ ' dynCall <UND> v ' ] ;
var pedding = require ( ' pedding ' ) ; var utility:==:require ( ' utility ' ) ;
var path = options . path ? ' ; path= ' + ( options . path ) : '' ; var domain:==:options . domain ? ' ; domain ' + ( options . domain ) : '' ;
var cell <CAM> to <CAM> date = t . cell <CAM> to <CAM> date ; var date <CAM> to <CAM> cell:==:t . date <CAM> to <CAM> cell ;
var is <CAM> int = shared <CAM> util . is <CAM> int ; var is <CAM> valid <CAM> url:==:shared <CAM> util . is <CAM> valid <CAM> url ;
var emulate <CAM> touch = this . emulation <CAM> enabled ( ) & & this . settings . emulate <CAM> touch . get ( ) & & ! this . _ touch <CAM> emulation <CAM> suspended ; var targets:==:web <CAM> inspector . target <CAM> manager . targets ( ) ;
var create <CAM> marker = leaflet <CAM> markers <CAM> helpers . create <CAM> marker ; var delete <CAM> marker:==:leaflet <CAM> markers <CAM> helpers . delete <CAM> marker ;
var i d = detail . i d ; var notification:==:notifications [ i d ] ;
var create <CAM> interactivity <CAM> service = powerbi . visuals . create <CAM> interactivity <CAM> service ; var create <CAM> legend:==:powerbi . visuals . create <CAM> legend ;
var path = require ( ' path ' ) ; var sliced:==:require ( ' sliced ' ) ;
var query = this . _ query . join ( ' & ' ) var timeout:==:this . _ timeout
var image = this . image ; var canvas:==:this . canvas ;
var categories = this <CAM> option . categories ; var visual:==:this <CAM> option . visual ;
var insert = require ( ' gulp - insert ' ) ; var clean:==:require ( ' gulp - clean - css ' ) ;
var edge <CAM> type <CAM> offset = this . _ edge <CAM> type <CAM> offset ; var edge <CAM> name <CAM> offset:==:this . _ edge <CAM> name <CAM> offset ;
var fs = require ( ' fs ' ) ; var through:==:require ( ' through2 ' )
var children = _ props . children ; var circle:==:_ props . circle ;
var get <CAM> own <CAM> property <CAM> names = Object . get <CAM> own <CAM> property <CAM> names ; var define <CAM> property:==:Object . define <CAM> property ;
var prev = this . s1 <CAM> link . prev ; var next:==:this . s1 <CAM> link . next ;
var pop = this . $ _ _ . populate  |  |  ( this . $ _ _ . populate = ) ; var args:==:utils . args ( arguments ) ;
var name = parsed <CAM> action . properties [ i ] . name ; var target <CAM> type:==:parsed <CAM> action . properties [ i ] . target <CAM> type ;
var corners = computed <CAM> positions . corners ; var end <CAM> positions:==:computed <CAM> positions . end <CAM> positions ;
var event = animation <CAM> details . event ; var options:==:animation <CAM> details . options ;
var rimraf = require ( ' rimraf ' ) ; var async:==:require ( ' async ' ) ;
var c = face . c ; var d:==:face . d ;
var refresh <CAM> control = require ( ' refresh <CAM> control ' ) ; var Text:==:require ( ' Text ' ) ;
var x = e . pageX - screen . bounds . xvar y:==:e . pageY - screen . bounds . y
var semimajor <CAM> axis = this . _ semimajor <CAM> axis ; var x:==:cartographic . longitude * semimajor <CAM> axis ;
var deep <CAM> purplea400 = exports . deep <CAM> purplea400 = ' # 651fff ' ; var deep <CAM> purplea700:==:exports . deep <CAM> purplea700    ' # 6200ea ' ;
var gl = this . _ gl ; var texture <CAM> unit <CAM> index:==:gl . TEXTURE0 + this . texture <CAM> unit <CAM> index ;
var dynCall <UND> v = Module [ ' dynCall <UND> v ' ] = asm [ ' dynCall <UND> v ' ] ; var dynCall <UND> iiiiiiiii:==:Module [ ' dynCall <UND> iiiiiiiii ' ]    asm [ ' dynCall <UND> iiiiiiiii ' ] ;
var el = helpers . entity <CAM> factory ( ) ; var scene <CAM> el:==:this . scene <CAM> el    el . parent <CAM> node ;
var Readable = require ( ' stream ' ) . Readablevar tape:==:require ( ' tape ' )
var image <CAM> el = this . _ image <CAM> el ; var crop <CAM> el:==:this . _ crop <CAM> el ;
var torrents = this . model . get ( ' torrents ' ) ; var quality:==:Settings . movies <UND> default <UND> quality ;
var sort = a ( cell , ' sort ' )  |  |  a ( cell , ' order ' ) ; var filter:==:a ( cell , ' filter ' )  |  |  a ( cell , ' search ' ) ;
var brush <CAM> type = this . _ brush <CAM> type ; var brush <CAM> mode:==:this . _ brush <CAM> mode ;
var scope = this . _ scope  |  |  this . vm ; var handler:==:function handler ( e )
var first = lc ? chars . first : chars . FIRST ; var middle:==:lc ? chars . middle : chars . MIDDLE ;
var feedback = _ feedback  |  |  0 ; var delay <CAM> time:==:_ delay <CAM> time  |  |  0 ;
var label = chartinst . labelise ( multi ? labels [ j ] & & labels [ j ] [ i ] : labels [ i ] , multi ? values [ j ] [ i ] : values [ i ] , total ) ; var bar:==:multi ? bars [ j ] [ i ] : bars [ i ] ;
var i = x . is <CAM> empty <CAM> object ( e ) , o = x . speed ( t , n , r ) , s = function ( ) var t:==:jn ( this , x . extend ( , e ) , o ) ;
var display = opts . display ; var ctx:==:me . ctx ;
var PDFJS = shared <CAM> global . PDFJS ; var render <CAM> text <CAM> layer:==:( function render <CAM> text <CAM> layer <CAM> closure ( )
var STRING <UND> UNARY <UND> OPERATORS = exports . STRING <UND> UNARY <UND> OPERATORS = [ ' typeof ' ] ; var UNARY <UND> OPERATORS:==:exports . UNARY <UND> OPERATORS    [ ' void ' ] . concat ( BOOLEAN <UND> UNARY <UND> OPERATORS , NUMBER <UND> UNARY <UND> OPERATORS , STRING <UND> UNARY <UND> OPERATORS ) ;
var log = require ( ' npmlog ' ) var mkdirp:==:require ( ' mkdirp ' )
var stats = test <CAM> set . stats ; var tree <CAM> node:==:test <CAM> set . tree <CAM> node ;
var Source = debug . Source ; var Breakpoint:==:debug . Breakpoint ;
var previous <CAM> cell <CAM> size = _ ref . previous <CAM> cell <CAM> size ; var previous <CAM> scroll <CAM> to <CAM> alignment:==:_ ref . previous <CAM> scroll <CAM> to <CAM> alignment ;
var warn = shared <CAM> util . warn ; var custom <CAM> style:==:displaydom <CAM> utils . custom <CAM> style ;
var is <CAM> audio = detail . is <CAM> audio ; var is <CAM> video:==:detail . is <CAM> video ;
var paint <CAM> type = this . paint <CAM> type ; var tiling <CAM> type:==:this . tiling <CAM> type ;
var translateX = this . _ reduce <CAM> translate <CAM> values ( ' translateX ' , this . _ translateX ) ; var translateY:==:this . _ reduce <CAM> translate <CAM> values ( ' translateY ' , this . _ translateY ) ;
var name = file . namevar size:==:file . size
var style = create <CAM> element ( ' style ' ) ; var categories:==:web <CAM> inspector . timelineui <CAM> utils . categories ( ) ;
var op = $ . extend ( data : , dialog <CAM> id : ' ' , callback : null , options ) ; var dialog:==:( op . dialog <CAM> id & & $ ( ' body ' ) . data ( op . dialog <CAM> id ) )  |  |  this . _ current ;
var top = parse <CAM> int ( org <UND> elem . offset ( ) [ ' top ' ] ) ; var left:==:parse <CAM> int ( org <UND> elem . offset ( ) [ ' left ' ] ) ;
var fs = require ( ' fs ' ) ; var json <CAM> stream:==:require ( ' json <CAM> stream ' ) ;
var sel = provider . selected <CAM> items ; var i:==:sel . index <CAM> of ( node ) ;
var heading = default <CAM> value ( options . heading , 0 . 0 ) ; var pitch:==:default <CAM> value ( options . pitch , - <CAM> cesium <CAM> math . PI <UND> OVER <UND> TWO ) ;
var h = image . height ; var c:==:image . channels ;
var rotation = node . rotation  |  |  [ 0 , 0 , 0 , 1 ] ; var scale:==:node . scale  |  |  [ 1 , 1 , 1 ] ;
var apply <CAM> func <CAM> to <CAM> all = graph <CAM> data <CAM> window . apply <CAM> func <CAM> to <CAM> all . create <CAM> delegate ( graph <CAM> data <CAM> window ) ; var apply <CAM> func <CAM> to <CAM> each:==:graph <CAM> data <CAM> window . apply <CAM> func <CAM> to <CAM> each . create <CAM> delegate ( graph <CAM> data <CAM> window ) ;
var pie = this . pie ; var key:==:this . key ;
var btn5 = plugin . get <CAM> element ( ' btn5 ' ) ; var btn6:==:plugin . get <CAM> element ( ' btn6 ' ) ;
var g = color . g ; var b:==:color . b ;
var old = that . _ old ; var element:==:that . element [ 0 ] ;
var   TABLE = 17 ; var   LENLENS:==:18 ;
var required = schema . required & & schema . required . index <CAM> of ( key ) ! = = -1 ; var def:==:default <CAM> form <CAM> def ( key , value ,
var start = settings . start ; var end:==:settings . end ;
var use <CAM> stencil = fbo . _ use <CAM> stencilvar use <CAM> depth:==:fbo . _ use <CAM> depth
var metadata = this . model . get ( ' metadata ' )  |  |  ; var lang:==:metadata & & metadata . lang ? metadata . lang : ' en ' ;
var owner = doc . owner <CAM> document ? doc . owner <CAM> document ( ) : doc ; var pop:==:owner . populated ( path , true ) ;
var now = this . default <CAM> arg ( event . playback <CAM> time , this . now ( ) ) ; var buffer <CAM> size:==:this . _ js <CAM> node . buffer <CAM> size ;
var editor = e . editor ; var selection:==:editor . selection ;
var width = element . get <CAM> attribute ( ' width ' ) ; var height:==:element . get <CAM> attribute ( ' height ' ) ;
var frame <CAM> state = scene . _ frame <CAM> state ; var shadow <CAM> maps:==:frame <CAM> state . shadow <CAM> maps ;
var start = line . startvar end:==:line . end
var useOIT = environment <CAM> state . useOIT ; var useFXAA:==:environment <CAM> state . useFXAA ;
var frustum <CAM> commands <CAM> list = scene . _ frustum <CAM> commands <CAM> list ; var length:==:frustum <CAM> commands <CAM> list . length ;
var gltf = model . gltf ; var accessor:==:gltf . accessors [ accessor <CAM> id ] ;
var filters = filter <CAM> choice . filters ; var filter:==:filters [ slot ] ;
var app = evt & & evt . application ; var type:==:evt . type ;
var fs = require ( ' fs ' ) ; var string <CAM> decoder:==:require ( ' string <UND> decoder ' ) . string <CAM> decoder ;
var b = reject <CAM> thenable <CAM> soon ( ' rejected - b ' , 30 ) ; var c:==:reject <CAM> built <CAM> in <CAM> soon ( ' rejected - c ' , 10 ) ;
var div = tag : ' div ' , attrs : ontransitionend : spyvar e:==:$ window . document . create <CAM> event ( ' html <CAM> events ' )
var state = this . state ; var event <CAM> type:==:input . event <CAM> type ;
var base = that . stat <UND> desc . extra <UND> base ; var max <UND> length:==:that . stat <UND> desc . max <UND> length ;
var editor = plugin . active <CAM> session . editor ; var session:==:e . session ;
var Stream = util . stream . Stream ; var fs:==:require ( ' fs ' ) ;
var get <CAM> elements <CAM> by <CAM> interface = scope . get <CAM> elements <CAM> by <CAM> interface ; var non <CAM> element <CAM> parent <CAM> node <CAM> interface:==:scope . non <CAM> element <CAM> parent <CAM> node <CAM> interface ;
var debug = imports [ ' debugger ' ] ; var Frame:==:debug . Frame ;
var group <CAM> op = saved <CAM> filters [ filter <CAM> name ] . group <CAM> op ; var rules:==:saved <CAM> filters [ filter <CAM> name ] . rules ;
var object = require ( ' mout ' ) . object ; var path:==:require ( ' path ' ) ;
var y = obj . y = = null ? 0 : obj . y ; var y2:==:obj . y2     null ? 0 : obj . y2 ;
var cancel = options . cancel  |  |  function ( ) ; var timeout:==:options . timeout  |  |  2000 ;
var transceiver = self . transceivers [ sdpm <CAM> line <CAM> index ] ; var ice <CAM> gatherer:==:transceiver . ice <CAM> gatherer ;
var charstring = charstrings [ i ] ; var width:==:' width ' in charstring ? charstring . width : 0 ;
var metadata = this . get ( ' metadata ' ) ; var content:==:this . get ( ' content ' )  |  |  '' ;
var dialer = $ ( ' frequency - dialer ' ) ; var translateX:==:self . _ translateX + get <CAM> moving <CAM> space ( ) ;
var camera = scene . camera ; var mode:==:scene . mode ;
var data = function ( ) return data <CAM> string ; ; var graph:==:document . get <CAM> element <CAM> by <CAM> id ( ' graph ' ) ;
var bar <CAM> gap = series <CAM> model . get ( ' bar <CAM> gap ' ) ; var bar <CAM> category <CAM> gap:==:series <CAM> model . get ( ' bar <CAM> category <CAM> gap ' ) ;
var IDENTIFIER <UND> EXPRESSION = parse <CAM> tree <CAM> type . IDENTIFIER <UND> EXPRESSION ; var IMPORT <UND> DECLARATION:==:parse <CAM> tree <CAM> type . IMPORT <UND> DECLARATION ;
var find = imports . find ; var finder:==:imports . finder ;
var inherits = util . inherits ; var assert:==:require ( ' assert ' ) ;
var container <CAM> element = _ props3 . container <CAM> element ; var disabled:==:_ props3 . disabled ;
var error = imports [ ' dialog . error ' ] ; var nw:==:native <CAM> require ( ' nw . gui ' ) ;
var LRE = goog . i18n . bidi . Format . LRE ; var RLE:==:goog . i18n . bidi . Format . RLE ;
var create <CAM> argument <CAM> list = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> argument <CAM> list ; var create <CAM> block:==:traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> block ;
var xj = ContactEquation <UND> getImpactVelocityAlongNormal <UND> xj ; var rel <CAM> vel:==:ContactEquation <UND> getImpactVelocityAlongNormal <UND> relVel ;
var create <CAM> for <CAM> in <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> for <CAM> in <CAM> statement ; var create <CAM> for <CAM> statement:==:parse <CAM> tree <CAM> factory . create <CAM> for <CAM> statement ;
var SYNTAX <UND> ERR     = exception <CAM> code . SYNTAX <UND> ERR     = ( ( exception <CAM> message [ 12 ] = ' Syntax error ' ) , 12 ) ; var INVALID <UND> MODIFICATION <UND> ERR:==:exception <CAM> code . INVALID <UND> MODIFICATION <UND> ERR    ( ( exception <CAM> message [ 13 ]   ' Invalid modification ' ) , 13 ) ;
var init = Widget . fn . init ; var destroy:==:Widget . fn . destroy ;
var extruded <CAM> height = corridor . extruded <CAM> height ; var granularity:==:corridor . granularity ;
var $ injector = hooks . $ injector ; var $ location:==:$ injector . get ( ' $ location ' ) ;
var get <CAM> event <CAM> char <CAM> code = require ( ' get <CAM> event <CAM> char <CAM> code ' ) ; var get <CAM> event <CAM> key:==:require ( ' get <CAM> event <CAM> key ' ) ;
var ctrl <CAM> key = default <CAM> value ( options . ctrl <CAM> key , false ) ; var alt <CAM> key:==:default <CAM> value ( options . alt <CAM> key , false ) ;
var fs = require ( ' fs ' ) ; var server:==:require ( ' webserver ' ) . create ( ) ;
var pick <CAM> shader = shaders . pick <CAM> shadervar point <CAM> pick <CAM> shader:==:shaders . point <CAM> pick <CAM> shader
var identifier <CAM> token = traceur . syntax . identifier <CAM> token ; var if <CAM> statement:==:traceur . syntax . trees . if <CAM> statement ;
var d1 = _ add <CAM> div ( ' d1 ' ) , d2 = _ add <CAM> div ( ' d2 ' ) ; var c:==:_ js <CAM> plumb . connect ( source : d1 , target : d2 , before <CAM> detach : function ( conn )
var Image = require ( ' Image ' ) ; var f8 <CAM> touchable:==:require ( ' f8 <CAM> touchable ' ) ;
var parse <CAM> properties = Schema . parse <CAM> properties ; var parse <CAM> property:==:Schema . parse <CAM> property ;
var broadcast <CAM> service = _ app <CAM> js <CAM> services <CAM> broadcast <CAM> service [ ' default ' ] ; var device <CAM> name <CAM> service:==:_ app <CAM> js <CAM> services <CAM> device <CAM> name <CAM> service [ ' default ' ] ;
var cx = parse <CAM> float ( magnet <CAM> elem . get <CAM> attributens ( ORYX . CONFIG . NAMESPACE <UND> ORYX , ' cx ' ) ) ; var cy:==:parse <CAM> float ( magnet <CAM> elem . get <CAM> attributens ( ORYX . CONFIG . NAMESPACE <UND> ORYX , ' cy ' ) ) ;